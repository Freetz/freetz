#!/bin/bash

# firmware downloader & unpacker script
#
# download:
#    Downloads all files mathing pattern '*.image' from ftp.avm.de
#    The filename based on the whole directory (s!/!--!).
# unpack:
#    Removes unpacked/ folder, unpacks all downloaded firmware
#    files to corresponding folder.
#    Output: Either the count of files or something else on error.
# unpack <file1 .. fileN>:
#    Unpacks given files to subdir of current folder (${file%.image}).
#
# don't run as root ;-)
#
#
# cuma, 19.11.2012


DL_DIR=~/fw-avm

download() {
	mkdir -p $DL_DIR
	cd $DL_DIR
	rm -rf ftp.avm.de 2>/dev/null

	# BETA/Labor/LabRC
	if [ -n "$1" -a "$1" != "stable" -a "$1" != "s" ]; then
		for url in ftp://ftp.avm.de/fritz.box/beta/ ftp://service.avm.de/Beta/; do
			wget -nv -m -A '*.zip' $url
			(
				cd ${url#ftp://}
				for i in $(find . -type f -iname '*.zip'); do
					unzip -q -o -j $i
				done
				# remove all files with no beta|labor in name
				find . -type f -regextype posix-egrep ! -iregex '.*(beta|labor|labrc).*[.]image' -exec rm -f {} '+' 2>/dev/null
			)
		done
	fi

	# stable
	if [ -z "$1" -o "$1" == "stable" -o "$1" == "s" ]; then
		for url in ftp://ftp.avm.de/fritz.box/ ftp://service.avm.de/Downgrade/; do
			wget -nv -m -A '*.image' -R '*Powerline*,*powerline*,*Repeater*,*repeater*,*VoIP-Gateway*' $url
			find ${url#ftp://} -type f ! -name '*.image' -exec rm -f {} '+' 2>/dev/null
		done
	fi

	for file in $(find ftp.avm.de service.avm.de -type f); do
		mv -f $file $(echo $file | sed -r -e 's,(ftp[.]avm[.]de/fritz.box/|service[.]avm[.]de/|firmware/),,g;s,/,--,g')
	done
	rm -rf ftp.avm.de service.avm.de 2>/dev/null
}

unpack() {
	[ ! -d $DL_DIR ] && echo "no $DL_DIR dir with images"
	cd $DL_DIR
	rm -rf unpacked 2>/dev/null
	mkdir -p unpacked
	[ -f _failed.log ] && rm _failed.log

	for file in *.image; do
		image $file unpacked/
	done

	if [ -e _failed.log ]; then
		echo FAILED:
		cat _failed.log
	fi
}

# $1 is expected to be NMI-vector-removed and kernel-filesystem-splitted
unfs_probe() {
	{
		{ $FTOOLS/blkid -O 256 "$1" 2>/dev/null | grep -q 'TYPE="ext2"'; } \
		&& dd if="$1" of="$1.ext2" bs=256 skip=1 conv=sync >/dev/null 2>&1   \
		&& { mkdir -p "squashfs-root"; echo "rdump / squashfs-root" | $FTOOLS/debugfs "$1.ext2"; }
	} \
	|| $FTOOLS/unsquashfs4-lzma-avm-be "$1"
}

image() {
	local img=$1
	local dst=$2
	if [ ! -e $img ]; then
		echo -e "~~~~\t$img" | tee -a _failed.log
		continue
	fi
	rm -rf var
	if [ "$img" != "${img%.exe}" ]; then
		$FTOOLS/extract-images $img >/dev/null
		mkdir -p var
		mv ${img#*/}.unp var/tmp
	else
		tar -xif $img --wildcards './var/tmp/*.image' >/dev/null 2>&1
	fi
	if [ ! -d var ]; then
		echo -e "NULL\t$img"
		continue
	fi
	if [ ! -f var/tmp/kernel.image ]; then
		echo -e "----\t$img" | tee -a _failed.log
		rm -rf var
		continue
	fi
	($FTOOLS/remove-nmi-vector var/tmp/kernel.image var/tmp/kernel.image.no-nmi 2>&1 && mv var/tmp/kernel.image.no-nmi var/tmp/kernel.image 2>/dev/null) | sed -r -n -e 's,(.*NMI vector.*),\t\1,p'
	cat var/tmp/filesystem.image var/tmp/kernel.image > x.image 2>/dev/null
	rm -rf var
	$FTOOLS/tichksum -r x.image >/dev/null 2>&1
	$FTOOLS/find-squashfs x.image >/dev/null 2>&1
	rm x.image
	cat kernelsquashfs.raw kernel.raw > x.raw
	rm  kernelsquashfs.raw kernel.raw
	unfs_probe x.raw >/dev/null 2>&1 || echo FALSE $img
	rm -f x.raw x.raw.ext2
	# for recent fw's
	if [ -e squashfs-root/filesystem_core.squashfs ]; then
		$FTOOLS/find-squashfs squashfs-root/filesystem_core.squashfs >/dev/null 2>&1
		rm squashfs-root/filesystem_core.squashfs kernel.raw
		mv squashfs-root filesystem_envelope
		unfs_probe kernelsquashfs.raw >/dev/null 2>&1
		rm kernelsquashfs.raw
		[ -d squashfs-root ] && mv filesystem_envelope squashfs-root/ || rm -rf filesystem_envelope
	fi

	if [ -d squashfs-root ]; then
		local numberOfFiles=$(find squashfs-root -type f \! -path '*filesystem_envelope*' | wc -l)
		echo -e "${numberOfFiles}\t${img}"
		mv squashfs-root "${dst}$(echo ${img%.*} |sed 's!.*/!!')"
	else
		echo -e "====\t$img" | tee -a _failed.log
	fi
}

# check args
while [ $# -gt 0 ]; do
	case $1 in
		d|download)
			download=y
			case $2 in
				s|l|b|a|stable|labor|beta|all)
					dl_arg="$2"
					shift
					;;
				u|unpack|"")
					;;
				*)
					echo "Unknown argument: $2"
					exit 1
					;;
			esac
			;;
		u|unpack)
			unpack=y
			;;
		*)
			image="$image $1"
			;;
	esac
	shift
done

if [ "$download" != "y" -a "$unpack" != "y" ]; then
	echo "usage: ${0##*/} <download [stable|labor|all] AND/OR unpack [image1 .. imageN]>"
	exit 1
fi

# check tools
if [ "$unpack" == "y" ]; then
	FTOOLS="$(dirname $(readlink -f ${0}))"
	if [ ! -e $FTOOLS/find-squashfs ]; then
		echo "You have to run 'make tools' first."
		exit 1
	fi
fi

# main
[ "$download" == "y" ] && download $dl_arg
if [ "$unpack" == "y" ]; then
	[ -z "$image" ] && unpack
	for imgfile in $image; do
		image $imgfile
	done
fi
