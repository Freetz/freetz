--- Makefile
+++ Makefile
@@ -3,14 +3,14 @@
 BASENAME:=privatekeypassword
 #
 # target binary, used as proxy too
-# 
+#
 BINARY:=$(BASENAME)
 #
 # library settings
 #
 LIBNAME:=lib$(BASENAME)
-LIBRARY:=$(LIBNAME).so
-LIB:=$(LIBNAME).a
+LIB_SO:=$(LIBNAME).so
+LIB_A:=$(LIBNAME).a
 LIBHDR:=$(BASENAME).h
 #
 # source files
@@ -23,64 +23,60 @@
 # tools
 #
 CC = gcc
-RM = rm
 AR = ar
 RANLIB = ranlib
 #
 # flags for calling the tools
 #
-override CFLAGS += -W -Wall -std=c99 -O2 -fvisibility=hidden 
-#override CFLAGS += -W -Wall -std=c99 -O0 -ggdb -fvisibility=hidden
-#
-# how to build objects from sources
-#
-%.o: %.c
-	$(CC) $(CFLAGS) -c $< -o $@
+ifdef DO_DEBUG
+OPT = -O0 -ggdb
+else
+OPT = -O2
+override CPPFLAGS += -DNDEBUG
+endif
+override CFLAGS += -W -Wall -std=c99 $(OPT) -fvisibility=hidden
+
 #
 # generate position independent code for the library
 #
 $(LIB_OBJS): CFLAGS += -fPIC
 #
-# link binaries with this libraries too
-#
-LIBS = -ldl
-#
 # targets to make
 #
 .PHONY: all clean
 #
-all: $(LIBRARY) $(LIB) $(BINARY)
+all: $(LIB_SO) $(LIB_A) $(BINARY)
 #
 # install library files into the Freetz build system
 # DESTDIR will be set to the target directory while calling this target
 #
-install-lib: $(LIBRARY) $(LIB) $(LIBHDR)
+install-lib: $(LIB_SO) $(LIB_A) $(LIBHDR)
 	mkdir -p $(DESTDIR)/usr/include/$(BASENAME) $(DESTDIR)/usr/lib
 	cp -a $(LIBHDR) $(DESTDIR)/usr/include/$(BASENAME)
-	cp -a $(LIBRARY) $(LIB) $(DESTDIR)/usr/lib/
+	cp -a $(LIB_SO) $(LIB_A) $(DESTDIR)/usr/lib/
 #
 # shared library
 #
-$(LIBRARY): $(LIB_OBJS) 
-	$(CC) -shared -o $@ $<
+$(LIB_SO): $(LIB_OBJS)
+	$(CC) -shared $< -ldl -o $@
 #
 # static library
 #
-$(LIB): $(LIB_OBJS) $(LIBHDR)
+$(LIB_A): $(LIB_OBJS)
 	-$(RM) $@ 2>/dev/null
 	$(AR) rcu $@ $<
 	$(RANLIB) $@
 #
 # the CLI binary
 #
-$(BINARY): $(BIN_OBJS) $(LIBRARY)
-	$(CC) $(LDFLAGS) $(filter %.o,$<) -L. -l$(BASENAME) -o $@ $(LIBS)
+$(BINARY): $(BIN_OBJS) | $(LIB_SO)
+	$(CC) $(LDFLAGS) $(filter %.o,$<) -L. -l$(BASENAME) -o $@
 #
 # everything to make, if header file changes
 #
 $(LIB_OBJS) $(BIN_OBJS): $(LIBHDR)
 #
-# cleanup 	
+# cleanup
 #
 clean:
-	-$(RM) *.o $(LIB) $(LIBRARY) $(BINARY) 2>/dev/null
+	-$(RM) *.o $(LIB_SO) $(LIB_A) $(BINARY) 2>/dev/null
