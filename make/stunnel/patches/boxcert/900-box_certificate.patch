--- src/ctx.c
+++ src/ctx.c
@@ -37,6 +37,7 @@
 
 #include "common.h"
 #include "prototypes.h"
+#include <privatekeypassword/privatekeypassword.h>
 
 #ifndef OPENSSL_NO_DH
 DH *dh_params=NULL;
@@ -665,8 +666,27 @@
     return 0; /* OK */
 }
 
+static int is_fritzbox_key(const char *file_name) {
+    struct stat sb; /* buffer for stat */
+
+    if (!stat(file_name, &sb))
+        return 0;
+
+    /* TODO: should we check here if file_name matches some pattern */
+
+    /* if it's a character device, assume it's the Fritz!OS private key file from TFFS */
+    return S_ISCHR(sb.st_mode);
+}
+
+/*
+  the "userdata" ptr for passwd_cb is of type "void", so we can and will "abuse" it
+  as flag (for our changes in passphrase_cb) to signal "FRITZ!Box certificate" condition
+  we use a "pointer to address 1 instead of 0", which is valid for void pointer
+*/
+#define FRITZBOX_KEY_PASSWD_CB_MARKER ((void *)1)
+
 NOEXPORT int load_key_file(SERVICE_OPTIONS *section) {
-    int i, success;
+    int i, success = 0;
     UI_DATA ui_data;
 
     s_log(LOG_INFO, "Loading private key from file: %s", section->key);
@@ -676,10 +696,18 @@
     ui_data.section=section; /* setup current section for callbacks */
     SSL_CTX_set_default_passwd_cb(section->ctx, passphrase_cb);
 
+    if (is_fritzbox_key(section->key)) {
+        SSL_CTX_set_default_passwd_cb_userdata(section->ctx, FRITZBOX_KEY_PASSWD_CB_MARKER);
+        success=SSL_CTX_use_PrivateKey_file(section->ctx, section->key,
+            SSL_FILETYPE_PEM);
+    }
+
+if (!success) {
     /* try the cached value (initially an empty passphrase) */
     SSL_CTX_set_default_passwd_cb_userdata(section->ctx, NULL);
     success=SSL_CTX_use_PrivateKey_file(section->ctx, section->key,
         SSL_FILETYPE_PEM);
+}
 
     /* invoke the UI */
     SSL_CTX_set_default_passwd_cb_userdata(section->ctx, &ui_data);
@@ -776,7 +804,19 @@
         buf[size-1]='\0';
         len=(int)strlen(buf);
     } else { /* prompt the user on subsequent requests */
+        if(userdata == FRITZBOX_KEY_PASSWD_CB_MARKER) { /* try to open it as FRITZ!OS key file */
+#ifdef STATIC
+            /* - workaround for dlopen() crash with statically linked binaries
+               - see privatekeypassword package for preconditions and possible
+                 environment settings to locate the proxy binary
+            */
+            getPrivateKeyPassword_setMethod(PRIVATEKEYPASSWORD_METHOD_PROXY);
+#endif
+            len=getPrivateKeyPassword_OpenSSL_Callback(buf, size, rwflag, NULL);
+        } else {
         len=passwd_cb(buf, size, rwflag, userdata); /* invoke the UI */
+        }
+
         memcpy(cache, buf, (size_t)size); /* save in cache */
     }
     return len;
