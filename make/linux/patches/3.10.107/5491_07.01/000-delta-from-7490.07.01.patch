diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_debug.c linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_debug.c
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_debug.c	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_debug.c	2019-01-02 12:04:50.000000000 +0100
@@ -1,26 +1,74 @@
 #include "avm_event_gen_types.h"
 
-char *get_enum__powermanagment_status_type_name (enum _powermanagment_status_type value) {
+char *get_enum_wlan_event_scan_type_name (enum wlan_event_scan_type value) {
 	switch(value) {
-		default: return("_powermanagment_status_type_unknown");
-		case dsl_status: return("dsl_status");
+		default: return("wlan_event_scan_type_unknown");
+		case WLAN_EVENT_SCAN_FINISHED: return("WLAN_EVENT_SCAN_FINISHED");
 	}
 }
 
-char *get_enum_ePLCState_name (enum ePLCState value) {
+char *get_enum_wlan_event_sel_name (enum wlan_event_sel value) {
 	switch(value) {
-		default: return("ePLCState_unknown");
-		case PLCStateRunningNotConnected: return("PLCStateRunningNotConnected");
-		case PLCStateRunningConnected: return("PLCStateRunningConnected");
-		case PLCStateNotRunning: return("PLCStateNotRunning");
+		default: return("wlan_event_sel_unknown");
+		case INPUT_AUTH_1_OS_A: return("INPUT_AUTH_1_OS_A");
+		case INPUT_AUTH_1_SK_A: return("INPUT_AUTH_1_SK_A");
+		case INPUT_AUTH_1_D: return("INPUT_AUTH_1_D");
+		case INPUT_AUTH_3_A: return("INPUT_AUTH_3_A");
+		case INPUT_AUTH_3_D: return("INPUT_AUTH_3_D");
+		case INPUT_DE_AUTH_STATION: return("INPUT_DE_AUTH_STATION");
+		case INPUT_ASSOC_REQ_CHECK: return("INPUT_ASSOC_REQ_CHECK");
+		case INPUT_ASSOC_REQ_A: return("INPUT_ASSOC_REQ_A");
+		case INPUT_ASSOC_REQ_D: return("INPUT_ASSOC_REQ_D");
+		case INPUT_ASSOC_REQ_SEC_D: return("INPUT_ASSOC_REQ_SEC_D");
+		case INPUT_RE_ASSOC_REQ_CHECK: return("INPUT_RE_ASSOC_REQ_CHECK");
+		case INPUT_RE_ASSOC_REQ_A: return("INPUT_RE_ASSOC_REQ_A");
+		case INPUT_RE_ASSOC_REQ_D: return("INPUT_RE_ASSOC_REQ_D");
+		case INPUT_RE_ASSOC_REQ_SEC_D: return("INPUT_RE_ASSOC_REQ_SEC_D");
+		case INPUT_DIS_ASSOC_STATION: return("INPUT_DIS_ASSOC_STATION");
+		case INPUT_CLASS_3: return("INPUT_CLASS_3");
+		case INPUT_AUTH_TIMEOUT: return("INPUT_AUTH_TIMEOUT");
+		case INPUT_DE_AUTH_MNG_UNICAST: return("INPUT_DE_AUTH_MNG_UNICAST");
+		case INPUT_DE_AUTH_MNG_BROADCAST: return("INPUT_DE_AUTH_MNG_BROADCAST");
+		case INPUT_DIS_ASSOC_MNG_UNICAST: return("INPUT_DIS_ASSOC_MNG_UNICAST");
+		case INPUT_DIS_ASSOC_MNG_BROADCAST: return("INPUT_DIS_ASSOC_MNG_BROADCAST");
+		case INPUT_MAC_AUTHORIZE: return("INPUT_MAC_AUTHORIZE");
+		case INPUT_MAC_DE_AUTHORIZE: return("INPUT_MAC_DE_AUTHORIZE");
+		case INPUT_WDS_LINK_UP: return("INPUT_WDS_LINK_UP");
+		case INPUT_WDS_LINK_DOWN: return("INPUT_WDS_LINK_DOWN");
+		case INPUT_FRAME_TX_COMPLETE: return("INPUT_FRAME_TX_COMPLETE");
+		case INPUT_MADWIFI_WRONG_PSK: return("INPUT_MADWIFI_WRONG_PSK");
+		case INPUT_WPS: return("INPUT_WPS");
+		case INPUT_MINI: return("INPUT_MINI");
+		case INPUT_RADAR: return("INPUT_RADAR");
+		case INPUT_WPS_ENROLLEE: return("INPUT_WPS_ENROLLEE");
+		case INPUT_STA: return("INPUT_STA");
+		case INPUT_GREENAP_PS: return("INPUT_GREENAP_PS");
+		case INPUT_EAP_AUTHORIZED: return("INPUT_EAP_AUTHORIZED");
+		case INPUT_MWO_INTERFERENCE: return("INPUT_MWO_INTERFERENCE");
+		case INPUT_AUTH_EXPIRED: return("INPUT_AUTH_EXPIRED");
+		case INPUT_COEXIST_SWITCH: return("INPUT_COEXIST_SWITCH");
+		case INPUT_STA_ASSOC: return("INPUT_STA_ASSOC");
+		case INPUT_STA_AUTH: return("INPUT_STA_AUTH");
+		case INPUT_STA_AUTHORIZATION: return("INPUT_STA_AUTHORIZATION");
+		case INPUT_WDS_NO_TIAGGR: return("INPUT_WDS_NO_TIAGGR");
+		case INPUT_MAX_NODE_REACHED: return("INPUT_MAX_NODE_REACHED");
+		case INPUT_RADAR_DFS_WAIT: return("INPUT_RADAR_DFS_WAIT");
+		case INPUT_INTERFERENCE_CHAN_CHANGE: return("INPUT_INTERFERENCE_CHAN_CHANGE");
+		case INPUT_RADAR_END: return("INPUT_RADAR_END");
+		case INPUT_RADAR_DFS_WAIT_PRECAC: return("INPUT_RADAR_DFS_WAIT_PRECAC");
 	}
 }
 
-char *get_enum_avm_event_powermanagment_remote_action_name (enum avm_event_powermanagment_remote_action value) {
+char *get_enum___avm_event_cmd_name (enum __avm_event_cmd value) {
 	switch(value) {
-		default: return("avm_event_powermanagment_remote_action_unknown");
-		case avm_event_powermanagment_ressourceinfo: return("avm_event_powermanagment_ressourceinfo");
-		case avm_event_powermanagment_activatepowermode: return("avm_event_powermanagment_activatepowermode");
+		default: return("__avm_event_cmd_unknown");
+		case avm_event_cmd_register: return("avm_event_cmd_register");
+		case avm_event_cmd_release: return("avm_event_cmd_release");
+		case avm_event_cmd_source_register: return("avm_event_cmd_source_register");
+		case avm_event_cmd_source_release: return("avm_event_cmd_source_release");
+		case avm_event_cmd_source_trigger: return("avm_event_cmd_source_trigger");
+		case avm_event_cmd_trigger: return("avm_event_cmd_trigger");
+		case avm_event_cmd_undef: return("avm_event_cmd_undef");
 	}
 }
 
@@ -32,52 +80,43 @@
 	}
 }
 
-char *get_enum_wlan_sm_states_name (enum wlan_sm_states value) {
-	switch(value) {
-		default: return("wlan_sm_states_unknown");
-		case WLAN_SM_STATE_IDLE: return("WLAN_SM_STATE_IDLE");
-		case WLAN_SM_STATE_AUTH_KEY: return("WLAN_SM_STATE_AUTH_KEY");
-		case WLAN_SM_STATE_AUTHENTICATED: return("WLAN_SM_STATE_AUTHENTICATED");
-		case WLAN_SM_STATE_WAIT_FOR_ASS_RES: return("WLAN_SM_STATE_WAIT_FOR_ASS_RES");
-		case WLAN_SM_STATE_ASSOCIATED: return("WLAN_SM_STATE_ASSOCIATED");
-		case WLAN_SM_STATE_AUTHORIZED: return("WLAN_SM_STATE_AUTHORIZED");
-		case WLAN_SM_STATE_DEAUTHENTICATE: return("WLAN_SM_STATE_DEAUTHENTICATE");
-		case WLAN_SM_NUM_STATES: return("WLAN_SM_NUM_STATES");
-	}
-}
-
-char *get_enum_avm_event_switch_type_name (enum avm_event_switch_type value) {
-	switch(value) {
-		default: return("avm_event_switch_type_unknown");
-		case binary: return("binary");
-		case percent: return("percent");
-	}
-}
-
-char *get_enum_avm_event_internet_new_ip_param_sel_name (enum avm_event_internet_new_ip_param_sel value) {
-	switch(value) {
-		default: return("avm_event_internet_new_ip_param_sel_unknown");
-		case avm_event_internet_new_ip_v4: return("avm_event_internet_new_ip_v4");
-		case avm_event_internet_new_ip_v6: return("avm_event_internet_new_ip_v6");
-	}
-}
-
-char *get_enum_fax_receive_mode_name (enum fax_receive_mode value) {
+char *get_enum__powermanagment_device_name (enum _powermanagment_device value) {
 	switch(value) {
-		default: return("fax_receive_mode_unknown");
-		case FAX_RECEIVE_MODE_OFF: return("FAX_RECEIVE_MODE_OFF");
-		case FAX_RECEIVE_MODE_MAIL_ONLY: return("FAX_RECEIVE_MODE_MAIL_ONLY");
-		case FAX_RECEIVE_MODE_STORE_ONLY: return("FAX_RECEIVE_MODE_STORE_ONLY");
-		case FAX_RECEIVE_MODE_MAIL_AND_STORE: return("FAX_RECEIVE_MODE_MAIL_AND_STORE");
+		default: return("_powermanagment_device_unknown");
+		case powerdevice_none: return("powerdevice_none");
+		case powerdevice_cpuclock: return("powerdevice_cpuclock");
+		case powerdevice_dspclock: return("powerdevice_dspclock");
+		case powerdevice_systemclock: return("powerdevice_systemclock");
+		case powerdevice_wlan: return("powerdevice_wlan");
+		case powerdevice_isdnnt: return("powerdevice_isdnnt");
+		case powerdevice_isdnte: return("powerdevice_isdnte");
+		case powerdevice_analog: return("powerdevice_analog");
+		case powerdevice_dect: return("powerdevice_dect");
+		case powerdevice_ethernet: return("powerdevice_ethernet");
+		case powerdevice_dsl: return("powerdevice_dsl");
+		case powerdevice_usb_host: return("powerdevice_usb_host");
+		case powerdevice_usb_client: return("powerdevice_usb_client");
+		case powerdevice_charge: return("powerdevice_charge");
+		case powerdevice_loadrate: return("powerdevice_loadrate");
+		case powerdevice_temperature: return("powerdevice_temperature");
+		case powerdevice_dectsync: return("powerdevice_dectsync");
+		case powerdevice_usb_host2: return("powerdevice_usb_host2");
+		case powerdevice_usb_host3: return("powerdevice_usb_host3");
+		case powerdevice_dsp_loadrate: return("powerdevice_dsp_loadrate");
+		case powerdevice_vdsp_loadrate: return("powerdevice_vdsp_loadrate");
+		case powerdevice_lte: return("powerdevice_lte");
+		case powerdevice_loadrate2: return("powerdevice_loadrate2");
+		case powerdevice_dvbc: return("powerdevice_dvbc");
+		case powerdevice_maxdevices: return("powerdevice_maxdevices");
 	}
 }
 
-char *get_enum_avm_event_tffs_open_mode_name (enum avm_event_tffs_open_mode value) {
+char *get_enum_avm_event_tffs_notify_event_name (enum avm_event_tffs_notify_event value) {
 	switch(value) {
-		default: return("avm_event_tffs_open_mode_unknown");
-		case avm_event_tffs_mode_read: return("avm_event_tffs_mode_read");
-		case avm_event_tffs_mode_write: return("avm_event_tffs_mode_write");
-		case avm_event_tffs_mode_panic: return("avm_event_tffs_mode_panic");
+		default: return("avm_event_tffs_notify_event_unknown");
+		case avm_event_tffs_notify_clear: return("avm_event_tffs_notify_clear");
+		case avm_event_tffs_notify_update: return("avm_event_tffs_notify_update");
+		case avm_event_tffs_notify_reinit: return("avm_event_tffs_notify_reinit");
 	}
 }
 
@@ -115,31 +154,147 @@
 	}
 }
 
-char *get_enum_avm_event_tffs_call_type_name (enum avm_event_tffs_call_type value) {
+char *get_enum_avm_event_powermanagment_remote_action_name (enum avm_event_powermanagment_remote_action value) {
 	switch(value) {
-		default: return("avm_event_tffs_call_type_unknown");
-		case avm_event_tffs_call_open: return("avm_event_tffs_call_open");
-		case avm_event_tffs_call_close: return("avm_event_tffs_call_close");
-		case avm_event_tffs_call_read: return("avm_event_tffs_call_read");
-		case avm_event_tffs_call_write: return("avm_event_tffs_call_write");
-		case avm_event_tffs_call_cleanup: return("avm_event_tffs_call_cleanup");
-		case avm_event_tffs_call_reindex: return("avm_event_tffs_call_reindex");
-		case avm_event_tffs_call_info: return("avm_event_tffs_call_info");
-		case avm_event_tffs_call_init: return("avm_event_tffs_call_init");
-		case avm_event_tffs_call_deinit: return("avm_event_tffs_call_deinit");
-		case avm_event_tffs_call_notify: return("avm_event_tffs_call_notify");
-		case avm_event_tffs_call_paniclog: return("avm_event_tffs_call_paniclog");
+		default: return("avm_event_powermanagment_remote_action_unknown");
+		case avm_event_powermanagment_ressourceinfo: return("avm_event_powermanagment_ressourceinfo");
+		case avm_event_powermanagment_activatepowermode: return("avm_event_powermanagment_activatepowermode");
 	}
 }
 
-char *get_enum_avm_event_firmware_type_name (enum avm_event_firmware_type value) {
+char *get_enum__avm_remote_wdt_cmd_name (enum _avm_remote_wdt_cmd value) {
 	switch(value) {
-		default: return("avm_event_firmware_type_unknown");
-		case box_firmware: return("box_firmware");
-		case fritz_fon_firmware: return("fritz_fon_firmware");
-		case fritz_dect_repeater: return("fritz_dect_repeater");
-		case fritz_plug_switch: return("fritz_plug_switch");
-		case fritz_hkr: return("fritz_hkr");
+		default: return("_avm_remote_wdt_cmd_unknown");
+		case wdt_register: return("wdt_register");
+		case wdt_release: return("wdt_release");
+		case wdt_trigger: return("wdt_trigger");
+	}
+}
+
+char *get_enum__avm_event_push_button_key_name (enum _avm_event_push_button_key value) {
+	switch(value) {
+		default: return("_avm_event_push_button_key_unknown");
+		case avm_event_push_button_wlan_on_off: return("avm_event_push_button_wlan_on_off");
+		case avm_event_push_button_wlan_wps: return("avm_event_push_button_wlan_wps");
+		case avm_event_push_button_wlan_standby: return("avm_event_push_button_wlan_standby");
+		case avm_event_push_button_wlan_wps_station: return("avm_event_push_button_wlan_wps_station");
+		case avm_event_push_button_dect_paging: return("avm_event_push_button_dect_paging");
+		case avm_event_push_button_dect_pairing: return("avm_event_push_button_dect_pairing");
+		case avm_event_push_button_dect_on_off: return("avm_event_push_button_dect_on_off");
+		case avm_event_push_button_dect_standby: return("avm_event_push_button_dect_standby");
+		case avm_event_push_button_power_set_factory: return("avm_event_push_button_power_set_factory");
+		case avm_event_push_button_power_on_off: return("avm_event_push_button_power_on_off");
+		case avm_event_push_button_power_standby: return("avm_event_push_button_power_standby");
+		case avm_event_push_button_power_socket_on_off: return("avm_event_push_button_power_socket_on_off");
+		case avm_event_push_button_tools_profiling: return("avm_event_push_button_tools_profiling");
+		case avm_event_push_button_plc_on_off: return("avm_event_push_button_plc_on_off");
+		case avm_event_push_button_plc_pairing: return("avm_event_push_button_plc_pairing");
+		case avm_event_push_button_led_standby: return("avm_event_push_button_led_standby");
+		case avm_event_push_button_2fa_success: return("avm_event_push_button_2fa_success");
+		case avm_event_push_button_lte_wakeup: return("avm_event_push_button_lte_wakeup");
+		case avm_event_push_button_plc_pairing_off: return("avm_event_push_button_plc_pairing_off");
+		case avm_event_push_button_wlan_wps_off: return("avm_event_push_button_wlan_wps_off");
+		case avm_event_push_button_dect_pairing_off: return("avm_event_push_button_dect_pairing_off");
+		case avm_event_push_button_nexus_pairing_off: return("avm_event_push_button_nexus_pairing_off");
+		case avm_event_push_button_nexus_pairing: return("avm_event_push_button_nexus_pairing");
+		case avm_event_push_button_wlan_wps_station_off: return("avm_event_push_button_wlan_wps_station_off");
+		case avm_event_push_button_nexus_pairing_box: return("avm_event_push_button_nexus_pairing_box");
+		case avm_event_push_button_wlan_sta_wps_no_connect: return("avm_event_push_button_wlan_sta_wps_no_connect");
+		case avm_event_push_button_wlan_sta_wps_no_connect_off: return("avm_event_push_button_wlan_sta_wps_no_connect_off");
+		case avm_event_push_button_connect_methode1: return("avm_event_push_button_connect_methode1");
+		case avm_event_push_button_connect_methode2: return("avm_event_push_button_connect_methode2");
+		case avm_event_push_button_connect_methode3: return("avm_event_push_button_connect_methode3");
+		case avm_event_push_button_connect_methode4: return("avm_event_push_button_connect_methode4");
+		case avm_event_push_button_connect_methode5: return("avm_event_push_button_connect_methode5");
+		case avm_event_push_button_connect_methode6: return("avm_event_push_button_connect_methode6");
+		case avm_event_push_button_connect_off: return("avm_event_push_button_connect_off");
+		case avm_event_push_button_connect_timeout: return("avm_event_push_button_connect_timeout");
+		case avm_event_push_button_connect_error: return("avm_event_push_button_connect_error");
+		case avm_event_push_button_connect_success: return("avm_event_push_button_connect_success");
+		case avm_event_push_button_connect_started: return("avm_event_push_button_connect_started");
+		case avm_event_push_button_lan_pairing: return("avm_event_push_button_lan_pairing");
+		case avm_event_push_button_lan_pairing_off: return("avm_event_push_button_lan_pairing_off");
+		case avm_event_push_button_last: return("avm_event_push_button_last");
+	}
+}
+
+char *get_enum_ePLCState_name (enum ePLCState value) {
+	switch(value) {
+		default: return("ePLCState_unknown");
+		case PLCStateRunningNotConnected: return("PLCStateRunningNotConnected");
+		case PLCStateRunningConnected: return("PLCStateRunningConnected");
+		case PLCStateNotRunning: return("PLCStateNotRunning");
+	}
+}
+
+char *get_enum_avm_event_internet_new_ip_param_sel_name (enum avm_event_internet_new_ip_param_sel value) {
+	switch(value) {
+		default: return("avm_event_internet_new_ip_param_sel_unknown");
+		case avm_event_internet_new_ip_v4: return("avm_event_internet_new_ip_v4");
+		case avm_event_internet_new_ip_v6: return("avm_event_internet_new_ip_v6");
+	}
+}
+
+char *get_enum__cputype_name (enum _cputype value) {
+	switch(value) {
+		default: return("_cputype_unknown");
+		case host_cpu: return("host_cpu");
+		case remote_cpu: return("remote_cpu");
+	}
+}
+
+char *get_enum_avm_event_tffs_open_mode_name (enum avm_event_tffs_open_mode value) {
+	switch(value) {
+		default: return("avm_event_tffs_open_mode_unknown");
+		case avm_event_tffs_mode_read: return("avm_event_tffs_mode_read");
+		case avm_event_tffs_mode_write: return("avm_event_tffs_mode_write");
+		case avm_event_tffs_mode_panic: return("avm_event_tffs_mode_panic");
+	}
+}
+
+char *get_enum_wlan_event_radio_recovery_state_name (enum wlan_event_radio_recovery_state value) {
+	switch(value) {
+		default: return("wlan_event_radio_recovery_state_unknown");
+		case WLAN_EVENT_RADIO_RECOVERY_RADIO_DOWN: return("WLAN_EVENT_RADIO_RECOVERY_RADIO_DOWN");
+		case WLAN_EVENT_RADIO_RECOVERY_RADIO_UP: return("WLAN_EVENT_RADIO_RECOVERY_RADIO_UP");
+	}
+}
+
+char *get_enum__avm_event_ethernet_speed_name (enum _avm_event_ethernet_speed value) {
+	switch(value) {
+		default: return("_avm_event_ethernet_speed_unknown");
+		case avm_event_ethernet_speed_no_link: return("avm_event_ethernet_speed_no_link");
+		case avm_event_ethernet_speed_10M: return("avm_event_ethernet_speed_10M");
+		case avm_event_ethernet_speed_100M: return("avm_event_ethernet_speed_100M");
+		case avm_event_ethernet_speed_1G: return("avm_event_ethernet_speed_1G");
+		case avm_event_ethernet_speed_error: return("avm_event_ethernet_speed_error");
+		case avm_event_ethernet_speed_items: return("avm_event_ethernet_speed_items");
+	}
+}
+
+char *get_enum_avm_event_msg_type_name (enum avm_event_msg_type value) {
+	switch(value) {
+		default: return("avm_event_msg_type_unknown");
+		case avm_event_source_register_type: return("avm_event_source_register_type");
+		case avm_event_source_unregister_type: return("avm_event_source_unregister_type");
+		case avm_event_source_notifier_type: return("avm_event_source_notifier_type");
+		case avm_event_remote_source_trigger_request_type: return("avm_event_remote_source_trigger_request_type");
+		case avm_event_ping_type: return("avm_event_ping_type");
+		case avm_event_tffs_type: return("avm_event_tffs_type");
+	}
+}
+
+char *get_enum_wlan_sm_states_name (enum wlan_sm_states value) {
+	switch(value) {
+		default: return("wlan_sm_states_unknown");
+		case WLAN_SM_STATE_IDLE: return("WLAN_SM_STATE_IDLE");
+		case WLAN_SM_STATE_AUTH_KEY: return("WLAN_SM_STATE_AUTH_KEY");
+		case WLAN_SM_STATE_AUTHENTICATED: return("WLAN_SM_STATE_AUTHENTICATED");
+		case WLAN_SM_STATE_WAIT_FOR_ASS_RES: return("WLAN_SM_STATE_WAIT_FOR_ASS_RES");
+		case WLAN_SM_STATE_ASSOCIATED: return("WLAN_SM_STATE_ASSOCIATED");
+		case WLAN_SM_STATE_AUTHORIZED: return("WLAN_SM_STATE_AUTHORIZED");
+		case WLAN_SM_STATE_DEAUTHENTICATE: return("WLAN_SM_STATE_DEAUTHENTICATE");
+		case WLAN_SM_NUM_STATES: return("WLAN_SM_NUM_STATES");
 	}
 }
 
@@ -200,94 +355,22 @@
 	}
 }
 
-char *get_enum_wlan_event_id_name (enum wlan_event_id value) {
-	switch(value) {
-		default: return("wlan_event_id_unknown");
-		case CLIENT_STATE_CHANGE: return("CLIENT_STATE_CHANGE");
-		case CLIENT_CONNECT_INFO: return("CLIENT_CONNECT_INFO");
-		case WLAN_EVENT_SCAN: return("WLAN_EVENT_SCAN");
-		case CLIENT_STATE_IDLE: return("CLIENT_STATE_IDLE");
-		case WLAN_RADIO_RECOVERY: return("WLAN_RADIO_RECOVERY");
-	}
-}
-
-char *get_enum__avm_remote_wdt_cmd_name (enum _avm_remote_wdt_cmd value) {
-	switch(value) {
-		default: return("_avm_remote_wdt_cmd_unknown");
-		case wdt_register: return("wdt_register");
-		case wdt_release: return("wdt_release");
-		case wdt_trigger: return("wdt_trigger");
-	}
-}
-
-char *get_enum__avm_logtype_name (enum _avm_logtype value) {
-	switch(value) {
-		default: return("_avm_logtype_unknown");
-		case local_panic: return("local_panic");
-		case local_crash: return("local_crash");
-		case remote_panic: return("remote_panic");
-		case remote_crash: return("remote_crash");
-	}
-}
-
-char *get_enum__avm_rpctype_name (enum _avm_rpctype value) {
-	switch(value) {
-		default: return("_avm_rpctype_unknown");
-		case command_to_arm: return("command_to_arm");
-		case command_to_atom: return("command_to_atom");
-		case reply_to_arm: return("reply_to_arm");
-		case reply_to_atom: return("reply_to_atom");
-	}
-}
-
-char *get_enum__powermanagment_device_name (enum _powermanagment_device value) {
-	switch(value) {
-		default: return("_powermanagment_device_unknown");
-		case powerdevice_none: return("powerdevice_none");
-		case powerdevice_cpuclock: return("powerdevice_cpuclock");
-		case powerdevice_dspclock: return("powerdevice_dspclock");
-		case powerdevice_systemclock: return("powerdevice_systemclock");
-		case powerdevice_wlan: return("powerdevice_wlan");
-		case powerdevice_isdnnt: return("powerdevice_isdnnt");
-		case powerdevice_isdnte: return("powerdevice_isdnte");
-		case powerdevice_analog: return("powerdevice_analog");
-		case powerdevice_dect: return("powerdevice_dect");
-		case powerdevice_ethernet: return("powerdevice_ethernet");
-		case powerdevice_dsl: return("powerdevice_dsl");
-		case powerdevice_usb_host: return("powerdevice_usb_host");
-		case powerdevice_usb_client: return("powerdevice_usb_client");
-		case powerdevice_charge: return("powerdevice_charge");
-		case powerdevice_loadrate: return("powerdevice_loadrate");
-		case powerdevice_temperature: return("powerdevice_temperature");
-		case powerdevice_dectsync: return("powerdevice_dectsync");
-		case powerdevice_usb_host2: return("powerdevice_usb_host2");
-		case powerdevice_usb_host3: return("powerdevice_usb_host3");
-		case powerdevice_dsp_loadrate: return("powerdevice_dsp_loadrate");
-		case powerdevice_vdsp_loadrate: return("powerdevice_vdsp_loadrate");
-		case powerdevice_lte: return("powerdevice_lte");
-		case powerdevice_loadrate2: return("powerdevice_loadrate2");
-		case powerdevice_dvbc: return("powerdevice_dvbc");
-		case powerdevice_maxdevices: return("powerdevice_maxdevices");
-	}
-}
-
-char *get_enum__avm_event_ethernet_speed_name (enum _avm_event_ethernet_speed value) {
+char *get_enum_fax_file_event_type_name (enum fax_file_event_type value) {
 	switch(value) {
-		default: return("_avm_event_ethernet_speed_unknown");
-		case avm_event_ethernet_speed_no_link: return("avm_event_ethernet_speed_no_link");
-		case avm_event_ethernet_speed_10M: return("avm_event_ethernet_speed_10M");
-		case avm_event_ethernet_speed_100M: return("avm_event_ethernet_speed_100M");
-		case avm_event_ethernet_speed_1G: return("avm_event_ethernet_speed_1G");
-		case avm_event_ethernet_speed_error: return("avm_event_ethernet_speed_error");
-		case avm_event_ethernet_speed_items: return("avm_event_ethernet_speed_items");
+		default: return("fax_file_event_type_unknown");
+		case FAX_FILE_EVENT_NEW_FILE: return("FAX_FILE_EVENT_NEW_FILE");
+		case FAX_FILE_EVENT_REMOVED_FILE: return("FAX_FILE_EVENT_REMOVED_FILE");
 	}
 }
 
-char *get_enum__avm_piglettype_name (enum _avm_piglettype value) {
+char *get_enum_avm_event_firmware_type_name (enum avm_event_firmware_type value) {
 	switch(value) {
-		default: return("_avm_piglettype_unknown");
-		case piglet_tdm_down: return("piglet_tdm_down");
-		case piglet_tdm_ready: return("piglet_tdm_ready");
+		default: return("avm_event_firmware_type_unknown");
+		case box_firmware: return("box_firmware");
+		case fritz_fon_firmware: return("fritz_fon_firmware");
+		case fritz_dect_repeater: return("fritz_dect_repeater");
+		case fritz_plug_switch: return("fritz_plug_switch");
+		case fritz_hkr: return("fritz_hkr");
 	}
 }
 
@@ -306,35 +389,11 @@
 	}
 }
 
-char *get_enum_wlan_event_scan_type_name (enum wlan_event_scan_type value) {
-	switch(value) {
-		default: return("wlan_event_scan_type_unknown");
-		case WLAN_EVENT_SCAN_FINISHED: return("WLAN_EVENT_SCAN_FINISHED");
-	}
-}
-
-char *get_enum___avm_event_cmd_name (enum __avm_event_cmd value) {
-	switch(value) {
-		default: return("__avm_event_cmd_unknown");
-		case avm_event_cmd_register: return("avm_event_cmd_register");
-		case avm_event_cmd_release: return("avm_event_cmd_release");
-		case avm_event_cmd_source_register: return("avm_event_cmd_source_register");
-		case avm_event_cmd_source_release: return("avm_event_cmd_source_release");
-		case avm_event_cmd_source_trigger: return("avm_event_cmd_source_trigger");
-		case avm_event_cmd_trigger: return("avm_event_cmd_trigger");
-		case avm_event_cmd_undef: return("avm_event_cmd_undef");
-	}
-}
-
-char *get_enum_wlan_info_special_name (enum wlan_info_special value) {
+char *get_enum_fax_storage_dest_name (enum fax_storage_dest value) {
 	switch(value) {
-		default: return("wlan_info_special_unknown");
-		case STATUS_SUCCESS: return("STATUS_SUCCESS");
-		case STATUS_FAILURE: return("STATUS_FAILURE");
-		case STATUS_TIMEOUT: return("STATUS_TIMEOUT");
-		case STATUS_WPS_START: return("STATUS_WPS_START");
-		case STATUS_WPS_DISCOVERY: return("STATUS_WPS_DISCOVERY");
-		case STATUS_WPS_OVERLAP: return("STATUS_WPS_OVERLAP");
+		default: return("fax_storage_dest_unknown");
+		case FAX_STORAGE_INTERNAL: return("FAX_STORAGE_INTERNAL");
+		case FAX_STORAGE_EXTERNAL: return("FAX_STORAGE_EXTERNAL");
 	}
 }
 
@@ -365,155 +424,96 @@
 	}
 }
 
-char *get_enum_wlan_event_sel_name (enum wlan_event_sel value) {
+char *get_enum__avm_logtype_name (enum _avm_logtype value) {
 	switch(value) {
-		default: return("wlan_event_sel_unknown");
-		case INPUT_AUTH_1_OS_A: return("INPUT_AUTH_1_OS_A");
-		case INPUT_AUTH_1_SK_A: return("INPUT_AUTH_1_SK_A");
-		case INPUT_AUTH_1_D: return("INPUT_AUTH_1_D");
-		case INPUT_AUTH_3_A: return("INPUT_AUTH_3_A");
-		case INPUT_AUTH_3_D: return("INPUT_AUTH_3_D");
-		case INPUT_DE_AUTH_STATION: return("INPUT_DE_AUTH_STATION");
-		case INPUT_ASSOC_REQ_CHECK: return("INPUT_ASSOC_REQ_CHECK");
-		case INPUT_ASSOC_REQ_A: return("INPUT_ASSOC_REQ_A");
-		case INPUT_ASSOC_REQ_D: return("INPUT_ASSOC_REQ_D");
-		case INPUT_ASSOC_REQ_SEC_D: return("INPUT_ASSOC_REQ_SEC_D");
-		case INPUT_RE_ASSOC_REQ_CHECK: return("INPUT_RE_ASSOC_REQ_CHECK");
-		case INPUT_RE_ASSOC_REQ_A: return("INPUT_RE_ASSOC_REQ_A");
-		case INPUT_RE_ASSOC_REQ_D: return("INPUT_RE_ASSOC_REQ_D");
-		case INPUT_RE_ASSOC_REQ_SEC_D: return("INPUT_RE_ASSOC_REQ_SEC_D");
-		case INPUT_DIS_ASSOC_STATION: return("INPUT_DIS_ASSOC_STATION");
-		case INPUT_CLASS_3: return("INPUT_CLASS_3");
-		case INPUT_AUTH_TIMEOUT: return("INPUT_AUTH_TIMEOUT");
-		case INPUT_DE_AUTH_MNG_UNICAST: return("INPUT_DE_AUTH_MNG_UNICAST");
-		case INPUT_DE_AUTH_MNG_BROADCAST: return("INPUT_DE_AUTH_MNG_BROADCAST");
-		case INPUT_DIS_ASSOC_MNG_UNICAST: return("INPUT_DIS_ASSOC_MNG_UNICAST");
-		case INPUT_DIS_ASSOC_MNG_BROADCAST: return("INPUT_DIS_ASSOC_MNG_BROADCAST");
-		case INPUT_MAC_AUTHORIZE: return("INPUT_MAC_AUTHORIZE");
-		case INPUT_MAC_DE_AUTHORIZE: return("INPUT_MAC_DE_AUTHORIZE");
-		case INPUT_WDS_LINK_UP: return("INPUT_WDS_LINK_UP");
-		case INPUT_WDS_LINK_DOWN: return("INPUT_WDS_LINK_DOWN");
-		case INPUT_FRAME_TX_COMPLETE: return("INPUT_FRAME_TX_COMPLETE");
-		case INPUT_MADWIFI_WRONG_PSK: return("INPUT_MADWIFI_WRONG_PSK");
-		case INPUT_WPS: return("INPUT_WPS");
-		case INPUT_MINI: return("INPUT_MINI");
-		case INPUT_RADAR: return("INPUT_RADAR");
-		case INPUT_WPS_ENROLLEE: return("INPUT_WPS_ENROLLEE");
-		case INPUT_STA: return("INPUT_STA");
-		case INPUT_GREENAP_PS: return("INPUT_GREENAP_PS");
-		case INPUT_EAP_AUTHORIZED: return("INPUT_EAP_AUTHORIZED");
-		case INPUT_MWO_INTERFERENCE: return("INPUT_MWO_INTERFERENCE");
-		case INPUT_AUTH_EXPIRED: return("INPUT_AUTH_EXPIRED");
-		case INPUT_COEXIST_SWITCH: return("INPUT_COEXIST_SWITCH");
-		case INPUT_STA_ASSOC: return("INPUT_STA_ASSOC");
-		case INPUT_STA_AUTH: return("INPUT_STA_AUTH");
-		case INPUT_STA_AUTHORIZATION: return("INPUT_STA_AUTHORIZATION");
-		case INPUT_WDS_NO_TIAGGR: return("INPUT_WDS_NO_TIAGGR");
-		case INPUT_MAX_NODE_REACHED: return("INPUT_MAX_NODE_REACHED");
-		case INPUT_RADAR_DFS_WAIT: return("INPUT_RADAR_DFS_WAIT");
-		case INPUT_INTERFERENCE_CHAN_CHANGE: return("INPUT_INTERFERENCE_CHAN_CHANGE");
-		case INPUT_RADAR_END: return("INPUT_RADAR_END");
-		case INPUT_RADAR_DFS_WAIT_PRECAC: return("INPUT_RADAR_DFS_WAIT_PRECAC");
+		default: return("_avm_logtype_unknown");
+		case local_panic: return("local_panic");
+		case local_crash: return("local_crash");
+		case remote_panic: return("remote_panic");
+		case remote_crash: return("remote_crash");
 	}
 }
 
-char *get_enum_avm_event_msg_type_name (enum avm_event_msg_type value) {
+char *get_enum_wlan_info_special_name (enum wlan_info_special value) {
 	switch(value) {
-		default: return("avm_event_msg_type_unknown");
-		case avm_event_source_register_type: return("avm_event_source_register_type");
-		case avm_event_source_unregister_type: return("avm_event_source_unregister_type");
-		case avm_event_source_notifier_type: return("avm_event_source_notifier_type");
-		case avm_event_remote_source_trigger_request_type: return("avm_event_remote_source_trigger_request_type");
-		case avm_event_ping_type: return("avm_event_ping_type");
-		case avm_event_tffs_type: return("avm_event_tffs_type");
+		default: return("wlan_info_special_unknown");
+		case STATUS_SUCCESS: return("STATUS_SUCCESS");
+		case STATUS_FAILURE: return("STATUS_FAILURE");
+		case STATUS_TIMEOUT: return("STATUS_TIMEOUT");
+		case STATUS_WPS_START: return("STATUS_WPS_START");
+		case STATUS_WPS_DISCOVERY: return("STATUS_WPS_DISCOVERY");
+		case STATUS_WPS_OVERLAP: return("STATUS_WPS_OVERLAP");
 	}
 }
 
-char *get_enum_avm_event_tffs_notify_event_name (enum avm_event_tffs_notify_event value) {
+char *get_enum_avm_event_switch_type_name (enum avm_event_switch_type value) {
 	switch(value) {
-		default: return("avm_event_tffs_notify_event_unknown");
-		case avm_event_tffs_notify_clear: return("avm_event_tffs_notify_clear");
-		case avm_event_tffs_notify_update: return("avm_event_tffs_notify_update");
-		case avm_event_tffs_notify_reinit: return("avm_event_tffs_notify_reinit");
+		default: return("avm_event_switch_type_unknown");
+		case binary: return("binary");
+		case percent: return("percent");
 	}
 }
 
-char *get_enum_fax_file_event_type_name (enum fax_file_event_type value) {
+char *get_enum__avm_piglettype_name (enum _avm_piglettype value) {
 	switch(value) {
-		default: return("fax_file_event_type_unknown");
-		case FAX_FILE_EVENT_NEW_FILE: return("FAX_FILE_EVENT_NEW_FILE");
-		case FAX_FILE_EVENT_REMOVED_FILE: return("FAX_FILE_EVENT_REMOVED_FILE");
+		default: return("_avm_piglettype_unknown");
+		case piglet_tdm_down: return("piglet_tdm_down");
+		case piglet_tdm_ready: return("piglet_tdm_ready");
 	}
 }
 
-char *get_enum__cputype_name (enum _cputype value) {
+char *get_enum__avm_rpctype_name (enum _avm_rpctype value) {
 	switch(value) {
-		default: return("_cputype_unknown");
-		case host_cpu: return("host_cpu");
-		case remote_cpu: return("remote_cpu");
+		default: return("_avm_rpctype_unknown");
+		case command_to_arm: return("command_to_arm");
+		case command_to_atom: return("command_to_atom");
+		case reply_to_arm: return("reply_to_arm");
+		case reply_to_atom: return("reply_to_atom");
 	}
 }
 
-char *get_enum__avm_event_push_button_key_name (enum _avm_event_push_button_key value) {
+char *get_enum__powermanagment_status_type_name (enum _powermanagment_status_type value) {
 	switch(value) {
-		default: return("_avm_event_push_button_key_unknown");
-		case avm_event_push_button_wlan_on_off: return("avm_event_push_button_wlan_on_off");
-		case avm_event_push_button_wlan_wps: return("avm_event_push_button_wlan_wps");
-		case avm_event_push_button_wlan_standby: return("avm_event_push_button_wlan_standby");
-		case avm_event_push_button_wlan_wps_station: return("avm_event_push_button_wlan_wps_station");
-		case avm_event_push_button_dect_paging: return("avm_event_push_button_dect_paging");
-		case avm_event_push_button_dect_pairing: return("avm_event_push_button_dect_pairing");
-		case avm_event_push_button_dect_on_off: return("avm_event_push_button_dect_on_off");
-		case avm_event_push_button_dect_standby: return("avm_event_push_button_dect_standby");
-		case avm_event_push_button_power_set_factory: return("avm_event_push_button_power_set_factory");
-		case avm_event_push_button_power_on_off: return("avm_event_push_button_power_on_off");
-		case avm_event_push_button_power_standby: return("avm_event_push_button_power_standby");
-		case avm_event_push_button_power_socket_on_off: return("avm_event_push_button_power_socket_on_off");
-		case avm_event_push_button_tools_profiling: return("avm_event_push_button_tools_profiling");
-		case avm_event_push_button_plc_on_off: return("avm_event_push_button_plc_on_off");
-		case avm_event_push_button_plc_pairing: return("avm_event_push_button_plc_pairing");
-		case avm_event_push_button_led_standby: return("avm_event_push_button_led_standby");
-		case avm_event_push_button_2fa_success: return("avm_event_push_button_2fa_success");
-		case avm_event_push_button_lte_wakeup: return("avm_event_push_button_lte_wakeup");
-		case avm_event_push_button_plc_pairing_off: return("avm_event_push_button_plc_pairing_off");
-		case avm_event_push_button_wlan_wps_off: return("avm_event_push_button_wlan_wps_off");
-		case avm_event_push_button_dect_pairing_off: return("avm_event_push_button_dect_pairing_off");
-		case avm_event_push_button_nexus_pairing_off: return("avm_event_push_button_nexus_pairing_off");
-		case avm_event_push_button_nexus_pairing: return("avm_event_push_button_nexus_pairing");
-		case avm_event_push_button_wlan_wps_station_off: return("avm_event_push_button_wlan_wps_station_off");
-		case avm_event_push_button_nexus_pairing_box: return("avm_event_push_button_nexus_pairing_box");
-		case avm_event_push_button_wlan_sta_wps_no_connect: return("avm_event_push_button_wlan_sta_wps_no_connect");
-		case avm_event_push_button_wlan_sta_wps_no_connect_off: return("avm_event_push_button_wlan_sta_wps_no_connect_off");
-		case avm_event_push_button_connect_methode1: return("avm_event_push_button_connect_methode1");
-		case avm_event_push_button_connect_methode2: return("avm_event_push_button_connect_methode2");
-		case avm_event_push_button_connect_methode3: return("avm_event_push_button_connect_methode3");
-		case avm_event_push_button_connect_methode4: return("avm_event_push_button_connect_methode4");
-		case avm_event_push_button_connect_methode5: return("avm_event_push_button_connect_methode5");
-		case avm_event_push_button_connect_methode6: return("avm_event_push_button_connect_methode6");
-		case avm_event_push_button_connect_off: return("avm_event_push_button_connect_off");
-		case avm_event_push_button_connect_timeout: return("avm_event_push_button_connect_timeout");
-		case avm_event_push_button_connect_error: return("avm_event_push_button_connect_error");
-		case avm_event_push_button_connect_success: return("avm_event_push_button_connect_success");
-		case avm_event_push_button_connect_started: return("avm_event_push_button_connect_started");
-		case avm_event_push_button_lan_pairing: return("avm_event_push_button_lan_pairing");
-		case avm_event_push_button_lan_pairing_off: return("avm_event_push_button_lan_pairing_off");
-		case avm_event_push_button_last: return("avm_event_push_button_last");
+		default: return("_powermanagment_status_type_unknown");
+		case dsl_status: return("dsl_status");
 	}
 }
 
-char *get_enum_fax_storage_dest_name (enum fax_storage_dest value) {
+char *get_enum_wlan_event_id_name (enum wlan_event_id value) {
 	switch(value) {
-		default: return("fax_storage_dest_unknown");
-		case FAX_STORAGE_INTERNAL: return("FAX_STORAGE_INTERNAL");
-		case FAX_STORAGE_EXTERNAL: return("FAX_STORAGE_EXTERNAL");
+		default: return("wlan_event_id_unknown");
+		case CLIENT_STATE_CHANGE: return("CLIENT_STATE_CHANGE");
+		case CLIENT_CONNECT_INFO: return("CLIENT_CONNECT_INFO");
+		case WLAN_EVENT_SCAN: return("WLAN_EVENT_SCAN");
+		case CLIENT_STATE_IDLE: return("CLIENT_STATE_IDLE");
+		case WLAN_RADIO_RECOVERY: return("WLAN_RADIO_RECOVERY");
 	}
 }
 
-char *get_enum_wlan_event_radio_recovery_state_name (enum wlan_event_radio_recovery_state value) {
+char *get_enum_avm_event_tffs_call_type_name (enum avm_event_tffs_call_type value) {
 	switch(value) {
-		default: return("wlan_event_radio_recovery_state_unknown");
-		case WLAN_EVENT_RADIO_RECOVERY_RADIO_DOWN: return("WLAN_EVENT_RADIO_RECOVERY_RADIO_DOWN");
-		case WLAN_EVENT_RADIO_RECOVERY_RADIO_UP: return("WLAN_EVENT_RADIO_RECOVERY_RADIO_UP");
+		default: return("avm_event_tffs_call_type_unknown");
+		case avm_event_tffs_call_open: return("avm_event_tffs_call_open");
+		case avm_event_tffs_call_close: return("avm_event_tffs_call_close");
+		case avm_event_tffs_call_read: return("avm_event_tffs_call_read");
+		case avm_event_tffs_call_write: return("avm_event_tffs_call_write");
+		case avm_event_tffs_call_cleanup: return("avm_event_tffs_call_cleanup");
+		case avm_event_tffs_call_reindex: return("avm_event_tffs_call_reindex");
+		case avm_event_tffs_call_info: return("avm_event_tffs_call_info");
+		case avm_event_tffs_call_init: return("avm_event_tffs_call_init");
+		case avm_event_tffs_call_deinit: return("avm_event_tffs_call_deinit");
+		case avm_event_tffs_call_notify: return("avm_event_tffs_call_notify");
+		case avm_event_tffs_call_paniclog: return("avm_event_tffs_call_paniclog");
+	}
+}
+
+char *get_enum_fax_receive_mode_name (enum fax_receive_mode value) {
+	switch(value) {
+		default: return("fax_receive_mode_unknown");
+		case FAX_RECEIVE_MODE_OFF: return("FAX_RECEIVE_MODE_OFF");
+		case FAX_RECEIVE_MODE_MAIL_ONLY: return("FAX_RECEIVE_MODE_MAIL_ONLY");
+		case FAX_RECEIVE_MODE_STORE_ONLY: return("FAX_RECEIVE_MODE_STORE_ONLY");
+		case FAX_RECEIVE_MODE_MAIL_AND_STORE: return("FAX_RECEIVE_MODE_MAIL_AND_STORE");
 	}
 }
 
diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_endian.h linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_endian.h
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_endian.h	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_endian.h	2019-01-02 12:04:50.000000000 +0100
@@ -4,67 +4,18 @@
 
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cpu_idle'
+ * Endian Convert-Table for: 'struct _avm_event_header'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cpu_idle[] = {
+struct _endian_convert convert_message_struct__avm_event_header[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, event_header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "cpu_idle",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, cpu_idle),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "dsl_dsp_idle",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, dsl_dsp_idle),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "voice_dsp_idle",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, voice_dsp_idle),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "mem_strictlyused",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, mem_strictlyused),
-	},
-	[5] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "mem_cacheused",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, mem_cacheused),
-	},
-	[6] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
-		.flags = 0,
-		.name = "mem_physfree",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, mem_physfree),
-	},
-	[7] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_header",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "cputype",
-		.size = sizeof(enum _cputype),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, cputype),
+		.name = "id",
+		.size = sizeof(enum _avm_event_id),
+		.offset = __builtin_offsetof(struct _avm_event_header, id),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__cputype,
-		.enumName = "enum_table__cputype"
+		.enumInfo = enum_table__avm_event_id,
+		.enumName = "enum_table__avm_event_id"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
@@ -72,406 +23,496 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_unserialised'
+ * Endian Convert-Table for: 'struct _avm_event_telephony_missed_call'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_unserialised[] = {
+struct _endian_convert convert_message_struct__avm_event_telephony_missed_call[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_unserialised",
+		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call",
 		.flags = 0,
-		.name = "evnt_id",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_unserialised, evnt_id),
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call, header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_unserialised",
-		.flags = 0,
-		.name = "data_len",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_unserialised, data_len),
+		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call, length),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_unserialised",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "data",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_unserialised, data),
+		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "p",
+		.substruct = convert_message_struct__avm_event_telephony_missed_call_params,
+		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call, p),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_smarthome'
+ * Endian Convert-Table for: 'struct wlan_event_data_client_connect_info'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_smarthome[] = {
+struct _endian_convert convert_message_struct_wlan_event_data_client_connect_info[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
 		.flags = 0,
-		.name = "header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_smarthome, header),
+		.name = "common",
+		.substruct = convert_message_struct_wlan_event_data_client_common,
+		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, common),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+		.flags = 0,
+		.name = "info_context",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, info_context),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+		.flags = 0,
+		.name = "reason",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, reason),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+		.flags = 0,
+		.name = "max_node_count",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, max_node_count),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "ieee80211_code",
+		.size = sizeof(unsigned short),
+		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, ieee80211_code),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_smarthome'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_smarthome[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_smarthome",
 		.flags = 0,
 		.name = "length",
 		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct _avm_event_smarthome, length),
+		.offset = __builtin_offsetof(struct avm_event_smarthome, length),
 	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome",
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_smarthome",
 		.flags = ENDIAN_CONVERT_ARRAY_USE | 0,
 		.name = "ident",
 		.size = sizeof(char) * 20,
-		.offset = __builtin_offsetof(struct _avm_event_smarthome, ident),
+		.offset = __builtin_offsetof(struct avm_event_smarthome, ident),
 	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome",
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_smarthome",
 		.flags = 0,
 		.name = "type",
 		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct _avm_event_smarthome, type),
+		.offset = __builtin_offsetof(struct avm_event_smarthome, type),
 	},
-	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome",
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_smarthome",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
 		.name = "payload",
-		.offset = __builtin_offsetof(struct _avm_event_smarthome, payload),
+		.offset = __builtin_offsetof(struct avm_event_smarthome, payload),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_checkpoint'
+ * Endian Convert-Table for: 'struct avm_event_powerline_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_checkpoint[] = {
+struct _endian_convert convert_message_struct_avm_event_powerline_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_checkpoint",
-		.flags = 0,
-		.name = "node_id",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_checkpoint, node_id),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_checkpoint",
+		.struct_name =  "convert_message_struct_avm_event_powerline_status",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "checkpoints",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_checkpoint, checkpoints),
+		.name = "status",
+		.size = sizeof(enum ePLCState),
+		.offset = __builtin_offsetof(struct avm_event_powerline_status, status),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_ePLCState,
+		.enumName = "enum_table_ePLCState"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_boykott'
+ * Endian Convert-Table for: 'struct _avm_event_cmd_param_trigger'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_boykott[] = {
+struct _endian_convert convert_message_struct__avm_event_cmd_param_trigger[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_boykott",
+		.struct_name =  "convert_message_struct__avm_event_cmd_param_trigger",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy",
-		.offset = __builtin_offsetof(struct avm_event_boykott, dummy),
+		.name = "id",
+		.size = sizeof(enum _avm_event_id),
+		.offset = __builtin_offsetof(struct _avm_event_cmd_param_trigger, id),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_id,
+		.enumName = "enum_table__avm_event_id"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_smarthome_switch_status'
+ * Endian Convert-Table for: 'struct _avm_event_telephony_missed_call_params'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_smarthome_switch_status[] = {
+struct _endian_convert convert_message_struct__avm_event_telephony_missed_call_params[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
-		.flags = 0,
-		.name = "header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
-		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum avm_event_switch_type),
-		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, type),
+		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call_params",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "id",
+		.size = sizeof(enum avm_event_telephony_param_sel),
+		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call_params, id),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_switch_type,
-		.enumName = "enum_table_avm_event_switch_type"
+		.enumInfo = enum_table_avm_event_telephony_param_sel,
+		.enumName = "enum_table_avm_event_telephony_param_sel"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_telephony_param_sel,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
-		.flags = 0,
-		.name = "value",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, value),
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call_params",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "params",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_telephony_call_params,
+		.substruct = convert_message_union_avm_event_telephony_call_params,
+		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call_params, params),
 	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "ain_length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, ain_length),
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_data'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_data[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_data",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "id",
+		.size = sizeof(enum _avm_event_id),
+		.offset = __builtin_offsetof(struct avm_event_data, id),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_id,
+		.enumName = "enum_table__avm_event_id"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range__avm_event_id,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "ain",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, ain),
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_data",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "data",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_data_union,
+		.substruct = convert_message_union_avm_event_data_union,
+		.offset = __builtin_offsetof(struct avm_event_data, data),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_fax_status'
+ * Endian Convert-Table for: 'struct _avm_event_powermanagment_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_fax_status[] = {
+struct _endian_convert convert_message_struct__avm_event_powermanagment_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_fax_status",
+		.struct_name =  "convert_message_struct__avm_event_powermanagment_status",
 		.flags = 0,
-		.name = "header",
+		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_fax_status, header),
+		.offset = __builtin_offsetof(struct _avm_event_powermanagment_status, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_fax_status",
-		.flags = 0,
-		.name = "fax_receive_mode",
-		.size = sizeof(enum fax_receive_mode),
-		.offset = __builtin_offsetof(struct _avm_event_fax_status, fax_receive_mode),
+		.struct_name =  "convert_message_struct__avm_event_powermanagment_status",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "substatus",
+		.size = sizeof(enum _powermanagment_status_type),
+		.offset = __builtin_offsetof(struct _avm_event_powermanagment_status, substatus),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_fax_receive_mode,
-		.enumName = "enum_table_fax_receive_mode"
+		.enumInfo = enum_table__powermanagment_status_type,
+		.enumName = "enum_table__powermanagment_status_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range__powermanagment_status_type,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_fax_status",
+		.struct_name =  "convert_message_struct__avm_event_powermanagment_status",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "param",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union___powermanagment_status_union,
+		.substruct = convert_message_union___powermanagment_status_union,
+		.offset = __builtin_offsetof(struct _avm_event_powermanagment_status, param),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct wlan_event_data_client_common'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_wlan_event_data_client_common[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_common",
 		.flags = 0,
-		.name = "fax_storage_dest",
-		.size = sizeof(enum fax_storage_dest),
-		.offset = __builtin_offsetof(struct _avm_event_fax_status, fax_storage_dest),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_fax_storage_dest,
-		.enumName = "enum_table_fax_storage_dest"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "mac",
+		.size = sizeof(uint8_t) * 6,
+		.offset = __builtin_offsetof(struct wlan_event_data_client_common, mac),
 	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_fax_status",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "dirname_length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_fax_status, dirname_length),
+	[1] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_common",
+		.flags = 0,
+		.name = "iface",
+		.size = sizeof(char) * IFNAMSIZ + 1,
+		.offset = __builtin_offsetof(struct wlan_event_data_client_common, iface),
 	},
-	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_fax_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dirname",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_fax_status, dirname),
+	[2] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_common",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "initiator",
+		.size = sizeof(char) * 16 + 1,
+		.offset = __builtin_offsetof(struct wlan_event_data_client_common, initiator),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cmd_param_source_trigger'
+ * Endian Convert-Table for: 'struct avm_event_piglet'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cmd_param_source_trigger[] = {
+struct _endian_convert convert_message_struct_avm_event_piglet[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd_param_source_trigger",
-		.flags = 0,
-		.name = "id",
-		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct _avm_event_cmd_param_source_trigger, id),
+		.struct_name =  "convert_message_struct_avm_event_piglet",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "type",
+		.size = sizeof(enum _avm_piglettype),
+		.offset = __builtin_offsetof(struct avm_event_piglet, type),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_id,
-		.enumName = "enum_table__avm_event_id"
+		.enumInfo = enum_table__avm_piglettype,
+		.enumName = "enum_table__avm_piglettype"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd_param_source_trigger",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "data_length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_cmd_param_source_trigger, data_length),
-	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_telefonprofile'
+ * Endian Convert-Table for: 'struct _avm_event_temperature'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_telefonprofile[] = {
+struct _endian_convert convert_message_struct__avm_event_temperature[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_telefonprofile",
+		.struct_name =  "convert_message_struct__avm_event_temperature",
 		.flags = 0,
 		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_telefonprofile, event_header),
+		.offset = __builtin_offsetof(struct _avm_event_temperature, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_telefonprofile",
+		.struct_name =  "convert_message_struct__avm_event_temperature",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "on",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_telefonprofile, on),
+		.name = "temperature",
+		.size = sizeof(int),
+		.offset = __builtin_offsetof(struct _avm_event_temperature, temperature),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_source_unregister'
+ * Endian Convert-Table for: 'struct wlan_event_data_client_state_idle'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_source_unregister[] = {
+struct _endian_convert convert_message_struct_wlan_event_data_client_state_idle[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_source_unregister",
+		.struct_name =  "convert_message_struct_wlan_event_data_client_state_idle",
 		.flags = 0,
-		.name = "id_mask",
-		.substruct = convert_message_struct__avm_event_id_mask,
-		.offset = __builtin_offsetof(struct avm_event_source_unregister, id_mask),
+		.name = "common",
+		.substruct = convert_message_struct_wlan_event_data_client_common,
+		.offset = __builtin_offsetof(struct wlan_event_data_client_state_idle, common),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_source_unregister",
+		.struct_name =  "convert_message_struct_wlan_event_data_client_state_idle",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "name",
-		.size = sizeof(char) * 32,
-		.offset = __builtin_offsetof(struct avm_event_source_unregister, name),
+		.name = "idle",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct wlan_event_data_client_state_idle, idle),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_push_button'
+ * Endian Convert-Table for: 'struct avm_event_firmware_update_available'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_push_button[] = {
+struct _endian_convert convert_message_struct_avm_event_firmware_update_available[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_push_button",
+		.struct_name =  "convert_message_struct_avm_event_firmware_update_available",
 		.flags = 0,
-		.name = "key",
-		.size = sizeof(enum _avm_event_push_button_key),
-		.offset = __builtin_offsetof(struct avm_event_push_button, key),
+		.name = "type",
+		.size = sizeof(enum avm_event_firmware_type),
+		.offset = __builtin_offsetof(struct avm_event_firmware_update_available, type),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_push_button_key,
-		.enumName = "enum_table__avm_event_push_button_key"
+		.enumInfo = enum_table_avm_event_firmware_type,
+		.enumName = "enum_table_avm_event_firmware_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_push_button",
+		.struct_name =  "convert_message_struct_avm_event_firmware_update_available",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "version_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_firmware_update_available, version_length),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_firmware_update_available",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "version",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_firmware_update_available, version),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_id_mask'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_id_mask[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_id_mask",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "pressed",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_push_button, pressed),
+		.name = "mask",
+		.offset = __builtin_offsetof(struct _avm_event_id_mask, mask),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cmd_param_trigger'
+ * Endian Convert-Table for: 'struct avm_event_tffs_reindex'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cmd_param_trigger[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_reindex[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd_param_trigger",
+		.struct_name =  "convert_message_struct_avm_event_tffs_reindex",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "id",
-		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct _avm_event_cmd_param_trigger, id),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_id,
-		.enumName = "enum_table__avm_event_id"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "dummy",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_reindex, dummy),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_notify'
+ * Endian Convert-Table for: 'struct avm_event_checkpoint'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_notify[] = {
+struct _endian_convert convert_message_struct_avm_event_checkpoint[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_notify",
+		.struct_name =  "convert_message_struct_avm_event_checkpoint",
 		.flags = 0,
-		.name = "id",
+		.name = "node_id",
 		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_notify, id),
+		.offset = __builtin_offsetof(struct avm_event_checkpoint, node_id),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_notify",
+		.struct_name =  "convert_message_struct_avm_event_checkpoint",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "event",
-		.size = sizeof(enum avm_event_tffs_notify_event),
-		.offset = __builtin_offsetof(struct avm_event_tffs_notify, event),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_tffs_notify_event,
-		.enumName = "enum_table_avm_event_tffs_notify_event"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "checkpoints",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_checkpoint, checkpoints),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_remotewatchdog'
+ * Endian Convert-Table for: 'struct avm_event_message'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_remotewatchdog[] = {
+struct _endian_convert convert_message_struct_avm_event_message[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
-		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, event_header),
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = ENDIAN_CONVERT_TOTAL_LENGTH | 0,
+		.name = "length",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, length),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
+		.struct_name =  "convert_message_struct_avm_event_message",
 		.flags = 0,
-		.name = "cmd",
-		.size = sizeof(enum _avm_remote_wdt_cmd),
-		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, cmd),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_remote_wdt_cmd,
-		.enumName = "enum_table__avm_remote_wdt_cmd"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "magic",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, magic),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
+		.struct_name =  "convert_message_struct_avm_event_message",
 		.flags = 0,
-		.name = "name",
-		.size = sizeof(char) * 16,
-		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, name),
+		.name = "nonce",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, nonce),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, param),
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = 0,
+		.name = "flags",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, flags),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = 0,
+		.name = "result",
+		.size = sizeof(int32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, result),
+	},
+	[5] = {
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = 0,
+		.name = "transmitter_handle",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, transmitter_handle),
+	},
+	[6] = {
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = 0,
+		.name = "receiver_handle",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_message, receiver_handle),
+	},
+	[7] = {
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "type",
+		.size = sizeof(enum avm_event_msg_type),
+		.offset = __builtin_offsetof(struct avm_event_message, type),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_avm_event_msg_type,
+		.enumName = "enum_table_avm_event_msg_type"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_msg_type,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[8] = {
+		.struct_name =  "convert_message_struct_avm_event_message",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "message",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_message_union,
+		.substruct = convert_message_union_avm_event_message_union,
+		.offset = __builtin_offsetof(struct avm_event_message, message),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_powermanagment_remote'
+ * Endian Convert-Table for: 'struct _avm_event_user_mode_source_notify'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_powermanagment_remote[] = {
+struct _endian_convert convert_message_struct__avm_event_user_mode_source_notify[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "remote_action",
-		.size = sizeof(enum avm_event_powermanagment_remote_action),
-		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote, remote_action),
+		.struct_name =  "convert_message_struct__avm_event_user_mode_source_notify",
+		.flags = 0,
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_user_mode_source_notify, header),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_user_mode_source_notify",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "id",
+		.size = sizeof(enum _avm_event_id),
+		.offset = __builtin_offsetof(struct _avm_event_user_mode_source_notify, id),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_powermanagment_remote_action,
-		.enumName = "enum_table_avm_event_powermanagment_remote_action"
+		.enumInfo = enum_table__avm_event_id,
+		.enumName = "enum_table__avm_event_id"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_powermanagment_remote_action,
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_powermanagment_remote_union,
-		.substruct = convert_message_union_avm_event_powermanagment_remote_union,
-		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote, param),
-	},
 };
 
 /*------------------------------------------------------------------------------------------*\
@@ -508,49 +549,96 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_deinit'
+ * Endian Convert-Table for: 'struct avm_event_user_mode_source_notify'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_deinit[] = {
+struct _endian_convert convert_message_struct_avm_event_user_mode_source_notify[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_deinit",
+		.struct_name =  "convert_message_struct_avm_event_user_mode_source_notify",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_deinit, dummy),
+		.name = "id",
+		.size = sizeof(enum _avm_event_id),
+		.offset = __builtin_offsetof(struct avm_event_user_mode_source_notify, id),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_id,
+		.enumName = "enum_table__avm_event_id"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_wlan_credentials'
+ * Endian Convert-Table for: 'struct avm_event_led_info'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_wlan_credentials[] = {
+struct _endian_convert convert_message_struct_avm_event_led_info[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
+		.struct_name =  "convert_message_struct_avm_event_led_info",
 		.flags = 0,
-		.name = "ssid",
-		.size = sizeof(char) * 33,
-		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, ssid),
+		.name = "mode",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_info, mode),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
+		.struct_name =  "convert_message_struct_avm_event_led_info",
 		.flags = 0,
-		.name = "bssid",
-		.size = sizeof(unsigned char) * 6,
-		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, bssid),
+		.name = "param1",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_info, param1),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
+		.struct_name =  "convert_message_struct_avm_event_led_info",
 		.flags = 0,
-		.name = "key",
-		.size = sizeof(char) * 65,
-		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, key),
+		.name = "param2",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_info, param2),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
+		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.flags = 0,
+		.name = "gpio_driver_type",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_info, gpio_driver_type),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.flags = 0,
+		.name = "gpio",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_info, gpio),
+	},
+	[5] = {
+		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.flags = 0,
+		.name = "pos",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_info, pos),
+	},
+	[6] = {
+		.struct_name =  "convert_message_struct_avm_event_led_info",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "security",
+		.name = "name",
+		.size = sizeof(char) * 32,
+		.offset = __builtin_offsetof(struct avm_event_led_info, name),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_telephony_string'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_telephony_string[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_telephony_string",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "length",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, security),
+		.offset = __builtin_offsetof(struct avm_event_telephony_string, length),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_telephony_string",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "string",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_telephony_string, string),
 	},
 };
 
@@ -596,204 +684,429 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_led_info'
+ * Endian Convert-Table for: 'struct _avm_event_cpu_idle'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_led_info[] = {
+struct _endian_convert convert_message_struct__avm_event_cpu_idle[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "header",
+		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_led_info, header),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "mode",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_info, mode),
+		.name = "cpu_idle",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, cpu_idle),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "param1",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_info, param1),
+		.name = "dsl_dsp_idle",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, dsl_dsp_idle),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "param2",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_info, param2),
+		.name = "voice_dsp_idle",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, voice_dsp_idle),
 	},
 	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "gpio_driver_type",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_info, gpio_driver_type),
+		.name = "mem_strictlyused",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, mem_strictlyused),
 	},
 	[5] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "gpio",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_info, gpio),
+		.name = "mem_cacheused",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, mem_cacheused),
 	},
 	[6] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = 0,
-		.name = "pos",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_info, pos),
+		.name = "mem_physfree",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, mem_physfree),
 	},
 	[7] = {
-		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.struct_name =  "convert_message_struct__avm_event_cpu_idle",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "name",
-		.size = sizeof(char) * 32,
-		.offset = __builtin_offsetof(struct _avm_event_led_info, name),
+		.name = "cputype",
+		.size = sizeof(enum _cputype),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_idle, cputype),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__cputype,
+		.enumName = "enum_table__cputype"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_led_status'
+ * Endian Convert-Table for: 'struct _avm_event_smarthome_switch_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_led_status[] = {
+struct _endian_convert convert_message_struct__avm_event_smarthome_switch_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_led_status",
+		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
 		.flags = 0,
-		.name = "led",
-		.size = sizeof(enum _led_event),
-		.offset = __builtin_offsetof(struct avm_event_led_status, led),
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, header),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
+		.flags = 0,
+		.name = "type",
+		.size = sizeof(enum avm_event_switch_type),
+		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, type),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__led_event,
-		.enumName = "enum_table__led_event"
+		.enumInfo = enum_table_avm_event_switch_type,
+		.enumName = "enum_table_avm_event_switch_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_led_status",
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
 		.flags = 0,
-		.name = "state",
+		.name = "value",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_status, state),
+		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, value),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "ain_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, ain_length),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome_switch_status",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "ain",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_smarthome_switch_status, ain),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_cmd_param_release'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_cmd_param_release[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_cmd_param_release",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "Name",
+		.size = sizeof(char) * MAX_EVENT_CLIENT_NAME_LEN + 1,
+		.offset = __builtin_offsetof(struct _avm_event_cmd_param_release, Name),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_ping'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_ping[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_ping",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "seq",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_ping, seq),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_wlan_credentials'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_wlan_credentials[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
+		.flags = 0,
+		.name = "ssid",
+		.size = sizeof(char) * 33,
+		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, ssid),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
+		.flags = 0,
+		.name = "bssid",
+		.size = sizeof(unsigned char) * 6,
+		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, bssid),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_led_status",
+		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
 		.flags = 0,
-		.name = "param_len",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_status, param_len),
+		.name = "key",
+		.size = sizeof(char) * 65,
+		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, key),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_led_status",
+		.struct_name =  "convert_message_struct_avm_event_wlan_credentials",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "params",
-		.size = sizeof(unsigned char) * 245,
-		.offset = __builtin_offsetof(struct avm_event_led_status, params),
+		.name = "security",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_wlan_credentials, security),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_close'
+ * Endian Convert-Table for: 'struct avm_event_tffs_cleanup'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_close[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_cleanup[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_close",
+		.struct_name =  "convert_message_struct_avm_event_tffs_cleanup",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
 		.name = "dummy",
 		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_close, dummy),
+		.offset = __builtin_offsetof(struct avm_event_tffs_cleanup, dummy),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_telephony_string'
+ * Endian Convert-Table for: 'struct avm_event_remotepcmlink'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_telephony_string[] = {
+struct _endian_convert convert_message_struct_avm_event_remotepcmlink[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_telephony_string",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "length",
+		.struct_name =  "convert_message_struct_avm_event_remotepcmlink",
+		.flags = 0,
+		.name = "type",
+		.size = sizeof(enum _avm_remotepcmlinktype),
+		.offset = __builtin_offsetof(struct avm_event_remotepcmlink, type),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_remotepcmlinktype,
+		.enumName = "enum_table__avm_remotepcmlinktype"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_remotepcmlink",
+		.flags = 0,
+		.name = "sharedlen",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_telephony_string, length),
+		.offset = __builtin_offsetof(struct avm_event_remotepcmlink, sharedlen),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_remotepcmlink",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "sharedpointer",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_remotepcmlink, sharedpointer),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_push_button'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_push_button[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_push_button",
+		.flags = 0,
+		.name = "id",
+		.size = sizeof(enum _avm_event_id),
+		.offset = __builtin_offsetof(struct _avm_event_push_button, id),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_id,
+		.enumName = "enum_table__avm_event_id"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_telephony_string",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "string",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_telephony_string, string),
+		.struct_name =  "convert_message_struct__avm_event_push_button",
+		.flags = 0,
+		.name = "key",
+		.size = sizeof(enum _avm_event_push_button_key),
+		.offset = __builtin_offsetof(struct _avm_event_push_button, key),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_push_button_key,
+		.enumName = "enum_table__avm_event_push_button_key"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_push_button",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "pressed",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct _avm_event_push_button, pressed),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_def'
+ * Endian Convert-Table for: 'struct avm_event_tffs_read'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_def[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_read[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_def",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "event_id",
-		.size = sizeof(enum wlan_event_id),
-		.offset = __builtin_offsetof(struct wlan_event_def, event_id),
+		.struct_name =  "convert_message_struct_avm_event_tffs_read",
+		.flags = 0,
+		.name = "buff_addr",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_read, buff_addr),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_tffs_read",
+		.flags = 0,
+		.name = "len",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_read, len),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_tffs_read",
+		.flags = 0,
+		.name = "id",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_read, id),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_tffs_read",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "crc",
+		.size = sizeof(int32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_read, crc),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct wlan_event_data_scan_event_info'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_wlan_event_data_scan_event_info[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_scan_event_info",
+		.flags = 0,
+		.name = "common",
+		.substruct = convert_message_struct_wlan_event_data_scan_common,
+		.offset = __builtin_offsetof(struct wlan_event_data_scan_event_info, common),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_scan_event_info",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "event_type",
+		.size = sizeof(enum wlan_event_scan_type),
+		.offset = __builtin_offsetof(struct wlan_event_data_scan_event_info, event_type),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_wlan_event_id,
-		.enumName = "enum_table_wlan_event_id"
+		.enumInfo = enum_table_wlan_event_scan_type,
+		.enumName = "enum_table_wlan_event_scan_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_wlan_event_id,
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_mass_storage_unmount'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_mass_storage_unmount[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_mass_storage_unmount",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "name_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_mass_storage_unmount, name_length),
+	},
 	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_def",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "event_data",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_wlan_event_data,
-		.substruct = convert_message_union_wlan_event_data,
-		.offset = __builtin_offsetof(struct wlan_event_def, event_data),
+		.struct_name =  "convert_message_struct_avm_event_mass_storage_unmount",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "name",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_mass_storage_unmount, name),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_smarthome_switch_status'
+ * Endian Convert-Table for: 'struct _avm_event_cmd_param_register'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_smarthome_switch_status[] = {
+struct _endian_convert convert_message_struct__avm_event_cmd_param_register[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
+		.struct_name =  "convert_message_struct__avm_event_cmd_param_register",
 		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum avm_event_switch_type),
-		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, type),
+		.name = "mask",
+		.substruct = convert_message_struct__avm_event_id_mask,
+		.offset = __builtin_offsetof(struct _avm_event_cmd_param_register, mask),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_cmd_param_register",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "Name",
+		.size = sizeof(char) * MAX_EVENT_CLIENT_NAME_LEN + 1,
+		.offset = __builtin_offsetof(struct _avm_event_cmd_param_register, Name),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_cpu_run'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_cpu_run[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_cpu_run",
+		.flags = 0,
+		.name = "event_header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_cpu_run, event_header),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_cpu_run",
+		.flags = 0,
+		.name = "cputype",
+		.size = sizeof(enum _cputype),
+		.offset = __builtin_offsetof(struct _avm_event_cpu_run, cputype),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_switch_type,
-		.enumName = "enum_table_avm_event_switch_type"
+		.enumInfo = enum_table__cputype,
+		.enumName = "enum_table__cputype"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_cpu_run",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "cpu_run",
+		.size = sizeof(unsigned char) * 4,
+		.offset = __builtin_offsetof(struct _avm_event_cpu_run, cpu_run),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_mass_storage_mount'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_mass_storage_mount[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
+		.flags = 0,
+		.name = "size",
+		.size = sizeof(unsigned long long),
+		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, size),
+	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
+		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
 		.flags = 0,
-		.name = "value",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, value),
+		.name = "free",
+		.size = sizeof(unsigned long long),
+		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, free),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
+		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
 		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "ain_length",
+		.name = "name_length",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, ain_length),
+		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, name_length),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
+		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "ain",
+		.name = "name",
 		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, ain),
+		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, name),
 	},
 };
 
@@ -824,6 +1137,444 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_smarthome'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_smarthome[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.flags = 0,
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_smarthome, header),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.flags = 0,
+		.name = "length",
+		.size = sizeof(unsigned short),
+		.offset = __builtin_offsetof(struct _avm_event_smarthome, length),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.flags = ENDIAN_CONVERT_ARRAY_USE | 0,
+		.name = "ident",
+		.size = sizeof(char) * 20,
+		.offset = __builtin_offsetof(struct _avm_event_smarthome, ident),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.flags = 0,
+		.name = "type",
+		.size = sizeof(unsigned short),
+		.offset = __builtin_offsetof(struct _avm_event_smarthome, type),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct__avm_event_smarthome",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "payload",
+		.offset = __builtin_offsetof(struct _avm_event_smarthome, payload),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_pm_info_stat'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_pm_info_stat[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "reserved1",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, reserved1),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_sumact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_sumact),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_sumcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_sumcum),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_systemact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_systemact),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_systemcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_systemcum),
+	},
+	[5] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "system_status",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, system_status),
+	},
+	[6] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_dspact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dspact),
+	},
+	[7] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_dspcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dspcum),
+	},
+	[8] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_wlanact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_wlanact),
+	},
+	[9] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_wlancum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_wlancum),
+	},
+	[10] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "wlan_devices",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, wlan_devices),
+	},
+	[11] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "wlan_status",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, wlan_status),
+	},
+	[12] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_ethact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_ethact),
+	},
+	[13] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_ethcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_ethcum),
+	},
+	[14] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "eth_status",
+		.size = sizeof(unsigned short),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, eth_status),
+	},
+	[15] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_abact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_abact),
+	},
+	[16] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_abcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_abcum),
+	},
+	[17] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "isdn_status",
+		.size = sizeof(unsigned short),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, isdn_status),
+	},
+	[18] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_dectact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dectact),
+	},
+	[19] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_dectcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dectcum),
+	},
+	[20] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_battchargeact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_battchargeact),
+	},
+	[21] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_battchargecum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_battchargecum),
+	},
+	[22] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "dect_status",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, dect_status),
+	},
+	[23] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_usbhostact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_usbhostact),
+	},
+	[24] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_usbhostcum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_usbhostcum),
+	},
+	[25] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "usb_status",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, usb_status),
+	},
+	[26] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "act_temperature",
+		.size = sizeof(signed char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, act_temperature),
+	},
+	[27] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "min_temperature",
+		.size = sizeof(signed char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, min_temperature),
+	},
+	[28] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "max_temperature",
+		.size = sizeof(signed char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, max_temperature),
+	},
+	[29] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "avg_temperature",
+		.size = sizeof(signed char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, avg_temperature),
+	},
+	[30] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_lteact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_lteact),
+	},
+	[31] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_ltecum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_ltecum),
+	},
+	[32] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = 0,
+		.name = "rate_dvbcact",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dvbcact),
+	},
+	[33] = {
+		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "rate_dvbccum",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dvbccum),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_telefonprofile'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_telefonprofile[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_telefonprofile",
+		.flags = 0,
+		.name = "event_header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_telefonprofile, event_header),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_telefonprofile",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "on",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_telefonprofile, on),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_push_button'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_push_button[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_push_button",
+		.flags = 0,
+		.name = "key",
+		.size = sizeof(enum _avm_event_push_button_key),
+		.offset = __builtin_offsetof(struct avm_event_push_button, key),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_push_button_key,
+		.enumName = "enum_table__avm_event_push_button_key"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_push_button",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "pressed",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_push_button, pressed),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct wlan_event_data_scan_common'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_wlan_event_data_scan_common[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_scan_common",
+		.flags = 0,
+		.name = "iface",
+		.size = sizeof(char) * IFNAMSIZ + 1,
+		.offset = __builtin_offsetof(struct wlan_event_data_scan_common, iface),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_scan_common",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "initiator",
+		.size = sizeof(char) * 16 + 1,
+		.offset = __builtin_offsetof(struct wlan_event_data_scan_common, initiator),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_cpu_idle'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_cpu_idle[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = 0,
+		.name = "cpu_idle",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, cpu_idle),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = 0,
+		.name = "dsl_dsp_idle",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, dsl_dsp_idle),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = 0,
+		.name = "voice_dsp_idle",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, voice_dsp_idle),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = 0,
+		.name = "mem_strictlyused",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, mem_strictlyused),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = 0,
+		.name = "mem_cacheused",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, mem_cacheused),
+	},
+	[5] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = 0,
+		.name = "mem_physfree",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, mem_physfree),
+	},
+	[6] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "cputype",
+		.size = sizeof(enum _cputype),
+		.offset = __builtin_offsetof(struct avm_event_cpu_idle, cputype),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__cputype,
+		.enumName = "enum_table__cputype"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct cpmac_event_struct'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_cpmac_event_struct[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_cpmac_event_struct",
+		.flags = 0,
+		.name = "event_header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct cpmac_event_struct, event_header),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_cpmac_event_struct",
+		.flags = 0,
+		.name = "ports",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct cpmac_event_struct, ports),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_cpmac_event_struct",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "port",
+		.substruct = convert_message_struct_cpmac_port,
+		.offset = __builtin_offsetof(struct cpmac_event_struct, port),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
  * Endian Convert-Table for: 'struct _avm_event_pm_info_stat'
 \*------------------------------------------------------------------------------------------*/
 struct _endian_convert convert_message_struct__avm_event_pm_info_stat[] = {
@@ -1075,145 +1826,28 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_data'
+ * Endian Convert-Table for: 'struct _avm_event_cmd_param_source_trigger'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_data[] = {
+struct _endian_convert convert_message_struct__avm_event_cmd_param_source_trigger[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_data",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.struct_name =  "convert_message_struct__avm_event_cmd_param_source_trigger",
+		.flags = 0,
 		.name = "id",
 		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct avm_event_data, id),
+		.offset = __builtin_offsetof(struct _avm_event_cmd_param_source_trigger, id),
 #ifdef WIRESHARK_PLUGIN
 		.enumInfo = enum_table__avm_event_id,
 		.enumName = "enum_table__avm_event_id"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range__avm_event_id,
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_data",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "data",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_data_union,
-		.substruct = convert_message_union_avm_event_data_union,
-		.offset = __builtin_offsetof(struct avm_event_data, data),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_message'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_message[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = ENDIAN_CONVERT_TOTAL_LENGTH | 0,
-		.name = "length",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, length),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = 0,
-		.name = "magic",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, magic),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = 0,
-		.name = "nonce",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, nonce),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = 0,
-		.name = "flags",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, flags),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = 0,
-		.name = "result",
-		.size = sizeof(int32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, result),
-	},
-	[5] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = 0,
-		.name = "transmitter_handle",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, transmitter_handle),
-	},
-	[6] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = 0,
-		.name = "receiver_handle",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_message, receiver_handle),
-	},
-	[7] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "type",
-		.size = sizeof(enum avm_event_msg_type),
-		.offset = __builtin_offsetof(struct avm_event_message, type),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_msg_type,
-		.enumName = "enum_table_avm_event_msg_type"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_msg_type,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[8] = {
-		.struct_name =  "convert_message_struct_avm_event_message",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "message",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_message_union,
-		.substruct = convert_message_union_avm_event_message_union,
-		.offset = __builtin_offsetof(struct avm_event_message, message),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_cleanup'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_cleanup[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_cleanup",
+		.struct_name =  "convert_message_struct__avm_event_cmd_param_source_trigger",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_cleanup, dummy),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_internet_new_ip'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_internet_new_ip[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_internet_new_ip",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "sel",
-		.size = sizeof(enum avm_event_internet_new_ip_param_sel),
-		.offset = __builtin_offsetof(struct avm_event_internet_new_ip, sel),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_internet_new_ip_param_sel,
-		.enumName = "enum_table_avm_event_internet_new_ip_param_sel"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_internet_new_ip_param_sel,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_internet_new_ip",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "params",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_internet_new_ip_param,
-		.substruct = convert_message_union_avm_event_internet_new_ip_param,
-		.offset = __builtin_offsetof(struct avm_event_internet_new_ip, params),
+		.name = "data_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_cmd_param_source_trigger, data_length),
 	},
 };
 
@@ -1250,330 +1884,208 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_led_status'
+ * Endian Convert-Table for: 'struct avm_event_tffs_notify'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_led_status[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_notify[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_led_status",
-		.flags = 0,
-		.name = "header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_led_status, header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_led_status",
-		.flags = 0,
-		.name = "led",
-		.size = sizeof(enum _led_event),
-		.offset = __builtin_offsetof(struct _avm_event_led_status, led),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__led_event,
-		.enumName = "enum_table__led_event"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_led_status",
-		.flags = 0,
-		.name = "state",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_status, state),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_led_status",
+		.struct_name =  "convert_message_struct_avm_event_tffs_notify",
 		.flags = 0,
-		.name = "param_len",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_led_status, param_len),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_led_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "params",
-		.size = sizeof(unsigned char) * 245,
-		.offset = __builtin_offsetof(struct _avm_event_led_status, params),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_info'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_info[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_info",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "fill_level",
+		.name = "id",
 		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_info, fill_level),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_fax_status'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_fax_status[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_fax_status",
-		.flags = 0,
-		.name = "fax_receive_mode",
-		.size = sizeof(enum fax_receive_mode),
-		.offset = __builtin_offsetof(struct avm_event_fax_status, fax_receive_mode),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_fax_receive_mode,
-		.enumName = "enum_table_fax_receive_mode"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.offset = __builtin_offsetof(struct avm_event_tffs_notify, id),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_fax_status",
-		.flags = 0,
-		.name = "fax_storage_dest",
-		.size = sizeof(enum fax_storage_dest),
-		.offset = __builtin_offsetof(struct avm_event_fax_status, fax_storage_dest),
+		.struct_name =  "convert_message_struct_avm_event_tffs_notify",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "event",
+		.size = sizeof(enum avm_event_tffs_notify_event),
+		.offset = __builtin_offsetof(struct avm_event_tffs_notify, event),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_fax_storage_dest,
-		.enumName = "enum_table_fax_storage_dest"
+		.enumInfo = enum_table_avm_event_tffs_notify_event,
+		.enumName = "enum_table_avm_event_tffs_notify_event"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_fax_status",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "dirname_length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_fax_status, dirname_length),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_fax_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dirname",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_fax_status, dirname),
-	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_remotewatchdog'
+ * Endian Convert-Table for: 'struct avm_event_powermanagment_remote_ressourceinfo'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_remotewatchdog[] = {
+struct _endian_convert convert_message_struct_avm_event_powermanagment_remote_ressourceinfo[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_remotewatchdog",
+		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote_ressourceinfo",
 		.flags = 0,
-		.name = "cmd",
-		.size = sizeof(enum _avm_remote_wdt_cmd),
-		.offset = __builtin_offsetof(struct avm_event_remotewatchdog, cmd),
+		.name = "device",
+		.size = sizeof(enum _powermanagment_device),
+		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote_ressourceinfo, device),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_remote_wdt_cmd,
-		.enumName = "enum_table__avm_remote_wdt_cmd"
+		.enumInfo = enum_table__powermanagment_device,
+		.enumName = "enum_table__powermanagment_device"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_remotewatchdog",
-		.flags = 0,
-		.name = "name",
-		.size = sizeof(char) * 16,
-		.offset = __builtin_offsetof(struct avm_event_remotewatchdog, name),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_remotewatchdog",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_remotewatchdog, param),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_telefonprofile'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_telefonprofile[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_telefonprofile",
+		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote_ressourceinfo",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "on",
+		.name = "power_rate",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_telefonprofile, on),
+		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote_ressourceinfo, power_rate),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _cpmac_event_struct'
+ * Endian Convert-Table for: 'struct avm_event_telefon_up'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__cpmac_event_struct[] = {
+struct _endian_convert convert_message_struct_avm_event_telefon_up[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__cpmac_event_struct",
-		.flags = 0,
-		.name = "ports",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _cpmac_event_struct, ports),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__cpmac_event_struct",
+		.struct_name =  "convert_message_struct_avm_event_telefon_up",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "port",
-		.substruct = convert_message_struct_cpmac_port,
-		.offset = __builtin_offsetof(struct _cpmac_event_struct, port),
+		.name = "dummy",
+		.offset = __builtin_offsetof(struct avm_event_telefon_up, dummy),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_fax_file'
+ * Endian Convert-Table for: 'struct avm_event_tffs_init'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_fax_file[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_init[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_fax_file",
+		.struct_name =  "convert_message_struct_avm_event_tffs_init",
 		.flags = 0,
-		.name = "action",
-		.size = sizeof(enum fax_file_event_type),
-		.offset = __builtin_offsetof(struct avm_event_fax_file, action),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_fax_file_event_type,
-		.enumName = "enum_table_fax_file_event_type"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "mem_offset",
+		.size = sizeof(int64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_init, mem_offset),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_fax_file",
+		.struct_name =  "convert_message_struct_avm_event_tffs_init",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "date",
-		.offset = __builtin_offsetof(struct avm_event_fax_file, date),
+		.name = "max_seg_size",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_init, max_seg_size),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_read'
+ * Endian Convert-Table for: 'struct avm_event_wlan'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_read[] = {
+struct _endian_convert convert_message_struct_avm_event_wlan[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_read",
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "buff_addr",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_read, buff_addr),
+		.name = "mac",
+		.size = sizeof(char) * 6,
+		.offset = __builtin_offsetof(struct avm_event_wlan, mac),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_read",
-		.flags = 0,
-		.name = "len",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_read, len),
+		.struct_name =  "convert_message_struct_avm_event_wlan",
+		.flags = ENDIAN_CONVERT_IGNORE | 0,
+		.name = "u1",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_wlan_client_status_u1,
+		.substruct = convert_message_union_avm_event_wlan_client_status_u1,
+		.offset = __builtin_offsetof(struct avm_event_wlan, u1),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_read",
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "id",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_read, id),
+		.name = "event",
+		.size = sizeof(wlan_event),
+		.offset = __builtin_offsetof(struct avm_event_wlan, event),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_read",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "crc",
-		.size = sizeof(int32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_read, crc),
+		.struct_name =  "convert_message_struct_avm_event_wlan",
+		.flags = 0,
+		.name = "info",
+		.size = sizeof(wlan_info),
+		.offset = __builtin_offsetof(struct avm_event_wlan, info),
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_remotepcmlink'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_remotepcmlink[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_remotepcmlink",
+	[4] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum _avm_remotepcmlinktype),
-		.offset = __builtin_offsetof(struct avm_event_remotepcmlink, type),
+		.name = "status",
+		.size = sizeof(enum wlan_sm_states),
+		.offset = __builtin_offsetof(struct avm_event_wlan, status),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_remotepcmlinktype,
-		.enumName = "enum_table__avm_remotepcmlinktype"
+		.enumInfo = enum_table_wlan_sm_states,
+		.enumName = "enum_table_wlan_sm_states"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_remotepcmlink",
-		.flags = 0,
-		.name = "sharedlen",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_remotepcmlink, sharedlen),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_remotepcmlink",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "sharedpointer",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_remotepcmlink, sharedpointer),
+	[5] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
+		.flags = ENDIAN_CONVERT_IGNORE | 0,
+		.name = "u2",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_wlan_client_status_u2,
+		.substruct = convert_message_union_avm_event_wlan_client_status_u2,
+		.offset = __builtin_offsetof(struct avm_event_wlan, u2),
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_client_connect_info'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_client_connect_info[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+	[6] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "common",
-		.substruct = convert_message_struct_wlan_event_data_client_common,
-		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, common),
+		.name = "if_name",
+		.size = sizeof(char) * IFNAMSIZ,
+		.offset = __builtin_offsetof(struct avm_event_wlan, if_name),
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+	[7] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "info_context",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, info_context),
+		.name = "ev_initiator",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_wlan, ev_initiator),
 	},
-	[2] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+	[8] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "reason",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, reason),
+		.name = "ev_reason",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_wlan, ev_reason),
 	},
-	[3] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+	[9] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = 0,
-		.name = "max_node_count",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, max_node_count),
+		.name = "avm_capabilities",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_wlan, avm_capabilities),
 	},
-	[4] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_connect_info",
+	[10] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
+		.flags = ENDIAN_CONVERT_IGNORE | 0,
+		.name = "u3",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_wlan_client_status_u3,
+		.substruct = convert_message_union_avm_event_wlan_client_status_u3,
+		.offset = __builtin_offsetof(struct avm_event_wlan, u3),
+	},
+	[11] = {
+		.struct_name =  "convert_message_struct_avm_event_wlan",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "ieee80211_code",
-		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct wlan_event_data_client_connect_info, ieee80211_code),
+		.name = "credentials",
+		.substruct = convert_message_struct_avm_event_wlan_credentials,
+		.offset = __builtin_offsetof(struct avm_event_wlan, credentials),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_radio_recovery'
+ * Endian Convert-Table for: 'struct _avm_event_powerline_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_radio_recovery[] = {
+struct _endian_convert convert_message_struct__avm_event_powerline_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_radio_recovery",
+		.struct_name =  "convert_message_struct__avm_event_powerline_status",
 		.flags = 0,
-		.name = "radio_id",
-		.size = sizeof(int),
-		.offset = __builtin_offsetof(struct wlan_event_data_radio_recovery, radio_id),
+		.name = "event_header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_powerline_status, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_radio_recovery",
+		.struct_name =  "convert_message_struct__avm_event_powerline_status",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "state",
-		.size = sizeof(enum wlan_event_radio_recovery_state),
-		.offset = __builtin_offsetof(struct wlan_event_data_radio_recovery, state),
+		.name = "status",
+		.size = sizeof(enum ePLCState),
+		.offset = __builtin_offsetof(struct _avm_event_powerline_status, status),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_wlan_event_radio_recovery_state,
-		.enumName = "enum_table_wlan_event_radio_recovery_state"
+		.enumInfo = enum_table_ePLCState,
+		.enumName = "enum_table_ePLCState"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
@@ -1581,229 +2093,177 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_reindex'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_reindex[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_reindex",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_reindex, dummy),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_mass_storage_mount'
+ * Endian Convert-Table for: 'struct _avm_event_led_info'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_mass_storage_mount[] = {
+struct _endian_convert convert_message_struct__avm_event_led_info[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
+		.struct_name =  "convert_message_struct__avm_event_led_info",
 		.flags = 0,
-		.name = "size",
-		.size = sizeof(unsigned long long),
-		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, size),
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_led_info, header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
+		.struct_name =  "convert_message_struct__avm_event_led_info",
 		.flags = 0,
-		.name = "free",
-		.size = sizeof(unsigned long long),
-		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, free),
+		.name = "mode",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_led_info, mode),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "name_length",
+		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.flags = 0,
+		.name = "param1",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, name_length),
+		.offset = __builtin_offsetof(struct _avm_event_led_info, param1),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_mass_storage_mount",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "name",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_mass_storage_mount, name),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_ambient_brightness'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_ambient_brightness[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_ambient_brightness",
+		.struct_name =  "convert_message_struct__avm_event_led_info",
 		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_ambient_brightness, event_header),
+		.name = "param2",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_led_info, param2),
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_ambient_brightness",
+	[4] = {
+		.struct_name =  "convert_message_struct__avm_event_led_info",
 		.flags = 0,
-		.name = "value",
+		.name = "gpio_driver_type",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_ambient_brightness, value),
+		.offset = __builtin_offsetof(struct _avm_event_led_info, gpio_driver_type),
 	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_ambient_brightness",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "maxvalue",
+	[5] = {
+		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.flags = 0,
+		.name = "gpio",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_ambient_brightness, maxvalue),
+		.offset = __builtin_offsetof(struct _avm_event_led_info, gpio),
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_mass_storage_unmount'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_mass_storage_unmount[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_mass_storage_unmount",
+	[6] = {
+		.struct_name =  "convert_message_struct__avm_event_led_info",
 		.flags = 0,
-		.name = "header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_mass_storage_unmount, header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_mass_storage_unmount",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "name_length",
+		.name = "pos",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_mass_storage_unmount, name_length),
+		.offset = __builtin_offsetof(struct _avm_event_led_info, pos),
 	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_mass_storage_unmount",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+	[7] = {
+		.struct_name =  "convert_message_struct__avm_event_led_info",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
 		.name = "name",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_mass_storage_unmount, name),
+		.size = sizeof(char) * 32,
+		.offset = __builtin_offsetof(struct _avm_event_led_info, name),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_piglet'
+ * Endian Convert-Table for: 'struct avm_event_led_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_piglet[] = {
+struct _endian_convert convert_message_struct_avm_event_led_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_piglet",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "type",
-		.size = sizeof(enum _avm_piglettype),
-		.offset = __builtin_offsetof(struct avm_event_piglet, type),
+		.struct_name =  "convert_message_struct_avm_event_led_status",
+		.flags = 0,
+		.name = "led",
+		.size = sizeof(enum _led_event),
+		.offset = __builtin_offsetof(struct avm_event_led_status, led),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_piglettype,
-		.enumName = "enum_table__avm_piglettype"
+		.enumInfo = enum_table__led_event,
+		.enumName = "enum_table__led_event"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_client_state_idle'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_client_state_idle[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_state_idle",
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_led_status",
 		.flags = 0,
-		.name = "common",
-		.substruct = convert_message_struct_wlan_event_data_client_common,
-		.offset = __builtin_offsetof(struct wlan_event_data_client_state_idle, common),
+		.name = "state",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_status, state),
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_state_idle",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "idle",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct wlan_event_data_client_state_idle, idle),
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_led_status",
+		.flags = 0,
+		.name = "param_len",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_led_status, param_len),
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_remote_source_trigger_request'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_remote_source_trigger_request[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_remote_source_trigger_request",
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_led_status",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "data",
-		.substruct = convert_message_struct_avm_event_data,
-		.offset = __builtin_offsetof(struct avm_event_remote_source_trigger_request, data),
+		.name = "params",
+		.size = sizeof(unsigned char) * 245,
+		.offset = __builtin_offsetof(struct avm_event_led_status, params),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_powermanagment_remote'
+ * Endian Convert-Table for: 'struct avm_event_fax_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_powermanagment_remote[] = {
+struct _endian_convert convert_message_struct_avm_event_fax_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_powermanagment_remote",
+		.struct_name =  "convert_message_struct_avm_event_fax_status",
 		.flags = 0,
-		.name = "header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_powermanagment_remote, header),
+		.name = "fax_receive_mode",
+		.size = sizeof(enum fax_receive_mode),
+		.offset = __builtin_offsetof(struct avm_event_fax_status, fax_receive_mode),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_fax_receive_mode,
+		.enumName = "enum_table_fax_receive_mode"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_powermanagment_remote",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "remote_action",
-		.size = sizeof(enum avm_event_powermanagment_remote_action),
-		.offset = __builtin_offsetof(struct _avm_event_powermanagment_remote, remote_action),
+		.struct_name =  "convert_message_struct_avm_event_fax_status",
+		.flags = 0,
+		.name = "fax_storage_dest",
+		.size = sizeof(enum fax_storage_dest),
+		.offset = __builtin_offsetof(struct avm_event_fax_status, fax_storage_dest),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_powermanagment_remote_action,
-		.enumName = "enum_table_avm_event_powermanagment_remote_action"
+		.enumInfo = enum_table_fax_storage_dest,
+		.enumName = "enum_table_fax_storage_dest"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_powermanagment_remote_action,
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_powermanagment_remote",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_powermanagment_remote_union,
-		.substruct = convert_message_union_avm_event_powermanagment_remote_union,
-		.offset = __builtin_offsetof(struct _avm_event_powermanagment_remote, param),
+		.struct_name =  "convert_message_struct_avm_event_fax_status",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "dirname_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_fax_status, dirname_length),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_fax_status",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "dirname",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_fax_status, dirname),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_firmware_update_available'
+ * Endian Convert-Table for: 'struct _avm_event_checkpoint'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_firmware_update_available[] = {
+struct _endian_convert convert_message_struct__avm_event_checkpoint[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
+		.struct_name =  "convert_message_struct__avm_event_checkpoint",
 		.flags = 0,
-		.name = "header",
+		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, header),
+		.offset = __builtin_offsetof(struct _avm_event_checkpoint, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
+		.struct_name =  "convert_message_struct__avm_event_checkpoint",
 		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum avm_event_firmware_type),
-		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, type),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_firmware_type,
-		.enumName = "enum_table_avm_event_firmware_type"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "node_id",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct _avm_event_checkpoint, node_id),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "version_length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, version_length),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "version",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, version),
+		.struct_name =  "convert_message_struct__avm_event_checkpoint",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "checkpoints",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct _avm_event_checkpoint, checkpoints),
 	},
 };
 
@@ -1848,269 +2308,6 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_source_notifier'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_source_notifier[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_source_notifier",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "id",
-		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct avm_event_source_notifier, id),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_id,
-		.enumName = "enum_table__avm_event_id"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_id_mask'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_id_mask[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_id_mask",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "mask",
-		.offset = __builtin_offsetof(struct _avm_event_id_mask, mask),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_powermanagment_status'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_powermanagment_status[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_powermanagment_status",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "substatus",
-		.size = sizeof(enum _powermanagment_status_type),
-		.offset = __builtin_offsetof(struct avm_event_powermanagment_status, substatus),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__powermanagment_status_type,
-		.enumName = "enum_table__powermanagment_status_type"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range__powermanagment_status_type,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_powermanagment_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union___powermanagment_status_union,
-		.substruct = convert_message_union___powermanagment_status_union,
-		.offset = __builtin_offsetof(struct avm_event_powermanagment_status, param),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_rpc'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_rpc[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_rpc",
-		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_rpc, event_header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_rpc",
-		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum _avm_rpctype),
-		.offset = __builtin_offsetof(struct _avm_event_rpc, type),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_rpctype,
-		.enumName = "enum_table__avm_rpctype"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_rpc",
-		.flags = 0,
-		.name = "id",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_rpc, id),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_rpc",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_rpc, length),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_rpc",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "message",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct _avm_event_rpc, message),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_wlan'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_wlan[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "mac",
-		.size = sizeof(char) * 6,
-		.offset = __builtin_offsetof(struct avm_event_wlan, mac),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = ENDIAN_CONVERT_IGNORE | 0,
-		.name = "u1",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_wlan_client_status_u1,
-		.substruct = convert_message_union_avm_event_wlan_client_status_u1,
-		.offset = __builtin_offsetof(struct avm_event_wlan, u1),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "event",
-		.size = sizeof(wlan_event),
-		.offset = __builtin_offsetof(struct avm_event_wlan, event),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "info",
-		.size = sizeof(wlan_info),
-		.offset = __builtin_offsetof(struct avm_event_wlan, info),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "status",
-		.size = sizeof(enum wlan_sm_states),
-		.offset = __builtin_offsetof(struct avm_event_wlan, status),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_wlan_sm_states,
-		.enumName = "enum_table_wlan_sm_states"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[5] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = ENDIAN_CONVERT_IGNORE | 0,
-		.name = "u2",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_wlan_client_status_u2,
-		.substruct = convert_message_union_avm_event_wlan_client_status_u2,
-		.offset = __builtin_offsetof(struct avm_event_wlan, u2),
-	},
-	[6] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "if_name",
-		.size = sizeof(char) * IFNAMSIZ,
-		.offset = __builtin_offsetof(struct avm_event_wlan, if_name),
-	},
-	[7] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "ev_initiator",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_wlan, ev_initiator),
-	},
-	[8] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "ev_reason",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_wlan, ev_reason),
-	},
-	[9] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = 0,
-		.name = "avm_capabilities",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_wlan, avm_capabilities),
-	},
-	[10] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = ENDIAN_CONVERT_IGNORE | 0,
-		.name = "u3",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_wlan_client_status_u3,
-		.substruct = convert_message_union_avm_event_wlan_client_status_u3,
-		.offset = __builtin_offsetof(struct avm_event_wlan, u3),
-	},
-	[11] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "credentials",
-		.substruct = convert_message_struct_avm_event_wlan_credentials,
-		.offset = __builtin_offsetof(struct avm_event_wlan, credentials),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_telephony_missed_call'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_telephony_missed_call[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_telephony_missed_call",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_telephony_missed_call, length),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_telephony_missed_call",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "p",
-		.substruct = convert_message_struct__avm_event_telephony_missed_call_params,
-		.offset = __builtin_offsetof(struct avm_event_telephony_missed_call, p),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_telefon_up'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_telefon_up[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_telefon_up",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy",
-		.offset = __builtin_offsetof(struct avm_event_telefon_up, dummy),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cmd'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cmd[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd",
-		.flags = 0,
-		.name = "cmd",
-		.size = sizeof(enum __avm_event_cmd),
-		.offset = __builtin_offsetof(struct _avm_event_cmd, cmd),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table___avm_event_cmd,
-		.enumName = "enum_table___avm_event_cmd"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union__avm_event_cmd_param,
-		.substruct = convert_message_union__avm_event_cmd_param,
-		.offset = __builtin_offsetof(struct _avm_event_cmd, param),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
  * Endian Convert-Table for: 'struct _avm_event_wlan'
 \*------------------------------------------------------------------------------------------*/
 struct _endian_convert convert_message_struct__avm_event_wlan[] = {
@@ -2208,48 +2405,87 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_powermanagment_remote_ressourceinfo'
+ * Endian Convert-Table for: 'struct avm_event_boykott'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_powermanagment_remote_ressourceinfo[] = {
+struct _endian_convert convert_message_struct_avm_event_boykott[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote_ressourceinfo",
+		.struct_name =  "convert_message_struct_avm_event_boykott",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "dummy",
+		.offset = __builtin_offsetof(struct avm_event_boykott, dummy),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct cpmac_port'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_cpmac_port[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_cpmac_port",
 		.flags = 0,
-		.name = "device",
-		.size = sizeof(enum _powermanagment_device),
-		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote_ressourceinfo, device),
+		.name = "cable",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct cpmac_port, cable),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_cpmac_port",
+		.flags = 0,
+		.name = "link",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct cpmac_port, link),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_cpmac_port",
+		.flags = 0,
+		.name = "speed100",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct cpmac_port, speed100),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_cpmac_port",
+		.flags = 0,
+		.name = "fullduplex",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct cpmac_port, fullduplex),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct_cpmac_port",
+		.flags = 0,
+		.name = "speed",
+		.size = sizeof(enum _avm_event_ethernet_speed),
+		.offset = __builtin_offsetof(struct cpmac_port, speed),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__powermanagment_device,
-		.enumName = "enum_table__powermanagment_device"
+		.enumInfo = enum_table__avm_event_ethernet_speed,
+		.enumName = "enum_table__avm_event_ethernet_speed"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote_ressourceinfo",
+	[5] = {
+		.struct_name =  "convert_message_struct_cpmac_port",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "power_rate",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote_ressourceinfo, power_rate),
+		.name = "maxspeed",
+		.size = sizeof(enum _avm_event_ethernet_speed),
+		.offset = __builtin_offsetof(struct cpmac_port, maxspeed),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_event_ethernet_speed,
+		.enumName = "enum_table__avm_event_ethernet_speed"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_ambient_brightness'
+ * Endian Convert-Table for: 'struct avm_event_tffs_info'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_ambient_brightness[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_info[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_ambient_brightness",
-		.flags = 0,
-		.name = "value",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_ambient_brightness, value),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_ambient_brightness",
+		.struct_name =  "convert_message_struct_avm_event_tffs_info",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "maxvalue",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_ambient_brightness, maxvalue),
+		.name = "fill_level",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_info, fill_level),
 	},
 };
 
@@ -2287,307 +2523,263 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_firmware_update_available'
+ * Endian Convert-Table for: 'struct avm_event_remote_source_trigger_request'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_firmware_update_available[] = {
+struct _endian_convert convert_message_struct_avm_event_remote_source_trigger_request[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_firmware_update_available",
-		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum avm_event_firmware_type),
-		.offset = __builtin_offsetof(struct avm_event_firmware_update_available, type),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_firmware_type,
-		.enumName = "enum_table_avm_event_firmware_type"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_firmware_update_available",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "version_length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_firmware_update_available, version_length),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_firmware_update_available",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "version",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_firmware_update_available, version),
+		.struct_name =  "convert_message_struct_avm_event_remote_source_trigger_request",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "data",
+		.substruct = convert_message_struct_avm_event_data,
+		.offset = __builtin_offsetof(struct avm_event_remote_source_trigger_request, data),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_push_button'
+ * Endian Convert-Table for: 'struct _cpmac_event_struct'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_push_button[] = {
+struct _endian_convert convert_message_struct__cpmac_event_struct[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_push_button",
+		.struct_name =  "convert_message_struct__cpmac_event_struct",
 		.flags = 0,
-		.name = "id",
-		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct _avm_event_push_button, id),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_id,
-		.enumName = "enum_table__avm_event_id"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "ports",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _cpmac_event_struct, ports),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_push_button",
-		.flags = 0,
-		.name = "key",
-		.size = sizeof(enum _avm_event_push_button_key),
-		.offset = __builtin_offsetof(struct _avm_event_push_button, key),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_push_button_key,
-		.enumName = "enum_table__avm_event_push_button_key"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_push_button",
+		.struct_name =  "convert_message_struct__cpmac_event_struct",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "pressed",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct _avm_event_push_button, pressed),
+		.name = "port",
+		.substruct = convert_message_struct_cpmac_port,
+		.offset = __builtin_offsetof(struct _cpmac_event_struct, port),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct cpmac_port'
+ * Endian Convert-Table for: 'struct avm_event_powermanagment_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_cpmac_port[] = {
+struct _endian_convert convert_message_struct_avm_event_powermanagment_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_cpmac_port",
-		.flags = 0,
-		.name = "cable",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct cpmac_port, cable),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_cpmac_port",
-		.flags = 0,
-		.name = "link",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct cpmac_port, link),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_cpmac_port",
-		.flags = 0,
-		.name = "speed100",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct cpmac_port, speed100),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_cpmac_port",
-		.flags = 0,
-		.name = "fullduplex",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct cpmac_port, fullduplex),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct_cpmac_port",
-		.flags = 0,
-		.name = "speed",
-		.size = sizeof(enum _avm_event_ethernet_speed),
-		.offset = __builtin_offsetof(struct cpmac_port, speed),
+		.struct_name =  "convert_message_struct_avm_event_powermanagment_status",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "substatus",
+		.size = sizeof(enum _powermanagment_status_type),
+		.offset = __builtin_offsetof(struct avm_event_powermanagment_status, substatus),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_ethernet_speed,
-		.enumName = "enum_table__avm_event_ethernet_speed"
+		.enumInfo = enum_table__powermanagment_status_type,
+		.enumName = "enum_table__powermanagment_status_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range__powermanagment_status_type,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-	[5] = {
-		.struct_name =  "convert_message_struct_cpmac_port",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "maxspeed",
-		.size = sizeof(enum _avm_event_ethernet_speed),
-		.offset = __builtin_offsetof(struct cpmac_port, maxspeed),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_ethernet_speed,
-		.enumName = "enum_table__avm_event_ethernet_speed"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_powermanagment_status",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "param",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union___powermanagment_status_union,
+		.substruct = convert_message_union___powermanagment_status_union,
+		.offset = __builtin_offsetof(struct avm_event_powermanagment_status, param),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_scan_event_info'
+ * Endian Convert-Table for: 'struct _avm_event_powermanagment_remote'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_scan_event_info[] = {
+struct _endian_convert convert_message_struct__avm_event_powermanagment_remote[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_scan_event_info",
+		.struct_name =  "convert_message_struct__avm_event_powermanagment_remote",
 		.flags = 0,
-		.name = "common",
-		.substruct = convert_message_struct_wlan_event_data_scan_common,
-		.offset = __builtin_offsetof(struct wlan_event_data_scan_event_info, common),
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_powermanagment_remote, header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_scan_event_info",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "event_type",
-		.size = sizeof(enum wlan_event_scan_type),
-		.offset = __builtin_offsetof(struct wlan_event_data_scan_event_info, event_type),
+		.struct_name =  "convert_message_struct__avm_event_powermanagment_remote",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "remote_action",
+		.size = sizeof(enum avm_event_powermanagment_remote_action),
+		.offset = __builtin_offsetof(struct _avm_event_powermanagment_remote, remote_action),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_wlan_event_scan_type,
-		.enumName = "enum_table_wlan_event_scan_type"
+		.enumInfo = enum_table_avm_event_powermanagment_remote_action,
+		.enumName = "enum_table_avm_event_powermanagment_remote_action"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_powermanagment_remote_action,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_powermanagment_remote",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "param",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_powermanagment_remote_union,
+		.substruct = convert_message_union_avm_event_powermanagment_remote_union,
+		.offset = __builtin_offsetof(struct _avm_event_powermanagment_remote, param),
+	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_telephony_missed_call'
+ * Endian Convert-Table for: 'struct _avm_event_ambient_brightness'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_telephony_missed_call[] = {
+struct _endian_convert convert_message_struct__avm_event_ambient_brightness[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call",
+		.struct_name =  "convert_message_struct__avm_event_ambient_brightness",
 		.flags = 0,
-		.name = "header",
+		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call, header),
+		.offset = __builtin_offsetof(struct _avm_event_ambient_brightness, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "length",
+		.struct_name =  "convert_message_struct__avm_event_ambient_brightness",
+		.flags = 0,
+		.name = "value",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call, length),
+		.offset = __builtin_offsetof(struct _avm_event_ambient_brightness, value),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "p",
-		.substruct = convert_message_struct__avm_event_telephony_missed_call_params,
-		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call, p),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cmd_param_release'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cmd_param_release[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd_param_release",
+		.struct_name =  "convert_message_struct__avm_event_ambient_brightness",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "Name",
-		.size = sizeof(char) * MAX_EVENT_CLIENT_NAME_LEN + 1,
-		.offset = __builtin_offsetof(struct _avm_event_cmd_param_release, Name),
+		.name = "maxvalue",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_ambient_brightness, maxvalue),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_source_register'
+ * Endian Convert-Table for: 'struct avm_event_telephony_missed_call'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_source_register[] = {
+struct _endian_convert convert_message_struct_avm_event_telephony_missed_call[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_source_register",
-		.flags = 0,
-		.name = "id_mask",
-		.substruct = convert_message_struct__avm_event_id_mask,
-		.offset = __builtin_offsetof(struct avm_event_source_register, id_mask),
+		.struct_name =  "convert_message_struct_avm_event_telephony_missed_call",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_telephony_missed_call, length),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_source_register",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "name",
-		.size = sizeof(char) * 32,
-		.offset = __builtin_offsetof(struct avm_event_source_register, name),
+		.struct_name =  "convert_message_struct_avm_event_telephony_missed_call",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "p",
+		.substruct = convert_message_struct__avm_event_telephony_missed_call_params,
+		.offset = __builtin_offsetof(struct avm_event_telephony_missed_call, p),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cpu_run'
+ * Endian Convert-Table for: 'struct avm_event_rpc'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cpu_run[] = {
+struct _endian_convert convert_message_struct_avm_event_rpc[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_run",
-		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_cpu_run, event_header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_run",
+		.struct_name =  "convert_message_struct_avm_event_rpc",
 		.flags = 0,
-		.name = "cputype",
-		.size = sizeof(enum _cputype),
-		.offset = __builtin_offsetof(struct _avm_event_cpu_run, cputype),
+		.name = "type",
+		.size = sizeof(enum _avm_rpctype),
+		.offset = __builtin_offsetof(struct avm_event_rpc, type),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__cputype,
-		.enumName = "enum_table__cputype"
+		.enumInfo = enum_table__avm_rpctype,
+		.enumName = "enum_table__avm_rpctype"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_rpc",
+		.flags = 0,
+		.name = "id",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_rpc, id),
+	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_cpu_run",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "cpu_run",
-		.size = sizeof(unsigned char) * 4,
-		.offset = __builtin_offsetof(struct _avm_event_cpu_run, cpu_run),
+		.struct_name =  "convert_message_struct_avm_event_rpc",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_rpc, length),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_rpc",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "message",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_rpc, message),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_log'
+ * Endian Convert-Table for: 'struct _avm_event_fax_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_log[] = {
+struct _endian_convert convert_message_struct__avm_event_fax_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_log",
+		.struct_name =  "convert_message_struct__avm_event_fax_status",
 		.flags = 0,
-		.name = "event_header",
+		.name = "header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_log, event_header),
+		.offset = __builtin_offsetof(struct _avm_event_fax_status, header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_log",
+		.struct_name =  "convert_message_struct__avm_event_fax_status",
 		.flags = 0,
-		.name = "logtype",
-		.size = sizeof(enum _avm_logtype),
-		.offset = __builtin_offsetof(struct _avm_event_log, logtype),
+		.name = "fax_receive_mode",
+		.size = sizeof(enum fax_receive_mode),
+		.offset = __builtin_offsetof(struct _avm_event_fax_status, fax_receive_mode),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_logtype,
-		.enumName = "enum_table__avm_logtype"
+		.enumInfo = enum_table_fax_receive_mode,
+		.enumName = "enum_table_fax_receive_mode"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_log",
+		.struct_name =  "convert_message_struct__avm_event_fax_status",
 		.flags = 0,
-		.name = "loglen",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_log, loglen),
+		.name = "fax_storage_dest",
+		.size = sizeof(enum fax_storage_dest),
+		.offset = __builtin_offsetof(struct _avm_event_fax_status, fax_storage_dest),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_fax_storage_dest,
+		.enumName = "enum_table_fax_storage_dest"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct__avm_event_log",
-		.flags = 0,
-		.name = "logpointer",
+		.struct_name =  "convert_message_struct__avm_event_fax_status",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "dirname_length",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_log, logpointer),
+		.offset = __builtin_offsetof(struct _avm_event_fax_status, dirname_length),
 	},
 	[4] = {
-		.struct_name =  "convert_message_struct__avm_event_log",
+		.struct_name =  "convert_message_struct__avm_event_fax_status",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "dirname",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_fax_status, dirname),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_mass_storage_unmount'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_mass_storage_unmount[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_mass_storage_unmount",
 		.flags = 0,
-		.name = "checksum",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_log, checksum),
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_mass_storage_unmount, header),
 	},
-	[5] = {
-		.struct_name =  "convert_message_struct__avm_event_log",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "rebootflag",
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_mass_storage_unmount",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "name_length",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct _avm_event_log, rebootflag),
+		.offset = __builtin_offsetof(struct _avm_event_mass_storage_unmount, name_length),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_mass_storage_unmount",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "name",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_mass_storage_unmount, name),
 	},
 };
 
@@ -2626,68 +2818,169 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_header'
+ * Endian Convert-Table for: 'struct avm_event_temperature'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_header[] = {
+struct _endian_convert convert_message_struct_avm_event_temperature[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_header",
+		.struct_name =  "convert_message_struct_avm_event_temperature",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "id",
-		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct _avm_event_header, id),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_id,
-		.enumName = "enum_table__avm_event_id"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "temperature",
+		.size = sizeof(int),
+		.offset = __builtin_offsetof(struct avm_event_temperature, temperature),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_scan_common'
+ * Endian Convert-Table for: 'struct avm_event_tffs_paniclog'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_scan_common[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_paniclog[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_scan_common",
+		.struct_name =  "convert_message_struct_avm_event_tffs_paniclog",
 		.flags = 0,
-		.name = "iface",
-		.size = sizeof(char) * IFNAMSIZ + 1,
-		.offset = __builtin_offsetof(struct wlan_event_data_scan_common, iface),
+		.name = "buff_addr",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_paniclog, buff_addr),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_scan_common",
+		.struct_name =  "convert_message_struct_avm_event_tffs_paniclog",
+		.flags = 0,
+		.name = "len",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_paniclog, len),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_tffs_paniclog",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "initiator",
-		.size = sizeof(char) * 16 + 1,
-		.offset = __builtin_offsetof(struct wlan_event_data_scan_common, initiator),
+		.name = "crc",
+		.size = sizeof(int32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_paniclog, crc),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_checkpoint'
+ * Endian Convert-Table for: 'struct avm_event_source_register'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_checkpoint[] = {
+struct _endian_convert convert_message_struct_avm_event_source_register[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_checkpoint",
+		.struct_name =  "convert_message_struct_avm_event_source_register",
+		.flags = 0,
+		.name = "id_mask",
+		.substruct = convert_message_struct__avm_event_id_mask,
+		.offset = __builtin_offsetof(struct avm_event_source_register, id_mask),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_source_register",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "name",
+		.size = sizeof(char) * 32,
+		.offset = __builtin_offsetof(struct avm_event_source_register, name),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct _avm_event_rpc'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct__avm_event_rpc[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct__avm_event_rpc",
 		.flags = 0,
 		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_checkpoint, event_header),
+		.offset = __builtin_offsetof(struct _avm_event_rpc, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_checkpoint",
+		.struct_name =  "convert_message_struct__avm_event_rpc",
 		.flags = 0,
-		.name = "node_id",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct _avm_event_checkpoint, node_id),
+		.name = "type",
+		.size = sizeof(enum _avm_rpctype),
+		.offset = __builtin_offsetof(struct _avm_event_rpc, type),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_rpctype,
+		.enumName = "enum_table__avm_rpctype"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_checkpoint",
+		.struct_name =  "convert_message_struct__avm_event_rpc",
+		.flags = 0,
+		.name = "id",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_rpc, id),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct__avm_event_rpc",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_rpc, length),
+	},
+	[4] = {
+		.struct_name =  "convert_message_struct__avm_event_rpc",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "message",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_rpc, message),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_internet_new_ip'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_internet_new_ip[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_internet_new_ip",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "sel",
+		.size = sizeof(enum avm_event_internet_new_ip_param_sel),
+		.offset = __builtin_offsetof(struct avm_event_internet_new_ip, sel),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_avm_event_internet_new_ip_param_sel,
+		.enumName = "enum_table_avm_event_internet_new_ip_param_sel"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_internet_new_ip_param_sel,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_internet_new_ip",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "params",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_internet_new_ip_param,
+		.substruct = convert_message_union_avm_event_internet_new_ip_param,
+		.offset = __builtin_offsetof(struct avm_event_internet_new_ip, params),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_remotewatchdog'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_remotewatchdog[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_remotewatchdog",
+		.flags = 0,
+		.name = "cmd",
+		.size = sizeof(enum _avm_remote_wdt_cmd),
+		.offset = __builtin_offsetof(struct avm_event_remotewatchdog, cmd),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_remote_wdt_cmd,
+		.enumName = "enum_table__avm_remote_wdt_cmd"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_remotewatchdog",
+		.flags = 0,
+		.name = "name",
+		.size = sizeof(char) * 16,
+		.offset = __builtin_offsetof(struct avm_event_remotewatchdog, name),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_remotewatchdog",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "checkpoints",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct _avm_event_checkpoint, checkpoints),
+		.name = "param",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_remotewatchdog, param),
 	},
 };
 
@@ -2768,129 +3061,141 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_ping'
+ * Endian Convert-Table for: 'struct avm_event_ambient_brightness'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_ping[] = {
+struct _endian_convert convert_message_struct_avm_event_ambient_brightness[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_ping",
+		.struct_name =  "convert_message_struct_avm_event_ambient_brightness",
+		.flags = 0,
+		.name = "value",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_ambient_brightness, value),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_ambient_brightness",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "seq",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_ping, seq),
+		.name = "maxvalue",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_ambient_brightness, maxvalue),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_powerline_status'
+ * Endian Convert-Table for: 'struct avm_event_fax_file'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_powerline_status[] = {
+struct _endian_convert convert_message_struct_avm_event_fax_file[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_powerline_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "status",
-		.size = sizeof(enum ePLCState),
-		.offset = __builtin_offsetof(struct avm_event_powerline_status, status),
+		.struct_name =  "convert_message_struct_avm_event_fax_file",
+		.flags = 0,
+		.name = "action",
+		.size = sizeof(enum fax_file_event_type),
+		.offset = __builtin_offsetof(struct avm_event_fax_file, action),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_ePLCState,
-		.enumName = "enum_table_ePLCState"
+		.enumInfo = enum_table_fax_file_event_type,
+		.enumName = "enum_table_fax_file_event_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
+	[1] = {
+		.struct_name =  "convert_message_struct_avm_event_fax_file",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "date",
+		.offset = __builtin_offsetof(struct avm_event_fax_file, date),
+	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_rpc'
+ * Endian Convert-Table for: 'struct wlan_event_def'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_rpc[] = {
+struct _endian_convert convert_message_struct_wlan_event_def[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_rpc",
-		.flags = 0,
-		.name = "type",
-		.size = sizeof(enum _avm_rpctype),
-		.offset = __builtin_offsetof(struct avm_event_rpc, type),
+		.struct_name =  "convert_message_struct_wlan_event_def",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "event_id",
+		.size = sizeof(enum wlan_event_id),
+		.offset = __builtin_offsetof(struct wlan_event_def, event_id),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_rpctype,
-		.enumName = "enum_table__avm_rpctype"
+		.enumInfo = enum_table_wlan_event_id,
+		.enumName = "enum_table_wlan_event_id"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_wlan_event_id,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_rpc",
-		.flags = 0,
-		.name = "id",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_rpc, id),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_rpc",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "length",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_rpc, length),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_rpc",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "message",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_rpc, message),
+		.struct_name =  "convert_message_struct_wlan_event_def",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "event_data",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_wlan_event_data,
+		.substruct = convert_message_union_wlan_event_data,
+		.offset = __builtin_offsetof(struct wlan_event_def, event_data),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_cpu_idle'
+ * Endian Convert-Table for: 'struct _avm_event_log'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_cpu_idle[] = {
+struct _endian_convert convert_message_struct__avm_event_log[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_log",
 		.flags = 0,
-		.name = "cpu_idle",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, cpu_idle),
+		.name = "event_header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_log, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_log",
 		.flags = 0,
-		.name = "dsl_dsp_idle",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, dsl_dsp_idle),
+		.name = "logtype",
+		.size = sizeof(enum _avm_logtype),
+		.offset = __builtin_offsetof(struct _avm_event_log, logtype),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_logtype,
+		.enumName = "enum_table__avm_logtype"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_log",
 		.flags = 0,
-		.name = "voice_dsp_idle",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, voice_dsp_idle),
+		.name = "loglen",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_log, loglen),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_log",
 		.flags = 0,
-		.name = "mem_strictlyused",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, mem_strictlyused),
+		.name = "logpointer",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_log, logpointer),
 	},
 	[4] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_log",
 		.flags = 0,
-		.name = "mem_cacheused",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, mem_cacheused),
+		.name = "checksum",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_log, checksum),
 	},
 	[5] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
-		.flags = 0,
-		.name = "mem_physfree",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, mem_physfree),
-	},
-	[6] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_idle",
+		.struct_name =  "convert_message_struct__avm_event_log",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "rebootflag",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_log, rebootflag),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct avm_event_cpu_run'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_avm_event_cpu_run[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_avm_event_cpu_run",
+		.flags = 0,
 		.name = "cputype",
 		.size = sizeof(enum _cputype),
-		.offset = __builtin_offsetof(struct avm_event_cpu_idle, cputype),
+		.offset = __builtin_offsetof(struct avm_event_cpu_run, cputype),
 #ifdef WIRESHARK_PLUGIN
 		.enumInfo = enum_table__cputype,
 		.enumName = "enum_table__cputype"
@@ -2898,299 +3203,62 @@
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_client_common'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_client_common[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_common",
-		.flags = 0,
-		.name = "mac",
-		.size = sizeof(uint8_t) * 6,
-		.offset = __builtin_offsetof(struct wlan_event_data_client_common, mac),
-	},
 	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_common",
-		.flags = 0,
-		.name = "iface",
-		.size = sizeof(char) * IFNAMSIZ + 1,
-		.offset = __builtin_offsetof(struct wlan_event_data_client_common, iface),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_common",
+		.struct_name =  "convert_message_struct_avm_event_cpu_run",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "initiator",
-		.size = sizeof(char) * 16 + 1,
-		.offset = __builtin_offsetof(struct wlan_event_data_client_common, initiator),
+		.name = "cpu_run",
+		.size = sizeof(unsigned char) * 4,
+		.offset = __builtin_offsetof(struct avm_event_cpu_run, cpu_run),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_pm_info_stat'
+ * Endian Convert-Table for: 'struct avm_event_powermanagment_remote'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_pm_info_stat[] = {
+struct _endian_convert convert_message_struct_avm_event_powermanagment_remote[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "reserved1",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, reserved1),
+		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote",
+		.flags = ENDIAN_CONVERT_SELECT | 0,
+		.name = "remote_action",
+		.size = sizeof(enum avm_event_powermanagment_remote_action),
+		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote, remote_action),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_avm_event_powermanagment_remote_action,
+		.enumName = "enum_table_avm_event_powermanagment_remote_action"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_powermanagment_remote_action,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_sumact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_sumact),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_sumcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_sumcum),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_systemact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_systemact),
-	},
-	[4] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_systemcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_systemcum),
-	},
-	[5] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "system_status",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, system_status),
-	},
-	[6] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_dspact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dspact),
-	},
-	[7] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_dspcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dspcum),
-	},
-	[8] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_wlanact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_wlanact),
-	},
-	[9] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_wlancum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_wlancum),
-	},
-	[10] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "wlan_devices",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, wlan_devices),
-	},
-	[11] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "wlan_status",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, wlan_status),
-	},
-	[12] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_ethact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_ethact),
-	},
-	[13] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_ethcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_ethcum),
-	},
-	[14] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "eth_status",
-		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, eth_status),
-	},
-	[15] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_abact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_abact),
-	},
-	[16] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_abcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_abcum),
-	},
-	[17] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "isdn_status",
-		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, isdn_status),
-	},
-	[18] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_dectact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dectact),
-	},
-	[19] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_dectcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dectcum),
-	},
-	[20] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_battchargeact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_battchargeact),
-	},
-	[21] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_battchargecum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_battchargecum),
-	},
-	[22] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "dect_status",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, dect_status),
-	},
-	[23] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_usbhostact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_usbhostact),
-	},
-	[24] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_usbhostcum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_usbhostcum),
-	},
-	[25] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "usb_status",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, usb_status),
-	},
-	[26] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "act_temperature",
-		.size = sizeof(signed char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, act_temperature),
-	},
-	[27] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "min_temperature",
-		.size = sizeof(signed char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, min_temperature),
-	},
-	[28] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "max_temperature",
-		.size = sizeof(signed char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, max_temperature),
-	},
-	[29] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "avg_temperature",
-		.size = sizeof(signed char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, avg_temperature),
-	},
-	[30] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_lteact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_lteact),
-	},
-	[31] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_ltecum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_ltecum),
-	},
-	[32] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = 0,
-		.name = "rate_dvbcact",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dvbcact),
-	},
-	[33] = {
-		.struct_name =  "convert_message_struct_avm_event_pm_info_stat",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "rate_dvbccum",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_pm_info_stat, rate_dvbccum),
+		.struct_name =  "convert_message_struct_avm_event_powermanagment_remote",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "param",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_powermanagment_remote_union,
+		.substruct = convert_message_union_avm_event_powermanagment_remote_union,
+		.offset = __builtin_offsetof(struct avm_event_powermanagment_remote, param),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_powerline_status'
+ * Endian Convert-Table for: 'struct wlan_event_data_radio_recovery'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_powerline_status[] = {
+struct _endian_convert convert_message_struct_wlan_event_data_radio_recovery[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_powerline_status",
+		.struct_name =  "convert_message_struct_wlan_event_data_radio_recovery",
 		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_powerline_status, event_header),
+		.name = "radio_id",
+		.size = sizeof(int),
+		.offset = __builtin_offsetof(struct wlan_event_data_radio_recovery, radio_id),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_powerline_status",
+		.struct_name =  "convert_message_struct_wlan_event_data_radio_recovery",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "status",
-		.size = sizeof(enum ePLCState),
-		.offset = __builtin_offsetof(struct _avm_event_powerline_status, status),
+		.name = "state",
+		.size = sizeof(enum wlan_event_radio_recovery_state),
+		.offset = __builtin_offsetof(struct wlan_event_data_radio_recovery, state),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_ePLCState,
-		.enumName = "enum_table_ePLCState"
+		.enumInfo = enum_table_wlan_event_radio_recovery_state,
+		.enumName = "enum_table_wlan_event_radio_recovery_state"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
@@ -3198,74 +3266,42 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct wlan_event_data_client_state_change'
+ * Endian Convert-Table for: 'struct _avm_event_cmd'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_wlan_event_data_client_state_change[] = {
+struct _endian_convert convert_message_struct__avm_event_cmd[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_state_change",
+		.struct_name =  "convert_message_struct__avm_event_cmd",
 		.flags = 0,
-		.name = "common",
-		.substruct = convert_message_struct_wlan_event_data_client_common,
-		.offset = __builtin_offsetof(struct wlan_event_data_client_state_change, common),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_wlan_event_data_client_state_change",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "state",
-		.size = sizeof(uint8_t),
-		.offset = __builtin_offsetof(struct wlan_event_data_client_state_change, state),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_temperature'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_temperature[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_temperature",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "temperature",
-		.size = sizeof(int),
-		.offset = __builtin_offsetof(struct avm_event_temperature, temperature),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_user_mode_source_notify'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_user_mode_source_notify[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_user_mode_source_notify",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "id",
-		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct avm_event_user_mode_source_notify, id),
+		.name = "cmd",
+		.size = sizeof(enum __avm_event_cmd),
+		.offset = __builtin_offsetof(struct _avm_event_cmd, cmd),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__avm_event_id,
-		.enumName = "enum_table__avm_event_id"
+		.enumInfo = enum_table___avm_event_cmd,
+		.enumName = "enum_table___avm_event_cmd"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
 		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
+	[1] = {
+		.struct_name =  "convert_message_struct__avm_event_cmd",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "param",
+		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union__avm_event_cmd_param,
+		.substruct = convert_message_union__avm_event_cmd_param,
+		.offset = __builtin_offsetof(struct _avm_event_cmd, param),
+	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_mass_storage_unmount'
+ * Endian Convert-Table for: 'struct avm_event_wlan_power'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_mass_storage_unmount[] = {
+struct _endian_convert convert_message_struct_avm_event_wlan_power[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_mass_storage_unmount",
-		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
-		.name = "name_length",
+		.struct_name =  "convert_message_struct_avm_event_wlan_power",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "power",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_mass_storage_unmount, name_length),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_mass_storage_unmount",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "name",
-		.size = sizeof(unsigned char),
-		.offset = __builtin_offsetof(struct avm_event_mass_storage_unmount, name),
+		.offset = __builtin_offsetof(struct avm_event_wlan_power, power),
 	},
 };
 
@@ -3317,177 +3353,89 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_led_info'
+ * Endian Convert-Table for: 'struct avm_event_tffs_write'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_led_info[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_write[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.struct_name =  "convert_message_struct_avm_event_tffs_write",
 		.flags = 0,
-		.name = "mode",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_info, mode),
+		.name = "buff_addr",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_write, buff_addr),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.struct_name =  "convert_message_struct_avm_event_tffs_write",
 		.flags = 0,
-		.name = "param1",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_info, param1),
+		.name = "len",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_write, len),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.struct_name =  "convert_message_struct_avm_event_tffs_write",
 		.flags = 0,
-		.name = "param2",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_info, param2),
+		.name = "id",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_write, id),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
+		.struct_name =  "convert_message_struct_avm_event_tffs_write",
 		.flags = 0,
-		.name = "gpio_driver_type",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_info, gpio_driver_type),
+		.name = "final",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_write, final),
 	},
 	[4] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
-		.flags = 0,
-		.name = "gpio",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_info, gpio),
-	},
-	[5] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
-		.flags = 0,
-		.name = "pos",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_led_info, pos),
-	},
-	[6] = {
-		.struct_name =  "convert_message_struct_avm_event_led_info",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "name",
-		.size = sizeof(char) * 32,
-		.offset = __builtin_offsetof(struct avm_event_led_info, name),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_paniclog'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_paniclog[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_paniclog",
-		.flags = 0,
-		.name = "buff_addr",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_paniclog, buff_addr),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_paniclog",
-		.flags = 0,
-		.name = "len",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_paniclog, len),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_paniclog",
+		.struct_name =  "convert_message_struct_avm_event_tffs_write",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
 		.name = "crc",
 		.size = sizeof(int32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_paniclog, crc),
-	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_init'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_init[] = {
-	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_init",
-		.flags = 0,
-		.name = "mem_offset",
-		.size = sizeof(int64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_init, mem_offset),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_init",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "max_seg_size",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_init, max_seg_size),
+		.offset = __builtin_offsetof(struct avm_event_tffs_write, crc),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_cmd_param_register'
+ * Endian Convert-Table for: 'struct avm_event_source_unregister'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_cmd_param_register[] = {
+struct _endian_convert convert_message_struct_avm_event_source_unregister[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd_param_register",
+		.struct_name =  "convert_message_struct_avm_event_source_unregister",
 		.flags = 0,
-		.name = "mask",
+		.name = "id_mask",
 		.substruct = convert_message_struct__avm_event_id_mask,
-		.offset = __builtin_offsetof(struct _avm_event_cmd_param_register, mask),
+		.offset = __builtin_offsetof(struct avm_event_source_unregister, id_mask),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_cmd_param_register",
+		.struct_name =  "convert_message_struct_avm_event_source_unregister",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "Name",
-		.size = sizeof(char) * MAX_EVENT_CLIENT_NAME_LEN + 1,
-		.offset = __builtin_offsetof(struct _avm_event_cmd_param_register, Name),
+		.name = "name",
+		.size = sizeof(char) * 32,
+		.offset = __builtin_offsetof(struct avm_event_source_unregister, name),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_smarthome'
+ * Endian Convert-Table for: 'struct avm_event_tffs_deinit'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_smarthome[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_deinit[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome",
-		.flags = 0,
-		.name = "length",
-		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct avm_event_smarthome, length),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome",
-		.flags = ENDIAN_CONVERT_ARRAY_USE | 0,
-		.name = "ident",
-		.size = sizeof(char) * 20,
-		.offset = __builtin_offsetof(struct avm_event_smarthome, ident),
-	},
-	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome",
-		.flags = 0,
-		.name = "type",
-		.size = sizeof(unsigned short),
-		.offset = __builtin_offsetof(struct avm_event_smarthome, type),
-	},
-	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_smarthome",
+		.struct_name =  "convert_message_struct_avm_event_tffs_deinit",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "payload",
-		.offset = __builtin_offsetof(struct avm_event_smarthome, payload),
+		.name = "dummy",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_deinit, dummy),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_user_mode_source_notify'
+ * Endian Convert-Table for: 'struct avm_event_source_notifier'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_user_mode_source_notify[] = {
+struct _endian_convert convert_message_struct_avm_event_source_notifier[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_user_mode_source_notify",
-		.flags = 0,
-		.name = "header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_user_mode_source_notify, header),
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_user_mode_source_notify",
+		.struct_name =  "convert_message_struct_avm_event_source_notifier",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
 		.name = "id",
 		.size = sizeof(enum _avm_event_id),
-		.offset = __builtin_offsetof(struct _avm_event_user_mode_source_notify, id),
+		.offset = __builtin_offsetof(struct avm_event_source_notifier, id),
 #ifdef WIRESHARK_PLUGIN
 		.enumInfo = enum_table__avm_event_id,
 		.enumName = "enum_table__avm_event_id"
@@ -3498,190 +3446,242 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_tffs_write'
+ * Endian Convert-Table for: 'struct _avm_event_led_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_tffs_write[] = {
+struct _endian_convert convert_message_struct__avm_event_led_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_write",
+		.struct_name =  "convert_message_struct__avm_event_led_status",
 		.flags = 0,
-		.name = "buff_addr",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_write, buff_addr),
+		.name = "header",
+		.substruct = convert_message_struct__avm_event_header,
+		.offset = __builtin_offsetof(struct _avm_event_led_status, header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_write",
+		.struct_name =  "convert_message_struct__avm_event_led_status",
 		.flags = 0,
-		.name = "len",
-		.size = sizeof(uint64_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_write, len),
+		.name = "led",
+		.size = sizeof(enum _led_event),
+		.offset = __builtin_offsetof(struct _avm_event_led_status, led),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__led_event,
+		.enumName = "enum_table__led_event"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_write",
+		.struct_name =  "convert_message_struct__avm_event_led_status",
 		.flags = 0,
-		.name = "id",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_write, id),
+		.name = "state",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_led_status, state),
 	},
 	[3] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_write",
+		.struct_name =  "convert_message_struct__avm_event_led_status",
 		.flags = 0,
-		.name = "final",
-		.size = sizeof(uint32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_write, final),
+		.name = "param_len",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_led_status, param_len),
 	},
 	[4] = {
-		.struct_name =  "convert_message_struct_avm_event_tffs_write",
+		.struct_name =  "convert_message_struct__avm_event_led_status",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "crc",
-		.size = sizeof(int32_t),
-		.offset = __builtin_offsetof(struct avm_event_tffs_write, crc),
+		.name = "params",
+		.size = sizeof(unsigned char) * 245,
+		.offset = __builtin_offsetof(struct _avm_event_led_status, params),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_cpu_run'
+ * Endian Convert-Table for: 'struct avm_event_unserialised'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_cpu_run[] = {
+struct _endian_convert convert_message_struct_avm_event_unserialised[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_run",
+		.struct_name =  "convert_message_struct_avm_event_unserialised",
 		.flags = 0,
-		.name = "cputype",
-		.size = sizeof(enum _cputype),
-		.offset = __builtin_offsetof(struct avm_event_cpu_run, cputype),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__cputype,
-		.enumName = "enum_table__cputype"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.name = "evnt_id",
+		.size = sizeof(uint64_t),
+		.offset = __builtin_offsetof(struct avm_event_unserialised, evnt_id),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_avm_event_cpu_run",
+		.struct_name =  "convert_message_struct_avm_event_unserialised",
+		.flags = 0,
+		.name = "data_len",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_unserialised, data_len),
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct_avm_event_unserialised",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "cpu_run",
-		.size = sizeof(unsigned char) * 4,
-		.offset = __builtin_offsetof(struct avm_event_cpu_run, cpu_run),
+		.name = "data",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_unserialised, data),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_telephony_missed_call_params'
+ * Endian Convert-Table for: 'struct avm_event_telefonprofile'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_telephony_missed_call_params[] = {
+struct _endian_convert convert_message_struct_avm_event_telefonprofile[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call_params",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "id",
-		.size = sizeof(enum avm_event_telephony_param_sel),
-		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call_params, id),
-#ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table_avm_event_telephony_param_sel,
-		.enumName = "enum_table_avm_event_telephony_param_sel"
-#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range_avm_event_telephony_param_sel,
-#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
-	},
-	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_telephony_missed_call_params",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "params",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union_avm_event_telephony_call_params,
-		.substruct = convert_message_union_avm_event_telephony_call_params,
-		.offset = __builtin_offsetof(struct _avm_event_telephony_missed_call_params, params),
+		.struct_name =  "convert_message_struct_avm_event_telefonprofile",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "on",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_telefonprofile, on),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct avm_event_wlan_power'
+ * Endian Convert-Table for: 'struct avm_event_tffs_close'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_avm_event_wlan_power[] = {
+struct _endian_convert convert_message_struct_avm_event_tffs_close[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_avm_event_wlan_power",
+		.struct_name =  "convert_message_struct_avm_event_tffs_close",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "power",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct avm_event_wlan_power, power),
+		.name = "dummy",
+		.size = sizeof(uint32_t),
+		.offset = __builtin_offsetof(struct avm_event_tffs_close, dummy),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct cpmac_event_struct'
+ * Endian Convert-Table for: 'struct avm_event_smarthome_switch_status'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct_cpmac_event_struct[] = {
+struct _endian_convert convert_message_struct_avm_event_smarthome_switch_status[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct_cpmac_event_struct",
+		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
 		.flags = 0,
-		.name = "event_header",
-		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct cpmac_event_struct, event_header),
+		.name = "type",
+		.size = sizeof(enum avm_event_switch_type),
+		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, type),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table_avm_event_switch_type,
+		.enumName = "enum_table_avm_event_switch_type"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct_cpmac_event_struct",
+		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
 		.flags = 0,
-		.name = "ports",
+		.name = "value",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(struct cpmac_event_struct, ports),
+		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, value),
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct_cpmac_event_struct",
+		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "ain_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, ain_length),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct_avm_event_smarthome_switch_status",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "ain",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct avm_event_smarthome_switch_status, ain),
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'struct wlan_event_data_client_state_change'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_struct_wlan_event_data_client_state_change[] = {
+	[0] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_state_change",
+		.flags = 0,
+		.name = "common",
+		.substruct = convert_message_struct_wlan_event_data_client_common,
+		.offset = __builtin_offsetof(struct wlan_event_data_client_state_change, common),
+	},
+	[1] = {
+		.struct_name =  "convert_message_struct_wlan_event_data_client_state_change",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "port",
-		.substruct = convert_message_struct_cpmac_port,
-		.offset = __builtin_offsetof(struct cpmac_event_struct, port),
+		.name = "state",
+		.size = sizeof(uint8_t),
+		.offset = __builtin_offsetof(struct wlan_event_data_client_state_change, state),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_temperature'
+ * Endian Convert-Table for: 'struct _avm_event_remotewatchdog'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_temperature[] = {
+struct _endian_convert convert_message_struct__avm_event_remotewatchdog[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_temperature",
+		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
 		.flags = 0,
 		.name = "event_header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_temperature, event_header),
+		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, event_header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_temperature",
+		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
+		.flags = 0,
+		.name = "cmd",
+		.size = sizeof(enum _avm_remote_wdt_cmd),
+		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, cmd),
+#ifdef WIRESHARK_PLUGIN
+		.enumInfo = enum_table__avm_remote_wdt_cmd,
+		.enumName = "enum_table__avm_remote_wdt_cmd"
+#else /*--- #ifdef WIRESHARK_PLUGIN ---*/
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
+#endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
+	},
+	[2] = {
+		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
+		.flags = 0,
+		.name = "name",
+		.size = sizeof(char) * 16,
+		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, name),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct__avm_event_remotewatchdog",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "temperature",
-		.size = sizeof(int),
-		.offset = __builtin_offsetof(struct _avm_event_temperature, temperature),
+		.name = "param",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_remotewatchdog, param),
 	},
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'struct _avm_event_powermanagment_status'
+ * Endian Convert-Table for: 'struct _avm_event_firmware_update_available'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_struct__avm_event_powermanagment_status[] = {
+struct _endian_convert convert_message_struct__avm_event_firmware_update_available[] = {
 	[0] = {
-		.struct_name =  "convert_message_struct__avm_event_powermanagment_status",
+		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
 		.flags = 0,
-		.name = "event_header",
+		.name = "header",
 		.substruct = convert_message_struct__avm_event_header,
-		.offset = __builtin_offsetof(struct _avm_event_powermanagment_status, event_header),
+		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, header),
 	},
 	[1] = {
-		.struct_name =  "convert_message_struct__avm_event_powermanagment_status",
-		.flags = ENDIAN_CONVERT_SELECT | 0,
-		.name = "substatus",
-		.size = sizeof(enum _powermanagment_status_type),
-		.offset = __builtin_offsetof(struct _avm_event_powermanagment_status, substatus),
+		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
+		.flags = 0,
+		.name = "type",
+		.size = sizeof(enum avm_event_firmware_type),
+		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, type),
 #ifdef WIRESHARK_PLUGIN
-		.enumInfo = enum_table__powermanagment_status_type,
-		.enumName = "enum_table__powermanagment_status_type"
+		.enumInfo = enum_table_avm_event_firmware_type,
+		.enumName = "enum_table_avm_event_firmware_type"
 #else /*--- #ifdef WIRESHARK_PLUGIN ---*/
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))avm_event_check_enum_range__powermanagment_status_type,
+		.enum_check_function = NULL // enum field, but possibly a mask, so not check function,
 #endif /*--- #else ---*/ /*--- #ifdef WIRESHARK_PLUGIN ---*/
 	},
 	[2] = {
-		.struct_name =  "convert_message_struct__avm_event_powermanagment_status",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_SELECT_ENTRY | ENDIAN_CONVERT_IGNORE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "param",
-		.enum_check_function = (uint32_t (*)(uint32_t,uint32_t))check_enum_for_union___powermanagment_status_union,
-		.substruct = convert_message_union___powermanagment_status_union,
-		.offset = __builtin_offsetof(struct _avm_event_powermanagment_status, param),
+		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
+		.flags = ENDIAN_CONVERT_ARRAY_ELEMENT_ANZAHL | 0,
+		.name = "version_length",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, version_length),
+	},
+	[3] = {
+		.struct_name =  "convert_message_struct__avm_event_firmware_update_available",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_ARRAY_USE | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "version",
+		.size = sizeof(unsigned char),
+		.offset = __builtin_offsetof(struct _avm_event_firmware_update_available, version),
 	},
 };
 
@@ -4096,113 +4096,50 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'union avm_event_wlan_client_status_u1'
+ * Endian Convert-Table for: 'union avm_event_message_union'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_union_avm_event_wlan_client_status_u1[] = {
-	[INPUT_RADAR_DFS_WAIT] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "sub_event",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, sub_event)
-	},
-	[INPUT_MAC_AUTHORIZE] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate)
-	},
-	[INPUT_EAP_AUTHORIZED] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate1",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate1)
-	},
-	[INPUT_MADWIFI_WRONG_PSK] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate2",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate2)
-	},
-	[INPUT_AUTH_EXPIRED] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate3",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate3)
-	},
-	[INPUT_STA] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate4",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate4)
-	},
-	[INPUT_WDS_LINK_UP] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate5",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate5)
-	},
-	[INPUT_WDS_LINK_DOWN] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "active_rate6",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate6)
-	},
-	[INPUT_RADAR] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "radar_chan",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, radar_chan)
-	},
-	[INPUT_RADAR_DFS_WAIT_PRECAC] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+struct _endian_convert convert_message_union_avm_event_message_union[] = {
+	[avm_event_source_register_type] = {
+		.struct_name =  "convert_message_union_avm_event_message_union",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "radar_chan1",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, radar_chan1)
+		.name = "source_register",
+		.substruct = convert_message_struct_avm_event_source_register,
+		.offset = __builtin_offsetof(union avm_event_message_union, source_register)
 	},
-	[INPUT_GREENAP_PS] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+	[avm_event_source_unregister_type] = {
+		.struct_name =  "convert_message_union_avm_event_message_union",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "green_ap_ps_state",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, green_ap_ps_state)
+		.name = "source_unregister",
+		.substruct = convert_message_struct_avm_event_source_unregister,
+		.offset = __builtin_offsetof(union avm_event_message_union, source_unregister)
 	},
-	[INPUT_COEXIST_SWITCH] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+	[avm_event_source_notifier_type] = {
+		.struct_name =  "convert_message_union_avm_event_message_union",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "coexist_ht40_state",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, coexist_ht40_state)
+		.name = "source_notifier",
+		.substruct = convert_message_struct_avm_event_source_notifier,
+		.offset = __builtin_offsetof(union avm_event_message_union, source_notifier)
 	},
-	[INPUT_MAX_NODE_REACHED] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+	[avm_event_remote_source_trigger_request_type] = {
+		.struct_name =  "convert_message_union_avm_event_message_union",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "max_node_count",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, max_node_count)
+		.name = "remote_source_trigger_request",
+		.substruct = convert_message_struct_avm_event_remote_source_trigger_request,
+		.offset = __builtin_offsetof(union avm_event_message_union, remote_source_trigger_request)
 	},
-	[INPUT_INTERFERENCE_CHAN_CHANGE] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+	[avm_event_ping_type] = {
+		.struct_name =  "convert_message_union_avm_event_message_union",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "channel",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, channel)
+		.name = "ping",
+		.substruct = convert_message_struct_avm_event_ping,
+		.offset = __builtin_offsetof(union avm_event_message_union, ping)
 	},
-	[INPUT_AUTH_1_OS_A] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+	[avm_event_tffs_type] = {
+		.struct_name =  "convert_message_union_avm_event_message_union",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy0",
-		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, dummy0)
+		.name = "tffs",
+		.substruct = convert_message_struct_avm_event_tffs,
+		.offset = __builtin_offsetof(union avm_event_message_union, tffs)
 	},
 };
 
@@ -4227,43 +4164,49 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'union wlan_event_data'
+ * Endian Convert-Table for: 'union avm_event_wlan_client_status_u2'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_union_wlan_event_data[] = {
-	[CLIENT_STATE_CHANGE] = {
-		.struct_name =  "convert_message_union_wlan_event_data",
+struct _endian_convert convert_message_union_avm_event_wlan_client_status_u2[] = {
+	[INPUT_RADAR] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "client_state_change",
-		.substruct = convert_message_struct_wlan_event_data_client_state_change,
-		.offset = __builtin_offsetof(union wlan_event_data, client_state_change)
+		.name = "radar_freq",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, radar_freq)
 	},
-	[CLIENT_CONNECT_INFO] = {
-		.struct_name =  "convert_message_union_wlan_event_data",
+	[INPUT_RADAR_DFS_WAIT_PRECAC] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "client_connect_info",
-		.substruct = convert_message_struct_wlan_event_data_client_connect_info,
-		.offset = __builtin_offsetof(union wlan_event_data, client_connect_info)
+		.name = "radar_freq1",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, radar_freq1)
 	},
-	[WLAN_EVENT_SCAN] = {
-		.struct_name =  "convert_message_union_wlan_event_data",
+	[INPUT_AUTH_1_D] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "scan_event_info",
-		.substruct = convert_message_struct_wlan_event_data_scan_event_info,
-		.offset = __builtin_offsetof(union wlan_event_data, scan_event_info)
+		.name = "wlan_mode",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, wlan_mode)
 	},
-	[CLIENT_STATE_IDLE] = {
-		.struct_name =  "convert_message_union_wlan_event_data",
-		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "client_state_idle",
-		.substruct = convert_message_struct_wlan_event_data_client_state_idle,
-		.offset = __builtin_offsetof(union wlan_event_data, client_state_idle)
+	[INPUT_AUTH_1_OS_A] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "dummy0",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, dummy0)
 	},
-	[WLAN_RADIO_RECOVERY] = {
-		.struct_name =  "convert_message_union_wlan_event_data",
+};
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'union __powermanagment_status_union'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_union___powermanagment_status_union[] = {
+	[dsl_status] = {
+		.struct_name =  "convert_message_union___powermanagment_status_union",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "radio_recovery",
-		.substruct = convert_message_struct_wlan_event_data_radio_recovery,
-		.offset = __builtin_offsetof(union wlan_event_data, radio_recovery)
+		.name = "dsl_status",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union __powermanagment_status_union, dsl_status)
 	},
 };
 
@@ -4420,6 +4363,47 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
+ * Endian Convert-Table for: 'union wlan_event_data'
+\*------------------------------------------------------------------------------------------*/
+struct _endian_convert convert_message_union_wlan_event_data[] = {
+	[CLIENT_STATE_CHANGE] = {
+		.struct_name =  "convert_message_union_wlan_event_data",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "client_state_change",
+		.substruct = convert_message_struct_wlan_event_data_client_state_change,
+		.offset = __builtin_offsetof(union wlan_event_data, client_state_change)
+	},
+	[CLIENT_CONNECT_INFO] = {
+		.struct_name =  "convert_message_union_wlan_event_data",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "client_connect_info",
+		.substruct = convert_message_struct_wlan_event_data_client_connect_info,
+		.offset = __builtin_offsetof(union wlan_event_data, client_connect_info)
+	},
+	[WLAN_EVENT_SCAN] = {
+		.struct_name =  "convert_message_union_wlan_event_data",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "scan_event_info",
+		.substruct = convert_message_struct_wlan_event_data_scan_event_info,
+		.offset = __builtin_offsetof(union wlan_event_data, scan_event_info)
+	},
+	[CLIENT_STATE_IDLE] = {
+		.struct_name =  "convert_message_union_wlan_event_data",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "client_state_idle",
+		.substruct = convert_message_struct_wlan_event_data_client_state_idle,
+		.offset = __builtin_offsetof(union wlan_event_data, client_state_idle)
+	},
+	[WLAN_RADIO_RECOVERY] = {
+		.struct_name =  "convert_message_union_wlan_event_data",
+		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
+		.name = "radio_recovery",
+		.substruct = convert_message_struct_wlan_event_data_radio_recovery,
+		.offset = __builtin_offsetof(union wlan_event_data, radio_recovery)
+	},
+};
+
+/*------------------------------------------------------------------------------------------*\
  * Endian Convert-Table for: 'union avm_event_wlan_client_status_u3'
 \*------------------------------------------------------------------------------------------*/
 struct _endian_convert convert_message_union_avm_event_wlan_client_status_u3[] = {
@@ -4440,96 +4424,112 @@
 };
 
 /*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'union avm_event_wlan_client_status_u2'
+ * Endian Convert-Table for: 'union avm_event_wlan_client_status_u1'
 \*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_union_avm_event_wlan_client_status_u2[] = {
-	[INPUT_RADAR] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
+struct _endian_convert convert_message_union_avm_event_wlan_client_status_u1[] = {
+	[INPUT_RADAR_DFS_WAIT] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "radar_freq",
+		.name = "sub_event",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, radar_freq)
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, sub_event)
 	},
-	[INPUT_RADAR_DFS_WAIT_PRECAC] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
+	[INPUT_MAC_AUTHORIZE] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "radar_freq1",
+		.name = "active_rate",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, radar_freq1)
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate)
 	},
-	[INPUT_AUTH_1_D] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
+	[INPUT_EAP_AUTHORIZED] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "wlan_mode",
+		.name = "active_rate1",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, wlan_mode)
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate1)
 	},
-	[INPUT_AUTH_1_OS_A] = {
-		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u2",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dummy0",
+	[INPUT_MADWIFI_WRONG_PSK] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "active_rate2",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u2, dummy0)
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate2)
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'union __powermanagment_status_union'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_union___powermanagment_status_union[] = {
-	[dsl_status] = {
-		.struct_name =  "convert_message_union___powermanagment_status_union",
-		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "dsl_status",
+	[INPUT_AUTH_EXPIRED] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "active_rate3",
 		.size = sizeof(unsigned int),
-		.offset = __builtin_offsetof(union __powermanagment_status_union, dsl_status)
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate3)
 	},
-};
-
-/*------------------------------------------------------------------------------------------*\
- * Endian Convert-Table for: 'union avm_event_message_union'
-\*------------------------------------------------------------------------------------------*/
-struct _endian_convert convert_message_union_avm_event_message_union[] = {
-	[avm_event_source_register_type] = {
-		.struct_name =  "convert_message_union_avm_event_message_union",
+	[INPUT_STA] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "source_register",
-		.substruct = convert_message_struct_avm_event_source_register,
-		.offset = __builtin_offsetof(union avm_event_message_union, source_register)
+		.name = "active_rate4",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate4)
 	},
-	[avm_event_source_unregister_type] = {
-		.struct_name =  "convert_message_union_avm_event_message_union",
+	[INPUT_WDS_LINK_UP] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "source_unregister",
-		.substruct = convert_message_struct_avm_event_source_unregister,
-		.offset = __builtin_offsetof(union avm_event_message_union, source_unregister)
+		.name = "active_rate5",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate5)
 	},
-	[avm_event_source_notifier_type] = {
-		.struct_name =  "convert_message_union_avm_event_message_union",
+	[INPUT_WDS_LINK_DOWN] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "source_notifier",
-		.substruct = convert_message_struct_avm_event_source_notifier,
-		.offset = __builtin_offsetof(union avm_event_message_union, source_notifier)
+		.name = "active_rate6",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, active_rate6)
 	},
-	[avm_event_remote_source_trigger_request_type] = {
-		.struct_name =  "convert_message_union_avm_event_message_union",
+	[INPUT_RADAR] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "remote_source_trigger_request",
-		.substruct = convert_message_struct_avm_event_remote_source_trigger_request,
-		.offset = __builtin_offsetof(union avm_event_message_union, remote_source_trigger_request)
+		.name = "radar_chan",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, radar_chan)
 	},
-	[avm_event_ping_type] = {
-		.struct_name =  "convert_message_union_avm_event_message_union",
+	[INPUT_RADAR_DFS_WAIT_PRECAC] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | 0,
-		.name = "ping",
-		.substruct = convert_message_struct_avm_event_ping,
-		.offset = __builtin_offsetof(union avm_event_message_union, ping)
+		.name = "radar_chan1",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, radar_chan1)
 	},
-	[avm_event_tffs_type] = {
-		.struct_name =  "convert_message_union_avm_event_message_union",
+	[INPUT_GREENAP_PS] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "green_ap_ps_state",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, green_ap_ps_state)
+	},
+	[INPUT_COEXIST_SWITCH] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "coexist_ht40_state",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, coexist_ht40_state)
+	},
+	[INPUT_MAX_NODE_REACHED] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "max_node_count",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, max_node_count)
+	},
+	[INPUT_INTERFERENCE_CHAN_CHANGE] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
+		.flags = ENDIAN_CONVERT_LAST | 0,
+		.name = "channel",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, channel)
+	},
+	[INPUT_AUTH_1_OS_A] = {
+		.struct_name =  "convert_message_union_avm_event_wlan_client_status_u1",
 		.flags = ENDIAN_CONVERT_LAST | ENDIAN_CONVERT_LAST_ARRAY_ITEM | 0,
-		.name = "tffs",
-		.substruct = convert_message_struct_avm_event_tffs,
-		.offset = __builtin_offsetof(union avm_event_message_union, tffs)
+		.name = "dummy0",
+		.size = sizeof(unsigned int),
+		.offset = __builtin_offsetof(union avm_event_wlan_client_status_u1, dummy0)
 	},
 };
diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.c linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.c
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.c	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.c	2019-01-02 12:04:50.000000000 +0100
@@ -727,39 +727,21 @@
 
 
 /*------------------------------------------------------------------------------------------*\
- * Endian check für : 'union avm_event_wlan_client_status_u1'
+ * Endian check für : 'union avm_event_message_union'
 \*------------------------------------------------------------------------------------------*/
-int check_enum_for_union_avm_event_wlan_client_status_u1 (enum wlan_event_sel E, unsigned int version __attribute__((unused))) {
+int check_enum_for_union_avm_event_message_union (enum avm_event_msg_type E, unsigned int version __attribute__((unused))) {
 	switch(E) {
-		case INPUT_RADAR_DFS_WAIT:
-			return 0;
-		case INPUT_MAC_AUTHORIZE:
-			return 0;
-		case INPUT_EAP_AUTHORIZED:
-			return 0;
-		case INPUT_MADWIFI_WRONG_PSK:
-			return 0;
-		case INPUT_AUTH_EXPIRED:
-			return 0;
-		case INPUT_STA:
-			return 0;
-		case INPUT_WDS_LINK_UP:
-			return 0;
-		case INPUT_WDS_LINK_DOWN:
-			return 0;
-		case INPUT_RADAR:
-			return 0;
-		case INPUT_RADAR_DFS_WAIT_PRECAC:
+		case avm_event_source_register_type:
 			return 0;
-		case INPUT_GREENAP_PS:
+		case avm_event_source_unregister_type:
 			return 0;
-		case INPUT_COEXIST_SWITCH:
+		case avm_event_source_notifier_type:
 			return 0;
-		case INPUT_MAX_NODE_REACHED:
+		case avm_event_remote_source_trigger_request_type:
 			return 0;
-		case INPUT_INTERFERENCE_CHAN_CHANGE:
+		case avm_event_ping_type:
 			return 0;
-		case INPUT_AUTH_1_OS_A:
+		case avm_event_tffs_type:
 			return 0;
 		default:
 			return 1;
@@ -783,19 +765,30 @@
 
 
 /*------------------------------------------------------------------------------------------*\
- * Endian check für : 'union wlan_event_data'
+ * Endian check für : 'union avm_event_wlan_client_status_u2'
 \*------------------------------------------------------------------------------------------*/
-int check_enum_for_union_wlan_event_data (enum wlan_event_id E, unsigned int version __attribute__((unused))) {
+int check_enum_for_union_avm_event_wlan_client_status_u2 (enum wlan_event_sel E, unsigned int version __attribute__((unused))) {
 	switch(E) {
-		case CLIENT_STATE_CHANGE:
+		case INPUT_RADAR:
 			return 0;
-		case CLIENT_CONNECT_INFO:
+		case INPUT_RADAR_DFS_WAIT_PRECAC:
 			return 0;
-		case WLAN_EVENT_SCAN:
+		case INPUT_AUTH_1_D:
 			return 0;
-		case CLIENT_STATE_IDLE:
+		case INPUT_AUTH_1_OS_A:
 			return 0;
-		case WLAN_RADIO_RECOVERY:
+		default:
+			return 1;
+	}
+}
+
+
+/*------------------------------------------------------------------------------------------*\
+ * Endian check für : 'union __powermanagment_status_union'
+\*------------------------------------------------------------------------------------------*/
+int check_enum_for_union___powermanagment_status_union (enum _powermanagment_status_type E, unsigned int version __attribute__((unused))) {
+	switch(E) {
+		case dsl_status:
 			return 0;
 		default:
 			return 1;
@@ -866,13 +859,19 @@
 
 
 /*------------------------------------------------------------------------------------------*\
- * Endian check für : 'union avm_event_wlan_client_status_u3'
+ * Endian check für : 'union wlan_event_data'
 \*------------------------------------------------------------------------------------------*/
-int check_enum_for_union_avm_event_wlan_client_status_u3 (enum wlan_event_sel E, unsigned int version __attribute__((unused))) {
+int check_enum_for_union_wlan_event_data (enum wlan_event_id E, unsigned int version __attribute__((unused))) {
 	switch(E) {
-		case INPUT_RADAR:
+		case CLIENT_STATE_CHANGE:
 			return 0;
-		case INPUT_AUTH_1_OS_A:
+		case CLIENT_CONNECT_INFO:
+			return 0;
+		case WLAN_EVENT_SCAN:
+			return 0;
+		case CLIENT_STATE_IDLE:
+			return 0;
+		case WLAN_RADIO_RECOVERY:
 			return 0;
 		default:
 			return 1;
@@ -881,16 +880,12 @@
 
 
 /*------------------------------------------------------------------------------------------*\
- * Endian check für : 'union avm_event_wlan_client_status_u2'
+ * Endian check für : 'union avm_event_wlan_client_status_u3'
 \*------------------------------------------------------------------------------------------*/
-int check_enum_for_union_avm_event_wlan_client_status_u2 (enum wlan_event_sel E, unsigned int version __attribute__((unused))) {
+int check_enum_for_union_avm_event_wlan_client_status_u3 (enum wlan_event_sel E, unsigned int version __attribute__((unused))) {
 	switch(E) {
 		case INPUT_RADAR:
 			return 0;
-		case INPUT_RADAR_DFS_WAIT_PRECAC:
-			return 0;
-		case INPUT_AUTH_1_D:
-			return 0;
 		case INPUT_AUTH_1_OS_A:
 			return 0;
 		default:
@@ -900,34 +895,39 @@
 
 
 /*------------------------------------------------------------------------------------------*\
- * Endian check für : 'union __powermanagment_status_union'
+ * Endian check für : 'union avm_event_wlan_client_status_u1'
 \*------------------------------------------------------------------------------------------*/
-int check_enum_for_union___powermanagment_status_union (enum _powermanagment_status_type E, unsigned int version __attribute__((unused))) {
+int check_enum_for_union_avm_event_wlan_client_status_u1 (enum wlan_event_sel E, unsigned int version __attribute__((unused))) {
 	switch(E) {
-		case dsl_status:
+		case INPUT_RADAR_DFS_WAIT:
 			return 0;
-		default:
-			return 1;
-	}
-}
-
-
-/*------------------------------------------------------------------------------------------*\
- * Endian check für : 'union avm_event_message_union'
-\*------------------------------------------------------------------------------------------*/
-int check_enum_for_union_avm_event_message_union (enum avm_event_msg_type E, unsigned int version __attribute__((unused))) {
-	switch(E) {
-		case avm_event_source_register_type:
+		case INPUT_MAC_AUTHORIZE:
 			return 0;
-		case avm_event_source_unregister_type:
+		case INPUT_EAP_AUTHORIZED:
 			return 0;
-		case avm_event_source_notifier_type:
+		case INPUT_MADWIFI_WRONG_PSK:
 			return 0;
-		case avm_event_remote_source_trigger_request_type:
+		case INPUT_AUTH_EXPIRED:
 			return 0;
-		case avm_event_ping_type:
+		case INPUT_STA:
 			return 0;
-		case avm_event_tffs_type:
+		case INPUT_WDS_LINK_UP:
+			return 0;
+		case INPUT_WDS_LINK_DOWN:
+			return 0;
+		case INPUT_RADAR:
+			return 0;
+		case INPUT_RADAR_DFS_WAIT_PRECAC:
+			return 0;
+		case INPUT_GREENAP_PS:
+			return 0;
+		case INPUT_COEXIST_SWITCH:
+			return 0;
+		case INPUT_MAX_NODE_REACHED:
+			return 0;
+		case INPUT_INTERFERENCE_CHAN_CHANGE:
+			return 0;
+		case INPUT_AUTH_1_OS_A:
 			return 0;
 		default:
 			return 1;
diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.h linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.h
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.h	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_enum_range.h	2019-01-02 12:04:50.000000000 +0100
@@ -41,12 +41,12 @@
 extern int check_enum_for_union_avm_event_powermanagment_remote_union (enum avm_event_powermanagment_remote_action E, unsigned int version __attribute__((unused)));
 extern int check_enum_for_union_avm_event_data_union (enum _avm_event_id E, unsigned int version __attribute__((unused)));
 extern int check_enum_for_union__avm_event_cmd_param (enum __avm_event_cmd E, unsigned int version __attribute__((unused)));
-extern int check_enum_for_union_avm_event_wlan_client_status_u1 (enum wlan_event_sel E, unsigned int version __attribute__((unused)));
+extern int check_enum_for_union_avm_event_message_union (enum avm_event_msg_type E, unsigned int version __attribute__((unused)));
 extern int check_enum_for_union_avm_event_internet_new_ip_param (enum avm_event_internet_new_ip_param_sel E, unsigned int version __attribute__((unused)));
-extern int check_enum_for_union_wlan_event_data (enum wlan_event_id E, unsigned int version __attribute__((unused)));
+extern int check_enum_for_union_avm_event_wlan_client_status_u2 (enum wlan_event_sel E, unsigned int version __attribute__((unused)));
+extern int check_enum_for_union___powermanagment_status_union (enum _powermanagment_status_type E, unsigned int version __attribute__((unused)));
 extern int check_enum_for_union_avm_event_telephony_call_params (enum avm_event_telephony_param_sel E, unsigned int version __attribute__((unused)));
 extern int check_enum_for_union_avm_event_tffs_call_union (enum avm_event_tffs_call_type E, unsigned int version __attribute__((unused)));
+extern int check_enum_for_union_wlan_event_data (enum wlan_event_id E, unsigned int version __attribute__((unused)));
 extern int check_enum_for_union_avm_event_wlan_client_status_u3 (enum wlan_event_sel E, unsigned int version __attribute__((unused)));
-extern int check_enum_for_union_avm_event_wlan_client_status_u2 (enum wlan_event_sel E, unsigned int version __attribute__((unused)));
-extern int check_enum_for_union___powermanagment_status_union (enum _powermanagment_status_type E, unsigned int version __attribute__((unused)));
-extern int check_enum_for_union_avm_event_message_union (enum avm_event_msg_type E, unsigned int version __attribute__((unused)));
+extern int check_enum_for_union_avm_event_wlan_client_status_u1 (enum wlan_event_sel E, unsigned int version __attribute__((unused)));
diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_flow.dot linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_flow.dot
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_flow.dot	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_flow.dot	2019-01-02 12:04:50.000000000 +0100
@@ -2,525 +2,525 @@
 	compound=true;
 	rankdir=TB;
 	node [shape=record];
-	subgraph cluster_struct__avm_event_cpu_idle{
+	subgraph cluster_struct__avm_event_header{
 		fontcolor = "red";
-		label = "struct _avm_event_cpu_idle";
-		struct__avm_event_cpu_idle [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<cpu_idle> unsigned char: cpu_idle|<dsl_dsp_idle> unsigned char: dsl_dsp_idle|<voice_dsp_idle> unsigned char: voice_dsp_idle|<mem_strictlyused> unsigned char: mem_strictlyused|<mem_cacheused> unsigned char: mem_cacheused|<mem_physfree> unsigned char: mem_physfree|<cputype> enum _cputype: cputype}"];
+		label = "struct _avm_event_header";
+		struct__avm_event_header [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
 	};
-	subgraph cluster_struct_avm_event_unserialised{
+	subgraph cluster_struct__avm_event_telephony_missed_call{
 		fontcolor = "red";
-		label = "struct avm_event_unserialised";
-		struct_avm_event_unserialised [fontcolor="green",shape=record,label="{ <evnt_id> uint64_t: evnt_id|<data_len> uint32_t: data_len|<data> unsigned char: data}"];
+		label = "struct _avm_event_telephony_missed_call";
+		struct__avm_event_telephony_missed_call [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<length> unsigned int: length|<p> struct _avm_event_telephony_missed_call_params: p}"];
 	};
-	subgraph cluster_struct__avm_event_smarthome{
+	subgraph cluster_struct_wlan_event_data_client_connect_info{
 		fontcolor = "red";
-		label = "struct _avm_event_smarthome";
-		struct__avm_event_smarthome [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<length> uint16_t: length|<ident> char: ident|<type> uint16_t: type|<payload> struct {}: payload}"];
+		label = "struct wlan_event_data_client_connect_info";
+		struct_wlan_event_data_client_connect_info [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_client_common: common|<info_context> uint8_t: info_context|<reason> uint8_t: reason|<max_node_count> uint32_t: max_node_count|<ieee80211_code> uint16_t: ieee80211_code}"];
 	};
-	subgraph cluster_struct_avm_event_checkpoint{
+	subgraph cluster_struct_avm_event_smarthome{
 		fontcolor = "red";
-		label = "struct avm_event_checkpoint";
-		struct_avm_event_checkpoint [fontcolor="green",shape=record,label="{ <node_id> uint32_t: node_id|<checkpoints> uint64_t: checkpoints}"];
+		label = "struct avm_event_smarthome";
+		struct_avm_event_smarthome [fontcolor="green",shape=record,label="{ <length> uint16_t: length|<ident> char: ident|<type> uint16_t: type|<payload> struct {}: payload}"];
 	};
-	subgraph cluster_struct_avm_event_boykott{
+	subgraph cluster_struct_avm_event_powerline_status{
 		fontcolor = "red";
-		label = "struct avm_event_boykott";
-		struct_avm_event_boykott [fontcolor="green",shape=record,label="{ <dummy> struct {}: dummy}"];
+		label = "struct avm_event_powerline_status";
+		struct_avm_event_powerline_status [fontcolor="green",shape=record,label="{ <status> enum ePLCState: status}"];
 	};
-	subgraph cluster_struct__avm_event_smarthome_switch_status{
+	subgraph cluster_struct__avm_event_cmd_param_trigger{
 		fontcolor = "red";
-		label = "struct _avm_event_smarthome_switch_status";
-		struct__avm_event_smarthome_switch_status [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<type> enum avm_event_switch_type: type|<value> unsigned int: value|<ain_length> unsigned int: ain_length|<ain> unsigned char: ain}"];
+		label = "struct _avm_event_cmd_param_trigger";
+		struct__avm_event_cmd_param_trigger [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
 	};
-	subgraph cluster_struct__avm_event_fax_status{
+	subgraph cluster_struct__avm_event_telephony_missed_call_params{
 		fontcolor = "red";
-		label = "struct _avm_event_fax_status";
-		struct__avm_event_fax_status [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<fax_receive_mode> enum fax_receive_mode: fax_receive_mode|<fax_storage_dest> enum fax_storage_dest: fax_storage_dest|<dirname_length> unsigned int: dirname_length|<dirname> unsigned char: dirname}"];
+		label = "struct _avm_event_telephony_missed_call_params";
+		struct__avm_event_telephony_missed_call_params [fontcolor="green",shape=record,label="{ <id> enum avm_event_telephony_param_sel: id\n(Select-Key for next union)|<params> union avm_event_telephony_call_params: params\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct__avm_event_cmd_param_source_trigger{
+	subgraph cluster_struct_avm_event_data{
 		fontcolor = "red";
-		label = "struct _avm_event_cmd_param_source_trigger";
-		struct__avm_event_cmd_param_source_trigger [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id|<data_length> unsigned int: data_length}"];
+		label = "struct avm_event_data";
+		struct_avm_event_data [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id\n(Select-Key for next union)|<data> union avm_event_data_union: data\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct__avm_event_telefonprofile{
+	subgraph cluster_struct__avm_event_powermanagment_status{
 		fontcolor = "red";
-		label = "struct _avm_event_telefonprofile";
-		struct__avm_event_telefonprofile [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<on> unsigned int: on}"];
+		label = "struct _avm_event_powermanagment_status";
+		struct__avm_event_powermanagment_status [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<substatus> enum _powermanagment_status_type: substatus\n(Select-Key for next union)|<param> union __powermanagment_status_union: param\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct_avm_event_source_unregister{
+	subgraph cluster_struct_wlan_event_data_client_common{
 		fontcolor = "red";
-		label = "struct avm_event_source_unregister";
-		struct_avm_event_source_unregister [fontcolor="green",shape=record,label="{ <id_mask> struct _avm_event_id_mask: id_mask|<name> char: name}"];
+		label = "struct wlan_event_data_client_common";
+		struct_wlan_event_data_client_common [fontcolor="green",shape=record,label="{ <mac> uint8_t: mac|<iface> char: iface|<initiator> char: initiator}"];
 	};
-	subgraph cluster_struct_avm_event_push_button{
+	subgraph cluster_struct_avm_event_piglet{
 		fontcolor = "red";
-		label = "struct avm_event_push_button";
-		struct_avm_event_push_button [fontcolor="green",shape=record,label="{ <key> enum _avm_event_push_button_key: key|<pressed> uint32_t: pressed}"];
+		label = "struct avm_event_piglet";
+		struct_avm_event_piglet [fontcolor="green",shape=record,label="{ <type> enum _avm_piglettype: type}"];
 	};
-	subgraph cluster_struct__avm_event_cmd_param_trigger{
+	subgraph cluster_struct__avm_event_temperature{
 		fontcolor = "red";
-		label = "struct _avm_event_cmd_param_trigger";
-		struct__avm_event_cmd_param_trigger [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
+		label = "struct _avm_event_temperature";
+		struct__avm_event_temperature [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<temperature> int: temperature}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_notify{
+	subgraph cluster_struct_wlan_event_data_client_state_idle{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_notify";
-		struct_avm_event_tffs_notify [fontcolor="green",shape=record,label="{ <id> uint32_t: id|<event> enum avm_event_tffs_notify_event: event}"];
+		label = "struct wlan_event_data_client_state_idle";
+		struct_wlan_event_data_client_state_idle [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_client_common: common|<idle> uint8_t: idle}"];
 	};
-	subgraph cluster_struct__avm_event_remotewatchdog{
+	subgraph cluster_struct_avm_event_firmware_update_available{
 		fontcolor = "red";
-		label = "struct _avm_event_remotewatchdog";
-		struct__avm_event_remotewatchdog [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<cmd> enum _avm_remote_wdt_cmd: cmd|<name> char: name|<param> unsigned int: param}"];
+		label = "struct avm_event_firmware_update_available";
+		struct_avm_event_firmware_update_available [fontcolor="green",shape=record,label="{ <type> enum avm_event_firmware_type: type|<version_length> unsigned int: version_length|<version> unsigned char: version}"];
 	};
-	subgraph cluster_struct_avm_event_powermanagment_remote{
+	subgraph cluster_struct__avm_event_id_mask{
 		fontcolor = "red";
-		label = "struct avm_event_powermanagment_remote";
-		struct_avm_event_powermanagment_remote [fontcolor="green",shape=record,label="{ <remote_action> enum avm_event_powermanagment_remote_action: remote_action\n(Select-Key for next union)|<param> union avm_event_powermanagment_remote_union: param\n(Select-Key used here)}"];
+		label = "struct _avm_event_id_mask";
+		struct__avm_event_id_mask [fontcolor="green",shape=record,label="{ <mask> avm_event_mask_fieldentry: mask}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_open{
+	subgraph cluster_struct_avm_event_tffs_reindex{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_open";
-		struct_avm_event_tffs_open [fontcolor="green",shape=record,label="{ <id> uint32_t: id|<mode> enum avm_event_tffs_open_mode: mode|<max_segment_size> uint32_t: max_segment_size}"];
+		label = "struct avm_event_tffs_reindex";
+		struct_avm_event_tffs_reindex [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_deinit{
+	subgraph cluster_struct_avm_event_checkpoint{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_deinit";
-		struct_avm_event_tffs_deinit [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
+		label = "struct avm_event_checkpoint";
+		struct_avm_event_checkpoint [fontcolor="green",shape=record,label="{ <node_id> uint32_t: node_id|<checkpoints> uint64_t: checkpoints}"];
 	};
-	subgraph cluster_struct_avm_event_wlan_credentials{
+	subgraph cluster_struct_avm_event_message{
 		fontcolor = "red";
-		label = "struct avm_event_wlan_credentials";
-		struct_avm_event_wlan_credentials [fontcolor="green",shape=record,label="{ <ssid> char: ssid|<bssid> unsigned char: bssid|<key> char: key|<security> unsigned int: security}"];
+		label = "struct avm_event_message";
+		struct_avm_event_message [fontcolor="green",shape=record,label="{ <length> uint32_t: length\n(length for total)|<magic> uint32_t: magic|<nonce> uint32_t: nonce|<flags> uint32_t: flags|<result> int32_t: result|<transmitter_handle> uint32_t: transmitter_handle|<receiver_handle> uint32_t: receiver_handle|<type> enum avm_event_msg_type: type\n(Select-Key for next union)|<message> union avm_event_message_union: message\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct__avm_event_mass_storage_mount{
+	subgraph cluster_struct__avm_event_user_mode_source_notify{
 		fontcolor = "red";
-		label = "struct _avm_event_mass_storage_mount";
-		struct__avm_event_mass_storage_mount [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<size> unsigned long long: size|<free> unsigned long long: free|<name_length> unsigned int: name_length|<name> unsigned char: name}"];
+		label = "struct _avm_event_user_mode_source_notify";
+		struct__avm_event_user_mode_source_notify [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<id> enum _avm_event_id: id}"];
 	};
-	subgraph cluster_struct__avm_event_led_info{
+	subgraph cluster_struct_avm_event_tffs_open{
 		fontcolor = "red";
-		label = "struct _avm_event_led_info";
-		struct__avm_event_led_info [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<mode> unsigned int: mode|<param1> unsigned int: param1|<param2> unsigned int: param2|<gpio_driver_type> unsigned int: gpio_driver_type|<gpio> unsigned int: gpio|<pos> unsigned int: pos|<name> char: name}"];
+		label = "struct avm_event_tffs_open";
+		struct_avm_event_tffs_open [fontcolor="green",shape=record,label="{ <id> uint32_t: id|<mode> enum avm_event_tffs_open_mode: mode|<max_segment_size> uint32_t: max_segment_size}"];
 	};
-	subgraph cluster_struct_avm_event_led_status{
+	subgraph cluster_struct_avm_event_user_mode_source_notify{
 		fontcolor = "red";
-		label = "struct avm_event_led_status";
-		struct_avm_event_led_status [fontcolor="green",shape=record,label="{ <led> enum _led_event: led|<state> unsigned int: state|<param_len> unsigned int: param_len|<params> unsigned char: params}"];
+		label = "struct avm_event_user_mode_source_notify";
+		struct_avm_event_user_mode_source_notify [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_close{
+	subgraph cluster_struct_avm_event_led_info{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_close";
-		struct_avm_event_tffs_close [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
+		label = "struct avm_event_led_info";
+		struct_avm_event_led_info [fontcolor="green",shape=record,label="{ <mode> unsigned int: mode|<param1> unsigned int: param1|<param2> unsigned int: param2|<gpio_driver_type> unsigned int: gpio_driver_type|<gpio> unsigned int: gpio|<pos> unsigned int: pos|<name> char: name}"];
 	};
 	subgraph cluster_struct_avm_event_telephony_string{
 		fontcolor = "red";
 		label = "struct avm_event_telephony_string";
 		struct_avm_event_telephony_string [fontcolor="green",shape=record,label="{ <length> unsigned int: length|<string> unsigned char: string}"];
 	};
-	subgraph cluster_struct_wlan_event_def{
+	subgraph cluster_struct__avm_event_mass_storage_mount{
 		fontcolor = "red";
-		label = "struct wlan_event_def";
-		struct_wlan_event_def [fontcolor="green",shape=record,label="{ <event_id> enum wlan_event_id: event_id\n(Select-Key for next union)|<event_data> union wlan_event_data: event_data\n(Select-Key used here)}"];
+		label = "struct _avm_event_mass_storage_mount";
+		struct__avm_event_mass_storage_mount [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<size> unsigned long long: size|<free> unsigned long long: free|<name_length> unsigned int: name_length|<name> unsigned char: name}"];
 	};
-	subgraph cluster_struct_avm_event_smarthome_switch_status{
+	subgraph cluster_struct__avm_event_cpu_idle{
 		fontcolor = "red";
-		label = "struct avm_event_smarthome_switch_status";
-		struct_avm_event_smarthome_switch_status [fontcolor="green",shape=record,label="{ <type> enum avm_event_switch_type: type|<value> unsigned int: value|<ain_length> unsigned int: ain_length|<ain> unsigned char: ain}"];
+		label = "struct _avm_event_cpu_idle";
+		struct__avm_event_cpu_idle [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<cpu_idle> unsigned char: cpu_idle|<dsl_dsp_idle> unsigned char: dsl_dsp_idle|<voice_dsp_idle> unsigned char: voice_dsp_idle|<mem_strictlyused> unsigned char: mem_strictlyused|<mem_cacheused> unsigned char: mem_cacheused|<mem_physfree> unsigned char: mem_physfree|<cputype> enum _cputype: cputype}"];
 	};
-	subgraph cluster_struct__avm_event_piglet{
+	subgraph cluster_struct__avm_event_smarthome_switch_status{
 		fontcolor = "red";
-		label = "struct _avm_event_piglet";
-		struct__avm_event_piglet [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<type> enum _avm_piglettype: type}"];
+		label = "struct _avm_event_smarthome_switch_status";
+		struct__avm_event_smarthome_switch_status [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<type> enum avm_event_switch_type: type|<value> unsigned int: value|<ain_length> unsigned int: ain_length|<ain> unsigned char: ain}"];
 	};
-	subgraph cluster_struct__avm_event_pm_info_stat{
+	subgraph cluster_struct__avm_event_cmd_param_release{
 		fontcolor = "red";
-		label = "struct _avm_event_pm_info_stat";
-		struct__avm_event_pm_info_stat [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<reserved1> unsigned char: reserved1|<rate_sumact> unsigned char: rate_sumact|<rate_sumcum> unsigned char: rate_sumcum|<rate_systemact> unsigned char: rate_systemact|<rate_systemcum> unsigned char: rate_systemcum|<system_status> unsigned char: system_status|<rate_dspact> unsigned char: rate_dspact|<rate_dspcum> unsigned char: rate_dspcum|<rate_wlanact> unsigned char: rate_wlanact|<rate_wlancum> unsigned char: rate_wlancum|<wlan_devices> unsigned char: wlan_devices|<wlan_status> unsigned char: wlan_status|<rate_ethact> unsigned char: rate_ethact|<rate_ethcum> unsigned char: rate_ethcum|<eth_status> unsigned short: eth_status|<rate_abact> unsigned char: rate_abact|<rate_abcum> unsigned char: rate_abcum|<isdn_status> unsigned short: isdn_status|<rate_dectact> unsigned char: rate_dectact|<rate_dectcum> unsigned char: rate_dectcum|<rate_battchargeact> unsigned char: rate_battchargeact|<rate_battchargecum> unsigned char: rate_battchargecum|<dect_status> unsigned char: dect_status|<rate_usbhostact> unsigned char: rate_usbhostact|<rate_usbhostcum> unsigned char: rate_usbhostcum|<usb_status> unsigned char: usb_status|<act_temperature> signed char: act_temperature|<min_temperature> signed char: min_temperature|<max_temperature> signed char: max_temperature|<avg_temperature> signed char: avg_temperature|<rate_lteact> unsigned char: rate_lteact|<rate_ltecum> unsigned char: rate_ltecum|<rate_dvbcact> unsigned char: rate_dvbcact|<rate_dvbccum> unsigned char: rate_dvbccum}"];
+		label = "struct _avm_event_cmd_param_release";
+		struct__avm_event_cmd_param_release [fontcolor="green",shape=record,label="{ <Name> char: Name}"];
 	};
-	subgraph cluster_struct_avm_event_data{
+	subgraph cluster_struct_avm_event_ping{
 		fontcolor = "red";
-		label = "struct avm_event_data";
-		struct_avm_event_data [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id\n(Select-Key for next union)|<data> union avm_event_data_union: data\n(Select-Key used here)}"];
+		label = "struct avm_event_ping";
+		struct_avm_event_ping [fontcolor="green",shape=record,label="{ <seq> uint32_t: seq}"];
 	};
-	subgraph cluster_struct_avm_event_message{
+	subgraph cluster_struct_avm_event_wlan_credentials{
 		fontcolor = "red";
-		label = "struct avm_event_message";
-		struct_avm_event_message [fontcolor="green",shape=record,label="{ <length> uint32_t: length\n(length for total)|<magic> uint32_t: magic|<nonce> uint32_t: nonce|<flags> uint32_t: flags|<result> int32_t: result|<transmitter_handle> uint32_t: transmitter_handle|<receiver_handle> uint32_t: receiver_handle|<type> enum avm_event_msg_type: type\n(Select-Key for next union)|<message> union avm_event_message_union: message\n(Select-Key used here)}"];
+		label = "struct avm_event_wlan_credentials";
+		struct_avm_event_wlan_credentials [fontcolor="green",shape=record,label="{ <ssid> char: ssid|<bssid> unsigned char: bssid|<key> char: key|<security> unsigned int: security}"];
 	};
 	subgraph cluster_struct_avm_event_tffs_cleanup{
 		fontcolor = "red";
 		label = "struct avm_event_tffs_cleanup";
 		struct_avm_event_tffs_cleanup [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
 	};
-	subgraph cluster_struct_avm_event_internet_new_ip{
-		fontcolor = "red";
-		label = "struct avm_event_internet_new_ip";
-		struct_avm_event_internet_new_ip [fontcolor="green",shape=record,label="{ <sel> enum avm_event_internet_new_ip_param_sel: sel\n(Select-Key for next union)|<params> union avm_event_internet_new_ip_param: params\n(Select-Key used here)}"];
-	};
-	subgraph cluster_struct__avm_event_fax_file{
+	subgraph cluster_struct_avm_event_remotepcmlink{
 		fontcolor = "red";
-		label = "struct _avm_event_fax_file";
-		struct__avm_event_fax_file [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<action> enum fax_file_event_type: action|<date> time_t: date}"];
+		label = "struct avm_event_remotepcmlink";
+		struct_avm_event_remotepcmlink [fontcolor="green",shape=record,label="{ <type> enum _avm_remotepcmlinktype: type|<sharedlen> unsigned int: sharedlen|<sharedpointer> unsigned int: sharedpointer}"];
 	};
-	subgraph cluster_struct__avm_event_led_status{
+	subgraph cluster_struct__avm_event_push_button{
 		fontcolor = "red";
-		label = "struct _avm_event_led_status";
-		struct__avm_event_led_status [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<led> enum _led_event: led|<state> unsigned int: state|<param_len> unsigned int: param_len|<params> unsigned char: params}"];
+		label = "struct _avm_event_push_button";
+		struct__avm_event_push_button [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id|<key> enum _avm_event_push_button_key: key|<pressed> uint32_t: pressed}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_info{
+	subgraph cluster_struct_avm_event_tffs_read{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_info";
-		struct_avm_event_tffs_info [fontcolor="green",shape=record,label="{ <fill_level> uint32_t: fill_level}"];
+		label = "struct avm_event_tffs_read";
+		struct_avm_event_tffs_read [fontcolor="green",shape=record,label="{ <buff_addr> uint64_t: buff_addr|<len> uint64_t: len|<id> uint32_t: id|<crc> int32_t: crc}"];
 	};
-	subgraph cluster_struct_avm_event_fax_status{
+	subgraph cluster_struct_wlan_event_data_scan_event_info{
 		fontcolor = "red";
-		label = "struct avm_event_fax_status";
-		struct_avm_event_fax_status [fontcolor="green",shape=record,label="{ <fax_receive_mode> enum fax_receive_mode: fax_receive_mode|<fax_storage_dest> enum fax_storage_dest: fax_storage_dest|<dirname_length> unsigned int: dirname_length|<dirname> unsigned char: dirname}"];
+		label = "struct wlan_event_data_scan_event_info";
+		struct_wlan_event_data_scan_event_info [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_scan_common: common|<event_type> enum wlan_event_scan_type: event_type}"];
 	};
-	subgraph cluster_struct_avm_event_remotewatchdog{
+	subgraph cluster_struct_avm_event_mass_storage_unmount{
 		fontcolor = "red";
-		label = "struct avm_event_remotewatchdog";
-		struct_avm_event_remotewatchdog [fontcolor="green",shape=record,label="{ <cmd> enum _avm_remote_wdt_cmd: cmd|<name> char: name|<param> unsigned int: param}"];
+		label = "struct avm_event_mass_storage_unmount";
+		struct_avm_event_mass_storage_unmount [fontcolor="green",shape=record,label="{ <name_length> unsigned int: name_length|<name> unsigned char: name}"];
 	};
-	subgraph cluster_struct_avm_event_telefonprofile{
+	subgraph cluster_struct__avm_event_cmd_param_register{
 		fontcolor = "red";
-		label = "struct avm_event_telefonprofile";
-		struct_avm_event_telefonprofile [fontcolor="green",shape=record,label="{ <on> unsigned int: on}"];
+		label = "struct _avm_event_cmd_param_register";
+		struct__avm_event_cmd_param_register [fontcolor="green",shape=record,label="{ <mask> struct _avm_event_id_mask: mask|<Name> char: Name}"];
 	};
-	subgraph cluster_struct__cpmac_event_struct{
+	subgraph cluster_struct__avm_event_cpu_run{
 		fontcolor = "red";
-		label = "struct _cpmac_event_struct";
-		struct__cpmac_event_struct [fontcolor="green",shape=record,label="{ <ports> unsigned int: ports|<port> struct cpmac_port: port}"];
+		label = "struct _avm_event_cpu_run";
+		struct__avm_event_cpu_run [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<cputype> enum _cputype: cputype|<cpu_run> unsigned char: cpu_run}"];
 	};
-	subgraph cluster_struct_avm_event_fax_file{
+	subgraph cluster_struct_avm_event_mass_storage_mount{
 		fontcolor = "red";
-		label = "struct avm_event_fax_file";
-		struct_avm_event_fax_file [fontcolor="green",shape=record,label="{ <action> enum fax_file_event_type: action|<date> time_t: date}"];
+		label = "struct avm_event_mass_storage_mount";
+		struct_avm_event_mass_storage_mount [fontcolor="green",shape=record,label="{ <size> unsigned long long: size|<free> unsigned long long: free|<name_length> unsigned int: name_length|<name> unsigned char: name}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_read{
+	subgraph cluster_struct__avm_event_piglet{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_read";
-		struct_avm_event_tffs_read [fontcolor="green",shape=record,label="{ <buff_addr> uint64_t: buff_addr|<len> uint64_t: len|<id> uint32_t: id|<crc> int32_t: crc}"];
+		label = "struct _avm_event_piglet";
+		struct__avm_event_piglet [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<type> enum _avm_piglettype: type}"];
 	};
-	subgraph cluster_struct_avm_event_remotepcmlink{
+	subgraph cluster_struct__avm_event_smarthome{
 		fontcolor = "red";
-		label = "struct avm_event_remotepcmlink";
-		struct_avm_event_remotepcmlink [fontcolor="green",shape=record,label="{ <type> enum _avm_remotepcmlinktype: type|<sharedlen> unsigned int: sharedlen|<sharedpointer> unsigned int: sharedpointer}"];
+		label = "struct _avm_event_smarthome";
+		struct__avm_event_smarthome [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<length> uint16_t: length|<ident> char: ident|<type> uint16_t: type|<payload> struct {}: payload}"];
 	};
-	subgraph cluster_struct_wlan_event_data_client_connect_info{
+	subgraph cluster_struct_avm_event_pm_info_stat{
 		fontcolor = "red";
-		label = "struct wlan_event_data_client_connect_info";
-		struct_wlan_event_data_client_connect_info [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_client_common: common|<info_context> uint8_t: info_context|<reason> uint8_t: reason|<max_node_count> uint32_t: max_node_count|<ieee80211_code> uint16_t: ieee80211_code}"];
+		label = "struct avm_event_pm_info_stat";
+		struct_avm_event_pm_info_stat [fontcolor="green",shape=record,label="{ <reserved1> unsigned char: reserved1|<rate_sumact> unsigned char: rate_sumact|<rate_sumcum> unsigned char: rate_sumcum|<rate_systemact> unsigned char: rate_systemact|<rate_systemcum> unsigned char: rate_systemcum|<system_status> unsigned char: system_status|<rate_dspact> unsigned char: rate_dspact|<rate_dspcum> unsigned char: rate_dspcum|<rate_wlanact> unsigned char: rate_wlanact|<rate_wlancum> unsigned char: rate_wlancum|<wlan_devices> unsigned char: wlan_devices|<wlan_status> unsigned char: wlan_status|<rate_ethact> unsigned char: rate_ethact|<rate_ethcum> unsigned char: rate_ethcum|<eth_status> unsigned short: eth_status|<rate_abact> unsigned char: rate_abact|<rate_abcum> unsigned char: rate_abcum|<isdn_status> unsigned short: isdn_status|<rate_dectact> unsigned char: rate_dectact|<rate_dectcum> unsigned char: rate_dectcum|<rate_battchargeact> unsigned char: rate_battchargeact|<rate_battchargecum> unsigned char: rate_battchargecum|<dect_status> unsigned char: dect_status|<rate_usbhostact> unsigned char: rate_usbhostact|<rate_usbhostcum> unsigned char: rate_usbhostcum|<usb_status> unsigned char: usb_status|<act_temperature> signed char: act_temperature|<min_temperature> signed char: min_temperature|<max_temperature> signed char: max_temperature|<avg_temperature> signed char: avg_temperature|<rate_lteact> unsigned char: rate_lteact|<rate_ltecum> unsigned char: rate_ltecum|<rate_dvbcact> unsigned char: rate_dvbcact|<rate_dvbccum> unsigned char: rate_dvbccum}"];
 	};
-	subgraph cluster_struct_wlan_event_data_radio_recovery{
+	subgraph cluster_struct__avm_event_telefonprofile{
 		fontcolor = "red";
-		label = "struct wlan_event_data_radio_recovery";
-		struct_wlan_event_data_radio_recovery [fontcolor="green",shape=record,label="{ <radio_id> int: radio_id|<state> enum wlan_event_radio_recovery_state: state}"];
+		label = "struct _avm_event_telefonprofile";
+		struct__avm_event_telefonprofile [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<on> unsigned int: on}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_reindex{
+	subgraph cluster_struct_avm_event_push_button{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_reindex";
-		struct_avm_event_tffs_reindex [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
+		label = "struct avm_event_push_button";
+		struct_avm_event_push_button [fontcolor="green",shape=record,label="{ <key> enum _avm_event_push_button_key: key|<pressed> uint32_t: pressed}"];
 	};
-	subgraph cluster_struct_avm_event_mass_storage_mount{
+	subgraph cluster_struct_wlan_event_data_scan_common{
 		fontcolor = "red";
-		label = "struct avm_event_mass_storage_mount";
-		struct_avm_event_mass_storage_mount [fontcolor="green",shape=record,label="{ <size> unsigned long long: size|<free> unsigned long long: free|<name_length> unsigned int: name_length|<name> unsigned char: name}"];
+		label = "struct wlan_event_data_scan_common";
+		struct_wlan_event_data_scan_common [fontcolor="green",shape=record,label="{ <iface> char: iface|<initiator> char: initiator}"];
 	};
-	subgraph cluster_struct__avm_event_ambient_brightness{
+	subgraph cluster_struct_avm_event_cpu_idle{
 		fontcolor = "red";
-		label = "struct _avm_event_ambient_brightness";
-		struct__avm_event_ambient_brightness [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<value> unsigned int: value|<maxvalue> unsigned int: maxvalue}"];
+		label = "struct avm_event_cpu_idle";
+		struct_avm_event_cpu_idle [fontcolor="green",shape=record,label="{ <cpu_idle> unsigned char: cpu_idle|<dsl_dsp_idle> unsigned char: dsl_dsp_idle|<voice_dsp_idle> unsigned char: voice_dsp_idle|<mem_strictlyused> unsigned char: mem_strictlyused|<mem_cacheused> unsigned char: mem_cacheused|<mem_physfree> unsigned char: mem_physfree|<cputype> enum _cputype: cputype}"];
 	};
-	subgraph cluster_struct__avm_event_mass_storage_unmount{
+	subgraph cluster_struct_cpmac_event_struct{
 		fontcolor = "red";
-		label = "struct _avm_event_mass_storage_unmount";
-		struct__avm_event_mass_storage_unmount [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<name_length> unsigned int: name_length|<name> unsigned char: name}"];
+		label = "struct cpmac_event_struct";
+		struct_cpmac_event_struct [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<ports> unsigned int: ports|<port> struct cpmac_port: port}"];
 	};
-	subgraph cluster_struct_avm_event_piglet{
+	subgraph cluster_struct__avm_event_pm_info_stat{
 		fontcolor = "red";
-		label = "struct avm_event_piglet";
-		struct_avm_event_piglet [fontcolor="green",shape=record,label="{ <type> enum _avm_piglettype: type}"];
+		label = "struct _avm_event_pm_info_stat";
+		struct__avm_event_pm_info_stat [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<reserved1> unsigned char: reserved1|<rate_sumact> unsigned char: rate_sumact|<rate_sumcum> unsigned char: rate_sumcum|<rate_systemact> unsigned char: rate_systemact|<rate_systemcum> unsigned char: rate_systemcum|<system_status> unsigned char: system_status|<rate_dspact> unsigned char: rate_dspact|<rate_dspcum> unsigned char: rate_dspcum|<rate_wlanact> unsigned char: rate_wlanact|<rate_wlancum> unsigned char: rate_wlancum|<wlan_devices> unsigned char: wlan_devices|<wlan_status> unsigned char: wlan_status|<rate_ethact> unsigned char: rate_ethact|<rate_ethcum> unsigned char: rate_ethcum|<eth_status> unsigned short: eth_status|<rate_abact> unsigned char: rate_abact|<rate_abcum> unsigned char: rate_abcum|<isdn_status> unsigned short: isdn_status|<rate_dectact> unsigned char: rate_dectact|<rate_dectcum> unsigned char: rate_dectcum|<rate_battchargeact> unsigned char: rate_battchargeact|<rate_battchargecum> unsigned char: rate_battchargecum|<dect_status> unsigned char: dect_status|<rate_usbhostact> unsigned char: rate_usbhostact|<rate_usbhostcum> unsigned char: rate_usbhostcum|<usb_status> unsigned char: usb_status|<act_temperature> signed char: act_temperature|<min_temperature> signed char: min_temperature|<max_temperature> signed char: max_temperature|<avg_temperature> signed char: avg_temperature|<rate_lteact> unsigned char: rate_lteact|<rate_ltecum> unsigned char: rate_ltecum|<rate_dvbcact> unsigned char: rate_dvbcact|<rate_dvbccum> unsigned char: rate_dvbccum}"];
 	};
-	subgraph cluster_struct_wlan_event_data_client_state_idle{
+	subgraph cluster_struct__avm_event_cmd_param_source_trigger{
 		fontcolor = "red";
-		label = "struct wlan_event_data_client_state_idle";
-		struct_wlan_event_data_client_state_idle [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_client_common: common|<idle> uint8_t: idle}"];
+		label = "struct _avm_event_cmd_param_source_trigger";
+		struct__avm_event_cmd_param_source_trigger [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id|<data_length> unsigned int: data_length}"];
 	};
-	subgraph cluster_struct_avm_event_remote_source_trigger_request{
+	subgraph cluster_struct__avm_event_fax_file{
 		fontcolor = "red";
-		label = "struct avm_event_remote_source_trigger_request";
-		struct_avm_event_remote_source_trigger_request [fontcolor="green",shape=record,label="{ <data> struct avm_event_data: data}"];
+		label = "struct _avm_event_fax_file";
+		struct__avm_event_fax_file [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<action> enum fax_file_event_type: action|<date> time_t: date}"];
 	};
-	subgraph cluster_struct__avm_event_powermanagment_remote{
+	subgraph cluster_struct_avm_event_tffs_notify{
 		fontcolor = "red";
-		label = "struct _avm_event_powermanagment_remote";
-		struct__avm_event_powermanagment_remote [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<remote_action> enum avm_event_powermanagment_remote_action: remote_action\n(Select-Key for next union)|<param> union avm_event_powermanagment_remote_union: param\n(Select-Key used here)}"];
+		label = "struct avm_event_tffs_notify";
+		struct_avm_event_tffs_notify [fontcolor="green",shape=record,label="{ <id> uint32_t: id|<event> enum avm_event_tffs_notify_event: event}"];
 	};
-	subgraph cluster_struct__avm_event_firmware_update_available{
+	subgraph cluster_struct_avm_event_powermanagment_remote_ressourceinfo{
 		fontcolor = "red";
-		label = "struct _avm_event_firmware_update_available";
-		struct__avm_event_firmware_update_available [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<type> enum avm_event_firmware_type: type|<version_length> unsigned int: version_length|<version> unsigned char: version}"];
+		label = "struct avm_event_powermanagment_remote_ressourceinfo";
+		struct_avm_event_powermanagment_remote_ressourceinfo [fontcolor="green",shape=record,label="{ <device> enum _powermanagment_device: device|<power_rate> unsigned int: power_rate}"];
 	};
-	subgraph cluster_struct__avm_event_remotepcmlink{
+	subgraph cluster_struct_avm_event_telefon_up{
 		fontcolor = "red";
-		label = "struct _avm_event_remotepcmlink";
-		struct__avm_event_remotepcmlink [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<type> enum _avm_remotepcmlinktype: type|<sharedlen> unsigned int: sharedlen|<sharedpointer> unsigned int: sharedpointer}"];
+		label = "struct avm_event_telefon_up";
+		struct_avm_event_telefon_up [fontcolor="green",shape=record,label="{ <dummy> struct {}: dummy}"];
 	};
-	subgraph cluster_struct_avm_event_source_notifier{
+	subgraph cluster_struct_avm_event_tffs_init{
 		fontcolor = "red";
-		label = "struct avm_event_source_notifier";
-		struct_avm_event_source_notifier [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
+		label = "struct avm_event_tffs_init";
+		struct_avm_event_tffs_init [fontcolor="green",shape=record,label="{ <mem_offset> int64_t: mem_offset|<max_seg_size> uint32_t: max_seg_size}"];
 	};
-	subgraph cluster_struct__avm_event_id_mask{
+	subgraph cluster_struct_avm_event_wlan{
 		fontcolor = "red";
-		label = "struct _avm_event_id_mask";
-		struct__avm_event_id_mask [fontcolor="green",shape=record,label="{ <mask> avm_event_mask_fieldentry: mask}"];
+		label = "struct avm_event_wlan";
+		struct_avm_event_wlan [fontcolor="green",shape=record,label="{ <mac> char: mac|<u1> union avm_event_wlan_client_status_u1: u1|<event> wlan_event: event|<info> wlan_info: info|<status> enum wlan_sm_states: status|<u2> union avm_event_wlan_client_status_u2: u2|<if_name> char: if_name|<ev_initiator> unsigned int: ev_initiator|<ev_reason> unsigned int: ev_reason|<avm_capabilities> unsigned int: avm_capabilities|<u3> union avm_event_wlan_client_status_u3: u3|<credentials> struct avm_event_wlan_credentials: credentials}"];
 	};
-	subgraph cluster_struct_avm_event_powermanagment_status{
+	subgraph cluster_struct__avm_event_powerline_status{
 		fontcolor = "red";
-		label = "struct avm_event_powermanagment_status";
-		struct_avm_event_powermanagment_status [fontcolor="green",shape=record,label="{ <substatus> enum _powermanagment_status_type: substatus\n(Select-Key for next union)|<param> union __powermanagment_status_union: param\n(Select-Key used here)}"];
+		label = "struct _avm_event_powerline_status";
+		struct__avm_event_powerline_status [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<status> enum ePLCState: status}"];
 	};
-	subgraph cluster_struct__avm_event_rpc{
+	subgraph cluster_struct__avm_event_led_info{
 		fontcolor = "red";
-		label = "struct _avm_event_rpc";
-		struct__avm_event_rpc [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<type> enum _avm_rpctype: type|<id> unsigned int: id|<length> unsigned int: length|<message> unsigned char: message}"];
+		label = "struct _avm_event_led_info";
+		struct__avm_event_led_info [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<mode> unsigned int: mode|<param1> unsigned int: param1|<param2> unsigned int: param2|<gpio_driver_type> unsigned int: gpio_driver_type|<gpio> unsigned int: gpio|<pos> unsigned int: pos|<name> char: name}"];
 	};
-	subgraph cluster_struct_avm_event_wlan{
+	subgraph cluster_struct_avm_event_led_status{
 		fontcolor = "red";
-		label = "struct avm_event_wlan";
-		struct_avm_event_wlan [fontcolor="green",shape=record,label="{ <mac> char: mac|<u1> union avm_event_wlan_client_status_u1: u1|<event> wlan_event: event|<info> wlan_info: info|<status> enum wlan_sm_states: status|<u2> union avm_event_wlan_client_status_u2: u2|<if_name> char: if_name|<ev_initiator> unsigned int: ev_initiator|<ev_reason> unsigned int: ev_reason|<avm_capabilities> unsigned int: avm_capabilities|<u3> union avm_event_wlan_client_status_u3: u3|<credentials> struct avm_event_wlan_credentials: credentials}"];
+		label = "struct avm_event_led_status";
+		struct_avm_event_led_status [fontcolor="green",shape=record,label="{ <led> enum _led_event: led|<state> unsigned int: state|<param_len> unsigned int: param_len|<params> unsigned char: params}"];
 	};
-	subgraph cluster_struct_avm_event_telephony_missed_call{
+	subgraph cluster_struct_avm_event_fax_status{
 		fontcolor = "red";
-		label = "struct avm_event_telephony_missed_call";
-		struct_avm_event_telephony_missed_call [fontcolor="green",shape=record,label="{ <length> unsigned int: length|<p> struct _avm_event_telephony_missed_call_params: p}"];
+		label = "struct avm_event_fax_status";
+		struct_avm_event_fax_status [fontcolor="green",shape=record,label="{ <fax_receive_mode> enum fax_receive_mode: fax_receive_mode|<fax_storage_dest> enum fax_storage_dest: fax_storage_dest|<dirname_length> unsigned int: dirname_length|<dirname> unsigned char: dirname}"];
 	};
-	subgraph cluster_struct_avm_event_telefon_up{
+	subgraph cluster_struct__avm_event_checkpoint{
 		fontcolor = "red";
-		label = "struct avm_event_telefon_up";
-		struct_avm_event_telefon_up [fontcolor="green",shape=record,label="{ <dummy> struct {}: dummy}"];
+		label = "struct _avm_event_checkpoint";
+		struct__avm_event_checkpoint [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<node_id> uint32_t: node_id|<checkpoints> uint64_t: checkpoints}"];
 	};
-	subgraph cluster_struct__avm_event_cmd{
+	subgraph cluster_struct__avm_event_remotepcmlink{
 		fontcolor = "red";
-		label = "struct _avm_event_cmd";
-		struct__avm_event_cmd [fontcolor="green",shape=record,label="{ <cmd> enum __avm_event_cmd: cmd|<param> union _avm_event_cmd_param: param}"];
+		label = "struct _avm_event_remotepcmlink";
+		struct__avm_event_remotepcmlink [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<type> enum _avm_remotepcmlinktype: type|<sharedlen> unsigned int: sharedlen|<sharedpointer> unsigned int: sharedpointer}"];
 	};
 	subgraph cluster_struct__avm_event_wlan{
 		fontcolor = "red";
 		label = "struct _avm_event_wlan";
 		struct__avm_event_wlan [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<mac> char: mac|<u1> unsigned int: u1|<event> unsigned int: event|<info> unsigned int: info|<status> unsigned int: status|<u2> unsigned int: u2|<if_name> char: if_name|<ev_initiator> unsigned int: ev_initiator|<ev_reason> unsigned int: ev_reason|<avm_capabilities> unsigned int: avm_capabilities|<u3> unsigned int: u3|<credentials> struct avm_event_wlan_credentials: credentials}"];
 	};
-	subgraph cluster_struct_avm_event_powermanagment_remote_ressourceinfo{
+	subgraph cluster_struct_avm_event_boykott{
 		fontcolor = "red";
-		label = "struct avm_event_powermanagment_remote_ressourceinfo";
-		struct_avm_event_powermanagment_remote_ressourceinfo [fontcolor="green",shape=record,label="{ <device> enum _powermanagment_device: device|<power_rate> unsigned int: power_rate}"];
+		label = "struct avm_event_boykott";
+		struct_avm_event_boykott [fontcolor="green",shape=record,label="{ <dummy> struct {}: dummy}"];
 	};
-	subgraph cluster_struct_avm_event_ambient_brightness{
+	subgraph cluster_struct_cpmac_port{
 		fontcolor = "red";
-		label = "struct avm_event_ambient_brightness";
-		struct_avm_event_ambient_brightness [fontcolor="green",shape=record,label="{ <value> unsigned int: value|<maxvalue> unsigned int: maxvalue}"];
+		label = "struct cpmac_port";
+		struct_cpmac_port [fontcolor="green",shape=record,label="{ <cable> uint8_t: cable|<link> uint8_t: link|<speed100> uint8_t: speed100|<fullduplex> uint8_t: fullduplex|<speed> enum _avm_event_ethernet_speed: speed|<maxspeed> enum _avm_event_ethernet_speed: maxspeed}"];
+	};
+	subgraph cluster_struct_avm_event_tffs_info{
+		fontcolor = "red";
+		label = "struct avm_event_tffs_info";
+		struct_avm_event_tffs_info [fontcolor="green",shape=record,label="{ <fill_level> uint32_t: fill_level}"];
 	};
 	subgraph cluster_struct__avm_event_powermanagment_remote_ressourceinfo{
 		fontcolor = "red";
 		label = "struct _avm_event_powermanagment_remote_ressourceinfo";
 		struct__avm_event_powermanagment_remote_ressourceinfo [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<device> enum _powermanagment_device: device|<power_rate> unsigned int: power_rate}"];
 	};
-	subgraph cluster_struct_avm_event_firmware_update_available{
+	subgraph cluster_struct_avm_event_remote_source_trigger_request{
 		fontcolor = "red";
-		label = "struct avm_event_firmware_update_available";
-		struct_avm_event_firmware_update_available [fontcolor="green",shape=record,label="{ <type> enum avm_event_firmware_type: type|<version_length> unsigned int: version_length|<version> unsigned char: version}"];
+		label = "struct avm_event_remote_source_trigger_request";
+		struct_avm_event_remote_source_trigger_request [fontcolor="green",shape=record,label="{ <data> struct avm_event_data: data}"];
 	};
-	subgraph cluster_struct__avm_event_push_button{
+	subgraph cluster_struct__cpmac_event_struct{
 		fontcolor = "red";
-		label = "struct _avm_event_push_button";
-		struct__avm_event_push_button [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id|<key> enum _avm_event_push_button_key: key|<pressed> uint32_t: pressed}"];
+		label = "struct _cpmac_event_struct";
+		struct__cpmac_event_struct [fontcolor="green",shape=record,label="{ <ports> unsigned int: ports|<port> struct cpmac_port: port}"];
 	};
-	subgraph cluster_struct_cpmac_port{
+	subgraph cluster_struct_avm_event_powermanagment_status{
 		fontcolor = "red";
-		label = "struct cpmac_port";
-		struct_cpmac_port [fontcolor="green",shape=record,label="{ <cable> uint8_t: cable|<link> uint8_t: link|<speed100> uint8_t: speed100|<fullduplex> uint8_t: fullduplex|<speed> enum _avm_event_ethernet_speed: speed|<maxspeed> enum _avm_event_ethernet_speed: maxspeed}"];
+		label = "struct avm_event_powermanagment_status";
+		struct_avm_event_powermanagment_status [fontcolor="green",shape=record,label="{ <substatus> enum _powermanagment_status_type: substatus\n(Select-Key for next union)|<param> union __powermanagment_status_union: param\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct_wlan_event_data_scan_event_info{
+	subgraph cluster_struct__avm_event_powermanagment_remote{
 		fontcolor = "red";
-		label = "struct wlan_event_data_scan_event_info";
-		struct_wlan_event_data_scan_event_info [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_scan_common: common|<event_type> enum wlan_event_scan_type: event_type}"];
+		label = "struct _avm_event_powermanagment_remote";
+		struct__avm_event_powermanagment_remote [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<remote_action> enum avm_event_powermanagment_remote_action: remote_action\n(Select-Key for next union)|<param> union avm_event_powermanagment_remote_union: param\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct__avm_event_telephony_missed_call{
+	subgraph cluster_struct__avm_event_ambient_brightness{
 		fontcolor = "red";
-		label = "struct _avm_event_telephony_missed_call";
-		struct__avm_event_telephony_missed_call [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<length> unsigned int: length|<p> struct _avm_event_telephony_missed_call_params: p}"];
+		label = "struct _avm_event_ambient_brightness";
+		struct__avm_event_ambient_brightness [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<value> unsigned int: value|<maxvalue> unsigned int: maxvalue}"];
 	};
-	subgraph cluster_struct__avm_event_cmd_param_release{
+	subgraph cluster_struct_avm_event_telephony_missed_call{
 		fontcolor = "red";
-		label = "struct _avm_event_cmd_param_release";
-		struct__avm_event_cmd_param_release [fontcolor="green",shape=record,label="{ <Name> char: Name}"];
+		label = "struct avm_event_telephony_missed_call";
+		struct_avm_event_telephony_missed_call [fontcolor="green",shape=record,label="{ <length> unsigned int: length|<p> struct _avm_event_telephony_missed_call_params: p}"];
 	};
-	subgraph cluster_struct_avm_event_source_register{
+	subgraph cluster_struct_avm_event_rpc{
 		fontcolor = "red";
-		label = "struct avm_event_source_register";
-		struct_avm_event_source_register [fontcolor="green",shape=record,label="{ <id_mask> struct _avm_event_id_mask: id_mask|<name> char: name}"];
+		label = "struct avm_event_rpc";
+		struct_avm_event_rpc [fontcolor="green",shape=record,label="{ <type> enum _avm_rpctype: type|<id> unsigned int: id|<length> unsigned int: length|<message> unsigned char: message}"];
 	};
-	subgraph cluster_struct__avm_event_cpu_run{
+	subgraph cluster_struct__avm_event_fax_status{
 		fontcolor = "red";
-		label = "struct _avm_event_cpu_run";
-		struct__avm_event_cpu_run [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<cputype> enum _cputype: cputype|<cpu_run> unsigned char: cpu_run}"];
+		label = "struct _avm_event_fax_status";
+		struct__avm_event_fax_status [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<fax_receive_mode> enum fax_receive_mode: fax_receive_mode|<fax_storage_dest> enum fax_storage_dest: fax_storage_dest|<dirname_length> unsigned int: dirname_length|<dirname> unsigned char: dirname}"];
 	};
-	subgraph cluster_struct__avm_event_log{
+	subgraph cluster_struct__avm_event_mass_storage_unmount{
 		fontcolor = "red";
-		label = "struct _avm_event_log";
-		struct__avm_event_log [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<logtype> enum _avm_logtype: logtype|<loglen> unsigned int: loglen|<logpointer> unsigned int: logpointer|<checksum> unsigned int: checksum|<rebootflag> unsigned int: rebootflag}"];
+		label = "struct _avm_event_mass_storage_unmount";
+		struct__avm_event_mass_storage_unmount [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<name_length> unsigned int: name_length|<name> unsigned char: name}"];
 	};
 	subgraph cluster_struct__avm_event_internet_new_ip{
 		fontcolor = "red";
 		label = "struct _avm_event_internet_new_ip";
 		struct__avm_event_internet_new_ip [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<sel> enum avm_event_internet_new_ip_param_sel: sel\n(Select-Key for next union)|<params> union avm_event_internet_new_ip_param: params\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct__avm_event_header{
+	subgraph cluster_struct_avm_event_temperature{
 		fontcolor = "red";
-		label = "struct _avm_event_header";
-		struct__avm_event_header [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
+		label = "struct avm_event_temperature";
+		struct_avm_event_temperature [fontcolor="green",shape=record,label="{ <temperature> int: temperature}"];
 	};
-	subgraph cluster_struct_wlan_event_data_scan_common{
+	subgraph cluster_struct_avm_event_tffs_paniclog{
 		fontcolor = "red";
-		label = "struct wlan_event_data_scan_common";
-		struct_wlan_event_data_scan_common [fontcolor="green",shape=record,label="{ <iface> char: iface|<initiator> char: initiator}"];
+		label = "struct avm_event_tffs_paniclog";
+		struct_avm_event_tffs_paniclog [fontcolor="green",shape=record,label="{ <buff_addr> uint64_t: buff_addr|<len> uint64_t: len|<crc> int32_t: crc}"];
 	};
-	subgraph cluster_struct__avm_event_checkpoint{
+	subgraph cluster_struct_avm_event_source_register{
 		fontcolor = "red";
-		label = "struct _avm_event_checkpoint";
-		struct__avm_event_checkpoint [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<node_id> uint32_t: node_id|<checkpoints> uint64_t: checkpoints}"];
+		label = "struct avm_event_source_register";
+		struct_avm_event_source_register [fontcolor="green",shape=record,label="{ <id_mask> struct _avm_event_id_mask: id_mask|<name> char: name}"];
 	};
-	subgraph cluster_struct_avm_event_tffs{
+	subgraph cluster_struct__avm_event_rpc{
 		fontcolor = "red";
-		label = "struct avm_event_tffs";
-		struct_avm_event_tffs [fontcolor="green",shape=record,label="{ <src_id> uint32_t: src_id|<dst_id> uint32_t: dst_id|<seq_nr> uint32_t: seq_nr|<ack> uint32_t: ack|<srv_handle> uint64_t: srv_handle|<clt_handle> uint64_t: clt_handle|<result> int32_t: result|<type> enum avm_event_tffs_call_type: type\n(Select-Key for next union)|<call> union avm_event_tffs_call_union: call\n(Select-Key used here)}"];
+		label = "struct _avm_event_rpc";
+		struct__avm_event_rpc [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<type> enum _avm_rpctype: type|<id> unsigned int: id|<length> unsigned int: length|<message> unsigned char: message}"];
 	};
-	subgraph cluster_struct_avm_event_ping{
+	subgraph cluster_struct_avm_event_internet_new_ip{
 		fontcolor = "red";
-		label = "struct avm_event_ping";
-		struct_avm_event_ping [fontcolor="green",shape=record,label="{ <seq> uint32_t: seq}"];
+		label = "struct avm_event_internet_new_ip";
+		struct_avm_event_internet_new_ip [fontcolor="green",shape=record,label="{ <sel> enum avm_event_internet_new_ip_param_sel: sel\n(Select-Key for next union)|<params> union avm_event_internet_new_ip_param: params\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct_avm_event_powerline_status{
+	subgraph cluster_struct_avm_event_remotewatchdog{
 		fontcolor = "red";
-		label = "struct avm_event_powerline_status";
-		struct_avm_event_powerline_status [fontcolor="green",shape=record,label="{ <status> enum ePLCState: status}"];
+		label = "struct avm_event_remotewatchdog";
+		struct_avm_event_remotewatchdog [fontcolor="green",shape=record,label="{ <cmd> enum _avm_remote_wdt_cmd: cmd|<name> char: name|<param> unsigned int: param}"];
 	};
-	subgraph cluster_struct_avm_event_rpc{
+	subgraph cluster_struct_avm_event_tffs{
 		fontcolor = "red";
-		label = "struct avm_event_rpc";
-		struct_avm_event_rpc [fontcolor="green",shape=record,label="{ <type> enum _avm_rpctype: type|<id> unsigned int: id|<length> unsigned int: length|<message> unsigned char: message}"];
+		label = "struct avm_event_tffs";
+		struct_avm_event_tffs [fontcolor="green",shape=record,label="{ <src_id> uint32_t: src_id|<dst_id> uint32_t: dst_id|<seq_nr> uint32_t: seq_nr|<ack> uint32_t: ack|<srv_handle> uint64_t: srv_handle|<clt_handle> uint64_t: clt_handle|<result> int32_t: result|<type> enum avm_event_tffs_call_type: type\n(Select-Key for next union)|<call> union avm_event_tffs_call_union: call\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct_avm_event_cpu_idle{
+	subgraph cluster_struct_avm_event_ambient_brightness{
 		fontcolor = "red";
-		label = "struct avm_event_cpu_idle";
-		struct_avm_event_cpu_idle [fontcolor="green",shape=record,label="{ <cpu_idle> unsigned char: cpu_idle|<dsl_dsp_idle> unsigned char: dsl_dsp_idle|<voice_dsp_idle> unsigned char: voice_dsp_idle|<mem_strictlyused> unsigned char: mem_strictlyused|<mem_cacheused> unsigned char: mem_cacheused|<mem_physfree> unsigned char: mem_physfree|<cputype> enum _cputype: cputype}"];
+		label = "struct avm_event_ambient_brightness";
+		struct_avm_event_ambient_brightness [fontcolor="green",shape=record,label="{ <value> unsigned int: value|<maxvalue> unsigned int: maxvalue}"];
 	};
-	subgraph cluster_struct_wlan_event_data_client_common{
+	subgraph cluster_struct_avm_event_fax_file{
 		fontcolor = "red";
-		label = "struct wlan_event_data_client_common";
-		struct_wlan_event_data_client_common [fontcolor="green",shape=record,label="{ <mac> uint8_t: mac|<iface> char: iface|<initiator> char: initiator}"];
+		label = "struct avm_event_fax_file";
+		struct_avm_event_fax_file [fontcolor="green",shape=record,label="{ <action> enum fax_file_event_type: action|<date> time_t: date}"];
 	};
-	subgraph cluster_struct_avm_event_pm_info_stat{
+	subgraph cluster_struct_wlan_event_def{
 		fontcolor = "red";
-		label = "struct avm_event_pm_info_stat";
-		struct_avm_event_pm_info_stat [fontcolor="green",shape=record,label="{ <reserved1> unsigned char: reserved1|<rate_sumact> unsigned char: rate_sumact|<rate_sumcum> unsigned char: rate_sumcum|<rate_systemact> unsigned char: rate_systemact|<rate_systemcum> unsigned char: rate_systemcum|<system_status> unsigned char: system_status|<rate_dspact> unsigned char: rate_dspact|<rate_dspcum> unsigned char: rate_dspcum|<rate_wlanact> unsigned char: rate_wlanact|<rate_wlancum> unsigned char: rate_wlancum|<wlan_devices> unsigned char: wlan_devices|<wlan_status> unsigned char: wlan_status|<rate_ethact> unsigned char: rate_ethact|<rate_ethcum> unsigned char: rate_ethcum|<eth_status> unsigned short: eth_status|<rate_abact> unsigned char: rate_abact|<rate_abcum> unsigned char: rate_abcum|<isdn_status> unsigned short: isdn_status|<rate_dectact> unsigned char: rate_dectact|<rate_dectcum> unsigned char: rate_dectcum|<rate_battchargeact> unsigned char: rate_battchargeact|<rate_battchargecum> unsigned char: rate_battchargecum|<dect_status> unsigned char: dect_status|<rate_usbhostact> unsigned char: rate_usbhostact|<rate_usbhostcum> unsigned char: rate_usbhostcum|<usb_status> unsigned char: usb_status|<act_temperature> signed char: act_temperature|<min_temperature> signed char: min_temperature|<max_temperature> signed char: max_temperature|<avg_temperature> signed char: avg_temperature|<rate_lteact> unsigned char: rate_lteact|<rate_ltecum> unsigned char: rate_ltecum|<rate_dvbcact> unsigned char: rate_dvbcact|<rate_dvbccum> unsigned char: rate_dvbccum}"];
+		label = "struct wlan_event_def";
+		struct_wlan_event_def [fontcolor="green",shape=record,label="{ <event_id> enum wlan_event_id: event_id\n(Select-Key for next union)|<event_data> union wlan_event_data: event_data\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct__avm_event_powerline_status{
+	subgraph cluster_struct__avm_event_log{
 		fontcolor = "red";
-		label = "struct _avm_event_powerline_status";
-		struct__avm_event_powerline_status [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<status> enum ePLCState: status}"];
+		label = "struct _avm_event_log";
+		struct__avm_event_log [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<logtype> enum _avm_logtype: logtype|<loglen> unsigned int: loglen|<logpointer> unsigned int: logpointer|<checksum> unsigned int: checksum|<rebootflag> unsigned int: rebootflag}"];
 	};
-	subgraph cluster_struct_wlan_event_data_client_state_change{
+	subgraph cluster_struct_avm_event_cpu_run{
 		fontcolor = "red";
-		label = "struct wlan_event_data_client_state_change";
-		struct_wlan_event_data_client_state_change [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_client_common: common|<state> uint8_t: state}"];
+		label = "struct avm_event_cpu_run";
+		struct_avm_event_cpu_run [fontcolor="green",shape=record,label="{ <cputype> enum _cputype: cputype|<cpu_run> unsigned char: cpu_run}"];
 	};
-	subgraph cluster_struct_avm_event_temperature{
+	subgraph cluster_struct_avm_event_powermanagment_remote{
 		fontcolor = "red";
-		label = "struct avm_event_temperature";
-		struct_avm_event_temperature [fontcolor="green",shape=record,label="{ <temperature> int: temperature}"];
+		label = "struct avm_event_powermanagment_remote";
+		struct_avm_event_powermanagment_remote [fontcolor="green",shape=record,label="{ <remote_action> enum avm_event_powermanagment_remote_action: remote_action\n(Select-Key for next union)|<param> union avm_event_powermanagment_remote_union: param\n(Select-Key used here)}"];
 	};
-	subgraph cluster_struct_avm_event_user_mode_source_notify{
+	subgraph cluster_struct_wlan_event_data_radio_recovery{
 		fontcolor = "red";
-		label = "struct avm_event_user_mode_source_notify";
-		struct_avm_event_user_mode_source_notify [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
+		label = "struct wlan_event_data_radio_recovery";
+		struct_wlan_event_data_radio_recovery [fontcolor="green",shape=record,label="{ <radio_id> int: radio_id|<state> enum wlan_event_radio_recovery_state: state}"];
 	};
-	subgraph cluster_struct_avm_event_mass_storage_unmount{
+	subgraph cluster_struct__avm_event_cmd{
 		fontcolor = "red";
-		label = "struct avm_event_mass_storage_unmount";
-		struct_avm_event_mass_storage_unmount [fontcolor="green",shape=record,label="{ <name_length> unsigned int: name_length|<name> unsigned char: name}"];
+		label = "struct _avm_event_cmd";
+		struct__avm_event_cmd [fontcolor="green",shape=record,label="{ <cmd> enum __avm_event_cmd: cmd|<param> union _avm_event_cmd_param: param}"];
+	};
+	subgraph cluster_struct_avm_event_wlan_power{
+		fontcolor = "red";
+		label = "struct avm_event_wlan_power";
+		struct_avm_event_wlan_power [fontcolor="green",shape=record,label="{ <power> unsigned int: power}"];
 	};
 	subgraph cluster_struct_avm_event_log{
 		fontcolor = "red";
 		label = "struct avm_event_log";
 		struct_avm_event_log [fontcolor="green",shape=record,label="{ <logtype> enum _avm_logtype: logtype|<loglen> unsigned int: loglen|<logpointer> unsigned int: logpointer|<checksum> unsigned int: checksum|<rebootflag> unsigned int: rebootflag}"];
 	};
-	subgraph cluster_struct_avm_event_led_info{
-		fontcolor = "red";
-		label = "struct avm_event_led_info";
-		struct_avm_event_led_info [fontcolor="green",shape=record,label="{ <mode> unsigned int: mode|<param1> unsigned int: param1|<param2> unsigned int: param2|<gpio_driver_type> unsigned int: gpio_driver_type|<gpio> unsigned int: gpio|<pos> unsigned int: pos|<name> char: name}"];
-	};
-	subgraph cluster_struct_avm_event_tffs_paniclog{
+	subgraph cluster_struct_avm_event_tffs_write{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_paniclog";
-		struct_avm_event_tffs_paniclog [fontcolor="green",shape=record,label="{ <buff_addr> uint64_t: buff_addr|<len> uint64_t: len|<crc> int32_t: crc}"];
+		label = "struct avm_event_tffs_write";
+		struct_avm_event_tffs_write [fontcolor="green",shape=record,label="{ <buff_addr> uint64_t: buff_addr|<len> uint64_t: len|<id> uint32_t: id|<final> uint32_t: final|<crc> int32_t: crc}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_init{
+	subgraph cluster_struct_avm_event_source_unregister{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_init";
-		struct_avm_event_tffs_init [fontcolor="green",shape=record,label="{ <mem_offset> int64_t: mem_offset|<max_seg_size> uint32_t: max_seg_size}"];
+		label = "struct avm_event_source_unregister";
+		struct_avm_event_source_unregister [fontcolor="green",shape=record,label="{ <id_mask> struct _avm_event_id_mask: id_mask|<name> char: name}"];
 	};
-	subgraph cluster_struct__avm_event_cmd_param_register{
+	subgraph cluster_struct_avm_event_tffs_deinit{
 		fontcolor = "red";
-		label = "struct _avm_event_cmd_param_register";
-		struct__avm_event_cmd_param_register [fontcolor="green",shape=record,label="{ <mask> struct _avm_event_id_mask: mask|<Name> char: Name}"];
+		label = "struct avm_event_tffs_deinit";
+		struct_avm_event_tffs_deinit [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
 	};
-	subgraph cluster_struct_avm_event_smarthome{
+	subgraph cluster_struct_avm_event_source_notifier{
 		fontcolor = "red";
-		label = "struct avm_event_smarthome";
-		struct_avm_event_smarthome [fontcolor="green",shape=record,label="{ <length> uint16_t: length|<ident> char: ident|<type> uint16_t: type|<payload> struct {}: payload}"];
+		label = "struct avm_event_source_notifier";
+		struct_avm_event_source_notifier [fontcolor="green",shape=record,label="{ <id> enum _avm_event_id: id}"];
 	};
-	subgraph cluster_struct__avm_event_user_mode_source_notify{
+	subgraph cluster_struct__avm_event_led_status{
 		fontcolor = "red";
-		label = "struct _avm_event_user_mode_source_notify";
-		struct__avm_event_user_mode_source_notify [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<id> enum _avm_event_id: id}"];
+		label = "struct _avm_event_led_status";
+		struct__avm_event_led_status [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<led> enum _led_event: led|<state> unsigned int: state|<param_len> unsigned int: param_len|<params> unsigned char: params}"];
 	};
-	subgraph cluster_struct_avm_event_tffs_write{
+	subgraph cluster_struct_avm_event_unserialised{
 		fontcolor = "red";
-		label = "struct avm_event_tffs_write";
-		struct_avm_event_tffs_write [fontcolor="green",shape=record,label="{ <buff_addr> uint64_t: buff_addr|<len> uint64_t: len|<id> uint32_t: id|<final> uint32_t: final|<crc> int32_t: crc}"];
+		label = "struct avm_event_unserialised";
+		struct_avm_event_unserialised [fontcolor="green",shape=record,label="{ <evnt_id> uint64_t: evnt_id|<data_len> uint32_t: data_len|<data> unsigned char: data}"];
 	};
-	subgraph cluster_struct_avm_event_cpu_run{
+	subgraph cluster_struct_avm_event_telefonprofile{
 		fontcolor = "red";
-		label = "struct avm_event_cpu_run";
-		struct_avm_event_cpu_run [fontcolor="green",shape=record,label="{ <cputype> enum _cputype: cputype|<cpu_run> unsigned char: cpu_run}"];
+		label = "struct avm_event_telefonprofile";
+		struct_avm_event_telefonprofile [fontcolor="green",shape=record,label="{ <on> unsigned int: on}"];
 	};
-	subgraph cluster_struct__avm_event_telephony_missed_call_params{
+	subgraph cluster_struct_avm_event_tffs_close{
 		fontcolor = "red";
-		label = "struct _avm_event_telephony_missed_call_params";
-		struct__avm_event_telephony_missed_call_params [fontcolor="green",shape=record,label="{ <id> enum avm_event_telephony_param_sel: id\n(Select-Key for next union)|<params> union avm_event_telephony_call_params: params\n(Select-Key used here)}"];
+		label = "struct avm_event_tffs_close";
+		struct_avm_event_tffs_close [fontcolor="green",shape=record,label="{ <dummy> uint32_t: dummy}"];
 	};
-	subgraph cluster_struct_avm_event_wlan_power{
+	subgraph cluster_struct_avm_event_smarthome_switch_status{
 		fontcolor = "red";
-		label = "struct avm_event_wlan_power";
-		struct_avm_event_wlan_power [fontcolor="green",shape=record,label="{ <power> unsigned int: power}"];
+		label = "struct avm_event_smarthome_switch_status";
+		struct_avm_event_smarthome_switch_status [fontcolor="green",shape=record,label="{ <type> enum avm_event_switch_type: type|<value> unsigned int: value|<ain_length> unsigned int: ain_length|<ain> unsigned char: ain}"];
 	};
-	subgraph cluster_struct_cpmac_event_struct{
+	subgraph cluster_struct_wlan_event_data_client_state_change{
 		fontcolor = "red";
-		label = "struct cpmac_event_struct";
-		struct_cpmac_event_struct [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<ports> unsigned int: ports|<port> struct cpmac_port: port}"];
+		label = "struct wlan_event_data_client_state_change";
+		struct_wlan_event_data_client_state_change [fontcolor="green",shape=record,label="{ <common> struct wlan_event_data_client_common: common|<state> uint8_t: state}"];
 	};
-	subgraph cluster_struct__avm_event_temperature{
+	subgraph cluster_struct__avm_event_remotewatchdog{
 		fontcolor = "red";
-		label = "struct _avm_event_temperature";
-		struct__avm_event_temperature [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<temperature> int: temperature}"];
+		label = "struct _avm_event_remotewatchdog";
+		struct__avm_event_remotewatchdog [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<cmd> enum _avm_remote_wdt_cmd: cmd|<name> char: name|<param> unsigned int: param}"];
 	};
-	subgraph cluster_struct__avm_event_powermanagment_status{
+	subgraph cluster_struct__avm_event_firmware_update_available{
 		fontcolor = "red";
-		label = "struct _avm_event_powermanagment_status";
-		struct__avm_event_powermanagment_status [fontcolor="green",shape=record,label="{ <event_header> struct _avm_event_header: event_header|<substatus> enum _powermanagment_status_type: substatus\n(Select-Key for next union)|<param> union __powermanagment_status_union: param\n(Select-Key used here)}"];
+		label = "struct _avm_event_firmware_update_available";
+		struct__avm_event_firmware_update_available [fontcolor="green",shape=record,label="{ <header> struct _avm_event_header: header|<type> enum avm_event_firmware_type: type|<version_length> unsigned int: version_length|<version> unsigned char: version}"];
 	};
 	subgraph cluster_union_avm_event_powermanagment_remote_union{
 		fontcolor = "red";
@@ -537,20 +537,25 @@
 		label = "union _avm_event_cmd_param";
 		union__avm_event_cmd_param [shape=record,fontcolor="blue",label="{ <avm_event_cmd_param_register> struct _avm_event_cmd_param_register: avm_event_cmd_param_register|<avm_event_cmd_param_release> struct _avm_event_cmd_param_release: avm_event_cmd_param_release|<avm_event_cmd_param_trigger> struct _avm_event_cmd_param_trigger: avm_event_cmd_param_trigger|<avm_event_cmd_param_source_register> struct _avm_event_cmd_param_register: avm_event_cmd_param_source_register|<avm_event_cmd_param_source_trigger> struct _avm_event_cmd_param_source_trigger: avm_event_cmd_param_source_trigger}"];
 	};
-	subgraph cluster_union_avm_event_wlan_client_status_u1{
+	subgraph cluster_union_avm_event_message_union{
 		fontcolor = "red";
-		label = "union avm_event_wlan_client_status_u1";
-		union_avm_event_wlan_client_status_u1 [shape=record,fontcolor="blue",label="{ <sub_event> unsigned int: sub_event|<active_rate> unsigned int: active_rate|<active_rate1> unsigned int: active_rate1|<active_rate2> unsigned int: active_rate2|<active_rate3> unsigned int: active_rate3|<active_rate4> unsigned int: active_rate4|<active_rate5> unsigned int: active_rate5|<active_rate6> unsigned int: active_rate6|<radar_chan> unsigned int: radar_chan|<radar_chan1> unsigned int: radar_chan1|<green_ap_ps_state> unsigned int: green_ap_ps_state|<coexist_ht40_state> unsigned int: coexist_ht40_state|<max_node_count> unsigned int: max_node_count|<channel> unsigned int: channel|<dummy0> unsigned int: dummy0}"];
+		label = "union avm_event_message_union";
+		union_avm_event_message_union [shape=record,fontcolor="blue",label="{ <source_register> struct avm_event_source_register: source_register|<source_unregister> struct avm_event_source_unregister: source_unregister|<source_notifier> struct avm_event_source_notifier: source_notifier|<remote_source_trigger_request> struct avm_event_remote_source_trigger_request: remote_source_trigger_request|<ping> struct avm_event_ping: ping|<tffs> struct avm_event_tffs: tffs}"];
 	};
 	subgraph cluster_union_avm_event_internet_new_ip_param{
 		fontcolor = "red";
 		label = "union avm_event_internet_new_ip_param";
 		union_avm_event_internet_new_ip_param [shape=record,fontcolor="blue",label="{ <ipv4> unsigned char: ipv4|<ipv6> unsigned char: ipv6}"];
 	};
-	subgraph cluster_union_wlan_event_data{
+	subgraph cluster_union_avm_event_wlan_client_status_u2{
 		fontcolor = "red";
-		label = "union wlan_event_data";
-		union_wlan_event_data [shape=record,fontcolor="blue",label="{ <client_state_change> struct wlan_event_data_client_state_change: client_state_change|<client_connect_info> struct wlan_event_data_client_connect_info: client_connect_info|<scan_event_info> struct wlan_event_data_scan_event_info: scan_event_info|<client_state_idle> struct wlan_event_data_client_state_idle: client_state_idle|<radio_recovery> struct wlan_event_data_radio_recovery: radio_recovery}"];
+		label = "union avm_event_wlan_client_status_u2";
+		union_avm_event_wlan_client_status_u2 [shape=record,fontcolor="blue",label="{ <radar_freq> unsigned int: radar_freq|<radar_freq1> unsigned int: radar_freq1|<wlan_mode> unsigned int: wlan_mode|<dummy0> unsigned int: dummy0}"];
+	};
+	subgraph cluster_union___powermanagment_status_union{
+		fontcolor = "red";
+		label = "union __powermanagment_status_union";
+		union___powermanagment_status_union [shape=record,fontcolor="blue",label="{ <dsl_status> unsigned int: dsl_status}"];
 	};
 	subgraph cluster_union_avm_event_telephony_call_params{
 		fontcolor = "red";
@@ -562,85 +567,80 @@
 		label = "union avm_event_tffs_call_union";
 		union_avm_event_tffs_call_union [shape=record,fontcolor="blue",label="{ <open> struct avm_event_tffs_open: open|<close> struct avm_event_tffs_close: close|<read> struct avm_event_tffs_read: read|<write> struct avm_event_tffs_write: write|<cleanup> struct avm_event_tffs_cleanup: cleanup|<reindex> struct avm_event_tffs_reindex: reindex|<info> struct avm_event_tffs_info: info|<init> struct avm_event_tffs_init: init|<deinit> struct avm_event_tffs_deinit: deinit|<notify> struct avm_event_tffs_notify: notify|<paniclog> struct avm_event_tffs_paniclog: paniclog}"];
 	};
+	subgraph cluster_union_wlan_event_data{
+		fontcolor = "red";
+		label = "union wlan_event_data";
+		union_wlan_event_data [shape=record,fontcolor="blue",label="{ <client_state_change> struct wlan_event_data_client_state_change: client_state_change|<client_connect_info> struct wlan_event_data_client_connect_info: client_connect_info|<scan_event_info> struct wlan_event_data_scan_event_info: scan_event_info|<client_state_idle> struct wlan_event_data_client_state_idle: client_state_idle|<radio_recovery> struct wlan_event_data_radio_recovery: radio_recovery}"];
+	};
 	subgraph cluster_union_avm_event_wlan_client_status_u3{
 		fontcolor = "red";
 		label = "union avm_event_wlan_client_status_u3";
 		union_avm_event_wlan_client_status_u3 [shape=record,fontcolor="blue",label="{ <radar_time> unsigned int: radar_time|<dummy0> unsigned int: dummy0}"];
 	};
-	subgraph cluster_union_avm_event_wlan_client_status_u2{
-		fontcolor = "red";
-		label = "union avm_event_wlan_client_status_u2";
-		union_avm_event_wlan_client_status_u2 [shape=record,fontcolor="blue",label="{ <radar_freq> unsigned int: radar_freq|<radar_freq1> unsigned int: radar_freq1|<wlan_mode> unsigned int: wlan_mode|<dummy0> unsigned int: dummy0}"];
-	};
-	subgraph cluster_union___powermanagment_status_union{
-		fontcolor = "red";
-		label = "union __powermanagment_status_union";
-		union___powermanagment_status_union [shape=record,fontcolor="blue",label="{ <dsl_status> unsigned int: dsl_status}"];
-	};
-	subgraph cluster_union_avm_event_message_union{
+	subgraph cluster_union_avm_event_wlan_client_status_u1{
 		fontcolor = "red";
-		label = "union avm_event_message_union";
-		union_avm_event_message_union [shape=record,fontcolor="blue",label="{ <source_register> struct avm_event_source_register: source_register|<source_unregister> struct avm_event_source_unregister: source_unregister|<source_notifier> struct avm_event_source_notifier: source_notifier|<remote_source_trigger_request> struct avm_event_remote_source_trigger_request: remote_source_trigger_request|<ping> struct avm_event_ping: ping|<tffs> struct avm_event_tffs: tffs}"];
+		label = "union avm_event_wlan_client_status_u1";
+		union_avm_event_wlan_client_status_u1 [shape=record,fontcolor="blue",label="{ <sub_event> unsigned int: sub_event|<active_rate> unsigned int: active_rate|<active_rate1> unsigned int: active_rate1|<active_rate2> unsigned int: active_rate2|<active_rate3> unsigned int: active_rate3|<active_rate4> unsigned int: active_rate4|<active_rate5> unsigned int: active_rate5|<active_rate6> unsigned int: active_rate6|<radar_chan> unsigned int: radar_chan|<radar_chan1> unsigned int: radar_chan1|<green_ap_ps_state> unsigned int: green_ap_ps_state|<coexist_ht40_state> unsigned int: coexist_ht40_state|<max_node_count> unsigned int: max_node_count|<channel> unsigned int: channel|<dummy0> unsigned int: dummy0}"];
 	};
+	struct__avm_event_telephony_missed_call:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_telephony_missed_call:p -> struct__avm_event_telephony_missed_call_params [lhead=cluster_struct__avm_event_telephony_missed_call_params];
+	struct_wlan_event_data_client_connect_info:common -> struct_wlan_event_data_client_common [lhead=cluster_struct_wlan_event_data_client_common];
+	struct__avm_event_telephony_missed_call_params:params -> union_avm_event_telephony_call_params [lhead=cluster_union_avm_event_telephony_call_params];
+	struct_avm_event_data:data -> union_avm_event_data_union [lhead=cluster_union_avm_event_data_union];
+	struct__avm_event_powermanagment_status:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_powermanagment_status:param -> union___powermanagment_status_union [lhead=cluster_union___powermanagment_status_union];
+	struct__avm_event_temperature:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_wlan_event_data_client_state_idle:common -> struct_wlan_event_data_client_common [lhead=cluster_struct_wlan_event_data_client_common];
+	struct_avm_event_message:message -> union_avm_event_message_union [lhead=cluster_union_avm_event_message_union];
+	struct__avm_event_user_mode_source_notify:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_mass_storage_mount:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_cpu_idle:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_smarthome:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_smarthome_switch_status:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_fax_status:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_telefonprofile:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_avm_event_source_unregister:id_mask -> struct__avm_event_id_mask [lhead=cluster_struct__avm_event_id_mask];
-	struct__avm_event_remotewatchdog:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_avm_event_powermanagment_remote:param -> union_avm_event_powermanagment_remote_union [lhead=cluster_union_avm_event_powermanagment_remote_union];
-	struct__avm_event_mass_storage_mount:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_led_info:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_wlan_event_def:event_data -> union_wlan_event_data [lhead=cluster_union_wlan_event_data];
+	struct_wlan_event_data_scan_event_info:common -> struct_wlan_event_data_scan_common [lhead=cluster_struct_wlan_event_data_scan_common];
+	struct__avm_event_cmd_param_register:mask -> struct__avm_event_id_mask [lhead=cluster_struct__avm_event_id_mask];
+	struct__avm_event_cpu_run:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_piglet:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_smarthome:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_telefonprofile:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_cpmac_event_struct:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_cpmac_event_struct:port -> struct_cpmac_port [lhead=cluster_struct_cpmac_port];
 	struct__avm_event_pm_info_stat:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_avm_event_data:data -> union_avm_event_data_union [lhead=cluster_union_avm_event_data_union];
-	struct_avm_event_message:message -> union_avm_event_message_union [lhead=cluster_union_avm_event_message_union];
-	struct_avm_event_internet_new_ip:params -> union_avm_event_internet_new_ip_param [lhead=cluster_union_avm_event_internet_new_ip_param];
 	struct__avm_event_fax_file:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_led_status:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__cpmac_event_struct:port -> struct_cpmac_port [lhead=cluster_struct_cpmac_port];
-	struct_wlan_event_data_client_connect_info:common -> struct_wlan_event_data_client_common [lhead=cluster_struct_wlan_event_data_client_common];
-	struct__avm_event_ambient_brightness:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_mass_storage_unmount:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_wlan_event_data_client_state_idle:common -> struct_wlan_event_data_client_common [lhead=cluster_struct_wlan_event_data_client_common];
-	struct_avm_event_remote_source_trigger_request:data -> struct_avm_event_data [lhead=cluster_struct_avm_event_data];
-	struct__avm_event_powermanagment_remote:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_powermanagment_remote:param -> union_avm_event_powermanagment_remote_union [lhead=cluster_union_avm_event_powermanagment_remote_union];
-	struct__avm_event_firmware_update_available:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_remotepcmlink:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_avm_event_powermanagment_status:param -> union___powermanagment_status_union [lhead=cluster_union___powermanagment_status_union];
-	struct__avm_event_rpc:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct_avm_event_wlan:u1 -> union_avm_event_wlan_client_status_u1 [lhead=cluster_union_avm_event_wlan_client_status_u1];
 	struct_avm_event_wlan:u2 -> union_avm_event_wlan_client_status_u2 [lhead=cluster_union_avm_event_wlan_client_status_u2];
 	struct_avm_event_wlan:u3 -> union_avm_event_wlan_client_status_u3 [lhead=cluster_union_avm_event_wlan_client_status_u3];
 	struct_avm_event_wlan:credentials -> struct_avm_event_wlan_credentials [lhead=cluster_struct_avm_event_wlan_credentials];
-	struct_avm_event_telephony_missed_call:p -> struct__avm_event_telephony_missed_call_params [lhead=cluster_struct__avm_event_telephony_missed_call_params];
-	struct__avm_event_cmd:param -> union__avm_event_cmd_param [lhead=cluster_union__avm_event_cmd_param];
+	struct__avm_event_powerline_status:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_led_info:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_checkpoint:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_remotepcmlink:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_wlan:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_wlan:credentials -> struct_avm_event_wlan_credentials [lhead=cluster_struct_avm_event_wlan_credentials];
 	struct__avm_event_powermanagment_remote_ressourceinfo:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_wlan_event_data_scan_event_info:common -> struct_wlan_event_data_scan_common [lhead=cluster_struct_wlan_event_data_scan_common];
-	struct__avm_event_telephony_missed_call:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_telephony_missed_call:p -> struct__avm_event_telephony_missed_call_params [lhead=cluster_struct__avm_event_telephony_missed_call_params];
-	struct_avm_event_source_register:id_mask -> struct__avm_event_id_mask [lhead=cluster_struct__avm_event_id_mask];
-	struct__avm_event_cpu_run:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_log:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_avm_event_remote_source_trigger_request:data -> struct_avm_event_data [lhead=cluster_struct_avm_event_data];
+	struct__cpmac_event_struct:port -> struct_cpmac_port [lhead=cluster_struct_cpmac_port];
+	struct_avm_event_powermanagment_status:param -> union___powermanagment_status_union [lhead=cluster_union___powermanagment_status_union];
+	struct__avm_event_powermanagment_remote:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_powermanagment_remote:param -> union_avm_event_powermanagment_remote_union [lhead=cluster_union_avm_event_powermanagment_remote_union];
+	struct__avm_event_ambient_brightness:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_avm_event_telephony_missed_call:p -> struct__avm_event_telephony_missed_call_params [lhead=cluster_struct__avm_event_telephony_missed_call_params];
+	struct__avm_event_fax_status:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_mass_storage_unmount:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_internet_new_ip:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct__avm_event_internet_new_ip:params -> union_avm_event_internet_new_ip_param [lhead=cluster_union_avm_event_internet_new_ip_param];
-	struct__avm_event_checkpoint:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_avm_event_source_register:id_mask -> struct__avm_event_id_mask [lhead=cluster_struct__avm_event_id_mask];
+	struct__avm_event_rpc:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_avm_event_internet_new_ip:params -> union_avm_event_internet_new_ip_param [lhead=cluster_union_avm_event_internet_new_ip_param];
 	struct_avm_event_tffs:call -> union_avm_event_tffs_call_union [lhead=cluster_union_avm_event_tffs_call_union];
-	struct__avm_event_powerline_status:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_wlan_event_def:event_data -> union_wlan_event_data [lhead=cluster_union_wlan_event_data];
+	struct__avm_event_log:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct_avm_event_powermanagment_remote:param -> union_avm_event_powermanagment_remote_union [lhead=cluster_union_avm_event_powermanagment_remote_union];
+	struct__avm_event_cmd:param -> union__avm_event_cmd_param [lhead=cluster_union__avm_event_cmd_param];
+	struct_avm_event_source_unregister:id_mask -> struct__avm_event_id_mask [lhead=cluster_struct__avm_event_id_mask];
+	struct__avm_event_led_status:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	struct_wlan_event_data_client_state_change:common -> struct_wlan_event_data_client_common [lhead=cluster_struct_wlan_event_data_client_common];
-	struct__avm_event_cmd_param_register:mask -> struct__avm_event_id_mask [lhead=cluster_struct__avm_event_id_mask];
-	struct__avm_event_user_mode_source_notify:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_telephony_missed_call_params:params -> union_avm_event_telephony_call_params [lhead=cluster_union_avm_event_telephony_call_params];
-	struct_cpmac_event_struct:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct_cpmac_event_struct:port -> struct_cpmac_port [lhead=cluster_struct_cpmac_port];
-	struct__avm_event_temperature:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_powermanagment_status:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
-	struct__avm_event_powermanagment_status:param -> union___powermanagment_status_union [lhead=cluster_union___powermanagment_status_union];
+	struct__avm_event_remotewatchdog:event_header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
+	struct__avm_event_firmware_update_available:header -> struct__avm_event_header [lhead=cluster_struct__avm_event_header];
 	union_avm_event_powermanagment_remote_union:ressourceinfo -> struct_avm_event_powermanagment_remote_ressourceinfo [lhead=cluster_struct_avm_event_powermanagment_remote_ressourceinfo,label="select=\n'avm_event_powermanagment_ressourceinfo'"];
 	union_avm_event_data_union:appl_status -> struct_avm_event_boykott [lhead=cluster_struct_avm_event_boykott,label="select=\n'avm_event_id_appl_status'"];
 	union_avm_event_data_union:autoprov -> struct_avm_event_boykott [lhead=cluster_struct_avm_event_boykott,label="select=\n'avm_event_id_autoprov'"];
@@ -696,11 +696,12 @@
 	union__avm_event_cmd_param:avm_event_cmd_param_trigger -> struct__avm_event_cmd_param_trigger [lhead=cluster_struct__avm_event_cmd_param_trigger,label="select=\n'avm_event_cmd_trigger'"];
 	union__avm_event_cmd_param:avm_event_cmd_param_source_register -> struct__avm_event_cmd_param_register [lhead=cluster_struct__avm_event_cmd_param_register,label="select=\n'avm_event_cmd_source_register'"];
 	union__avm_event_cmd_param:avm_event_cmd_param_source_trigger -> struct__avm_event_cmd_param_source_trigger [lhead=cluster_struct__avm_event_cmd_param_source_trigger,label="select=\n'avm_event_cmd_source_trigger'"];
-	union_wlan_event_data:client_state_change -> struct_wlan_event_data_client_state_change [lhead=cluster_struct_wlan_event_data_client_state_change,label="select=\n'CLIENT_STATE_CHANGE'"];
-	union_wlan_event_data:client_connect_info -> struct_wlan_event_data_client_connect_info [lhead=cluster_struct_wlan_event_data_client_connect_info,label="select=\n'CLIENT_CONNECT_INFO'"];
-	union_wlan_event_data:scan_event_info -> struct_wlan_event_data_scan_event_info [lhead=cluster_struct_wlan_event_data_scan_event_info,label="select=\n'WLAN_EVENT_SCAN'"];
-	union_wlan_event_data:client_state_idle -> struct_wlan_event_data_client_state_idle [lhead=cluster_struct_wlan_event_data_client_state_idle,label="select=\n'CLIENT_STATE_IDLE'"];
-	union_wlan_event_data:radio_recovery -> struct_wlan_event_data_radio_recovery [lhead=cluster_struct_wlan_event_data_radio_recovery,label="select=\n'WLAN_RADIO_RECOVERY'"];
+	union_avm_event_message_union:source_register -> struct_avm_event_source_register [lhead=cluster_struct_avm_event_source_register,label="select=\n'avm_event_source_register_type'"];
+	union_avm_event_message_union:source_unregister -> struct_avm_event_source_unregister [lhead=cluster_struct_avm_event_source_unregister,label="select=\n'avm_event_source_unregister_type'"];
+	union_avm_event_message_union:source_notifier -> struct_avm_event_source_notifier [lhead=cluster_struct_avm_event_source_notifier,label="select=\n'avm_event_source_notifier_type'"];
+	union_avm_event_message_union:remote_source_trigger_request -> struct_avm_event_remote_source_trigger_request [lhead=cluster_struct_avm_event_remote_source_trigger_request,label="select=\n'avm_event_remote_source_trigger_request_type'"];
+	union_avm_event_message_union:ping -> struct_avm_event_ping [lhead=cluster_struct_avm_event_ping,label="select=\n'avm_event_ping_type'"];
+	union_avm_event_message_union:tffs -> struct_avm_event_tffs [lhead=cluster_struct_avm_event_tffs,label="select=\n'avm_event_tffs_type'"];
 	union_avm_event_telephony_call_params:string -> struct_avm_event_telephony_string [lhead=cluster_struct_avm_event_telephony_string,label="select=\n'avm_event_telephony_params_name\navm_event_telephony_params_msn_name\navm_event_telephony_params_portname\navm_event_telephony_params_tam_path'"];
 	union_avm_event_tffs_call_union:open -> struct_avm_event_tffs_open [lhead=cluster_struct_avm_event_tffs_open,label="select=\n'avm_event_tffs_call_open'"];
 	union_avm_event_tffs_call_union:close -> struct_avm_event_tffs_close [lhead=cluster_struct_avm_event_tffs_close,label="select=\n'avm_event_tffs_call_close'"];
@@ -713,10 +714,9 @@
 	union_avm_event_tffs_call_union:deinit -> struct_avm_event_tffs_deinit [lhead=cluster_struct_avm_event_tffs_deinit,label="select=\n'avm_event_tffs_call_deinit'"];
 	union_avm_event_tffs_call_union:notify -> struct_avm_event_tffs_notify [lhead=cluster_struct_avm_event_tffs_notify,label="select=\n'avm_event_tffs_call_notify'"];
 	union_avm_event_tffs_call_union:paniclog -> struct_avm_event_tffs_paniclog [lhead=cluster_struct_avm_event_tffs_paniclog,label="select=\n'avm_event_tffs_call_paniclog'"];
-	union_avm_event_message_union:source_register -> struct_avm_event_source_register [lhead=cluster_struct_avm_event_source_register,label="select=\n'avm_event_source_register_type'"];
-	union_avm_event_message_union:source_unregister -> struct_avm_event_source_unregister [lhead=cluster_struct_avm_event_source_unregister,label="select=\n'avm_event_source_unregister_type'"];
-	union_avm_event_message_union:source_notifier -> struct_avm_event_source_notifier [lhead=cluster_struct_avm_event_source_notifier,label="select=\n'avm_event_source_notifier_type'"];
-	union_avm_event_message_union:remote_source_trigger_request -> struct_avm_event_remote_source_trigger_request [lhead=cluster_struct_avm_event_remote_source_trigger_request,label="select=\n'avm_event_remote_source_trigger_request_type'"];
-	union_avm_event_message_union:ping -> struct_avm_event_ping [lhead=cluster_struct_avm_event_ping,label="select=\n'avm_event_ping_type'"];
-	union_avm_event_message_union:tffs -> struct_avm_event_tffs [lhead=cluster_struct_avm_event_tffs,label="select=\n'avm_event_tffs_type'"];
+	union_wlan_event_data:client_state_change -> struct_wlan_event_data_client_state_change [lhead=cluster_struct_wlan_event_data_client_state_change,label="select=\n'CLIENT_STATE_CHANGE'"];
+	union_wlan_event_data:client_connect_info -> struct_wlan_event_data_client_connect_info [lhead=cluster_struct_wlan_event_data_client_connect_info,label="select=\n'CLIENT_CONNECT_INFO'"];
+	union_wlan_event_data:scan_event_info -> struct_wlan_event_data_scan_event_info [lhead=cluster_struct_wlan_event_data_scan_event_info,label="select=\n'WLAN_EVENT_SCAN'"];
+	union_wlan_event_data:client_state_idle -> struct_wlan_event_data_client_state_idle [lhead=cluster_struct_wlan_event_data_client_state_idle,label="select=\n'CLIENT_STATE_IDLE'"];
+	union_wlan_event_data:radio_recovery -> struct_wlan_event_data_radio_recovery [lhead=cluster_struct_wlan_event_data_radio_recovery,label="select=\n'WLAN_RADIO_RECOVERY'"];
 };
diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_types.h linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_types.h
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_types.h	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_gen_types.h	2019-01-02 12:04:50.000000000 +0100
@@ -1013,65 +1013,77 @@
 #endif /*--- #ifdef WIRESHARK_PLUGIN ---*/
 
 
-char *get_enum__powermanagment_status_type_name (enum _powermanagment_status_type value);
-char *get_enum_ePLCState_name (enum ePLCState value);
-char *get_enum_avm_event_powermanagment_remote_action_name (enum avm_event_powermanagment_remote_action value);
+char *get_enum_wlan_event_scan_type_name (enum wlan_event_scan_type value);
+char *get_enum_wlan_event_sel_name (enum wlan_event_sel value);
+char *get_enum___avm_event_cmd_name (enum __avm_event_cmd value);
 char *get_enum__avm_remotepcmlinktype_name (enum _avm_remotepcmlinktype value);
-char *get_enum_wlan_sm_states_name (enum wlan_sm_states value);
-char *get_enum_avm_event_switch_type_name (enum avm_event_switch_type value);
-char *get_enum_avm_event_internet_new_ip_param_sel_name (enum avm_event_internet_new_ip_param_sel value);
-char *get_enum_fax_receive_mode_name (enum fax_receive_mode value);
-char *get_enum_avm_event_tffs_open_mode_name (enum avm_event_tffs_open_mode value);
+char *get_enum__powermanagment_device_name (enum _powermanagment_device value);
+char *get_enum_avm_event_tffs_notify_event_name (enum avm_event_tffs_notify_event value);
 char *get_enum_wlan_info_sel_name (enum wlan_info_sel value);
-char *get_enum_avm_event_tffs_call_type_name (enum avm_event_tffs_call_type value);
-char *get_enum_avm_event_firmware_type_name (enum avm_event_firmware_type value);
-char *get_enum__avm_event_id_name (enum _avm_event_id value);
-char *get_enum_wlan_event_id_name (enum wlan_event_id value);
+char *get_enum_avm_event_powermanagment_remote_action_name (enum avm_event_powermanagment_remote_action value);
 char *get_enum__avm_remote_wdt_cmd_name (enum _avm_remote_wdt_cmd value);
-char *get_enum__avm_logtype_name (enum _avm_logtype value);
-char *get_enum__avm_rpctype_name (enum _avm_rpctype value);
-char *get_enum__powermanagment_device_name (enum _powermanagment_device value);
+char *get_enum__avm_event_push_button_key_name (enum _avm_event_push_button_key value);
+char *get_enum_ePLCState_name (enum ePLCState value);
+char *get_enum_avm_event_internet_new_ip_param_sel_name (enum avm_event_internet_new_ip_param_sel value);
+char *get_enum__cputype_name (enum _cputype value);
+char *get_enum_avm_event_tffs_open_mode_name (enum avm_event_tffs_open_mode value);
+char *get_enum_wlan_event_radio_recovery_state_name (enum wlan_event_radio_recovery_state value);
 char *get_enum__avm_event_ethernet_speed_name (enum _avm_event_ethernet_speed value);
-char *get_enum__avm_piglettype_name (enum _avm_piglettype value);
-char *get_enum_avm_event_telephony_param_sel_name (enum avm_event_telephony_param_sel value);
-char *get_enum_wlan_event_scan_type_name (enum wlan_event_scan_type value);
-char *get_enum___avm_event_cmd_name (enum __avm_event_cmd value);
-char *get_enum_wlan_info_special_name (enum wlan_info_special value);
-char *get_enum_avm_event_led_id_name (enum avm_event_led_id value);
-char *get_enum_wlan_event_sel_name (enum wlan_event_sel value);
 char *get_enum_avm_event_msg_type_name (enum avm_event_msg_type value);
-char *get_enum_avm_event_tffs_notify_event_name (enum avm_event_tffs_notify_event value);
+char *get_enum_wlan_sm_states_name (enum wlan_sm_states value);
+char *get_enum__avm_event_id_name (enum _avm_event_id value);
 char *get_enum_fax_file_event_type_name (enum fax_file_event_type value);
-char *get_enum__cputype_name (enum _cputype value);
-char *get_enum__avm_event_push_button_key_name (enum _avm_event_push_button_key value);
+char *get_enum_avm_event_firmware_type_name (enum avm_event_firmware_type value);
+char *get_enum_avm_event_telephony_param_sel_name (enum avm_event_telephony_param_sel value);
 char *get_enum_fax_storage_dest_name (enum fax_storage_dest value);
-char *get_enum_wlan_event_radio_recovery_state_name (enum wlan_event_radio_recovery_state value);
-/* pos 9600 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_client_common {
-	uint8_t mac[6];
+char *get_enum_avm_event_led_id_name (enum avm_event_led_id value);
+char *get_enum__avm_logtype_name (enum _avm_logtype value);
+char *get_enum_wlan_info_special_name (enum wlan_info_special value);
+char *get_enum_avm_event_switch_type_name (enum avm_event_switch_type value);
+char *get_enum__avm_piglettype_name (enum _avm_piglettype value);
+char *get_enum__avm_rpctype_name (enum _avm_rpctype value);
+char *get_enum__powermanagment_status_type_name (enum _powermanagment_status_type value);
+char *get_enum_wlan_event_id_name (enum wlan_event_id value);
+char *get_enum_avm_event_tffs_call_type_name (enum avm_event_tffs_call_type value);
+char *get_enum_fax_receive_mode_name (enum fax_receive_mode value);
+/* pos 9550 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_scan_common {
 	char iface[IFNAMSIZ + 1];
 	char initiator[16 + 1];
 } __attribute__((packed));
 
-/* pos 9600 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_scan_common {
+/* pos 9550 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_client_common {
+	uint8_t mac[6];
 	char iface[IFNAMSIZ + 1];
 	char initiator[16 + 1];
 } __attribute__((packed));
 
-/* pos 9600 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_powermanagment_remote_ressourceinfo {
-	enum _powermanagment_device device;
-	unsigned int power_rate;
-} __attribute__((packed));
-
-/* pos 9606.25 (Wed Sep 26 15:41:17 2018) */
+/* pos 9575 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_telephony_string {
 	unsigned int length;
 	unsigned char string[0];
 } __attribute__((packed));
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_radio_recovery {
+	int radio_id;
+	enum wlan_event_radio_recovery_state state;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_client_state_change {
+	struct wlan_event_data_client_common common;
+	uint8_t state;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_powermanagment_remote_ressourceinfo {
+	enum _powermanagment_device device;
+	unsigned int power_rate;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum avm_event_telephony_param_sel'
 -----------------------------------------------------------------------------------*/
@@ -1088,19 +1100,19 @@
 	unsigned int id;
 };
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_scan_event_info {
+	struct wlan_event_data_scan_common common;
+	enum wlan_event_scan_type event_type;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
 struct wlan_event_data_client_state_idle {
 	struct wlan_event_data_client_common common;
 	uint8_t idle;
 } __attribute__((packed));
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_radio_recovery {
-	int radio_id;
-	enum wlan_event_radio_recovery_state state;
-} __attribute__((packed));
-
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
 struct wlan_event_data_client_connect_info {
 	struct wlan_event_data_client_common common;
 	uint8_t info_context;
@@ -1109,19 +1121,28 @@
 	uint16_t ieee80211_code;
 } __attribute__((packed));
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_client_state_change {
-	struct wlan_event_data_client_common common;
-	uint8_t state;
-} __attribute__((packed));
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+/*-----------------------------------------------------------------------------------
+	union entry is select by variable of type 'enum avm_event_internet_new_ip_param_sel'
+-----------------------------------------------------------------------------------*/
+union avm_event_internet_new_ip_param {
+	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v4) ---*/
+	unsigned char ipv4[4];
+	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v6) ---*/
+	unsigned char ipv6[16];
+};
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_scan_event_info {
-	struct wlan_event_data_scan_common common;
-	enum wlan_event_scan_type event_type;
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+struct cpmac_port {
+	uint8_t cable;
+	uint8_t link;
+	uint8_t speed100;
+	uint8_t fullduplex;
+	enum _avm_event_ethernet_speed speed;
+	enum _avm_event_ethernet_speed maxspeed;
 } __attribute__((packed));
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_id'
 -----------------------------------------------------------------------------------*/
@@ -1138,22 +1159,44 @@
 	struct wlan_event_data_radio_recovery radio_recovery;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_sel'
 -----------------------------------------------------------------------------------*/
-union avm_event_wlan_client_status_u2 {
+union avm_event_wlan_client_status_u1 {
+	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT) ---*/
+	unsigned int sub_event;
+	/*--- select by [select-variable] one of (INPUT_MAC_AUTHORIZE) ---*/
+	unsigned int active_rate;
+	/*--- select by [select-variable] one of (INPUT_EAP_AUTHORIZED) ---*/
+	unsigned int active_rate1;
+	/*--- select by [select-variable] one of (INPUT_MADWIFI_WRONG_PSK) ---*/
+	unsigned int active_rate2;
+	/*--- select by [select-variable] one of (INPUT_AUTH_EXPIRED) ---*/
+	unsigned int active_rate3;
+	/*--- select by [select-variable] one of (INPUT_STA) ---*/
+	unsigned int active_rate4;
+	/*--- select by [select-variable] one of (INPUT_WDS_LINK_UP) ---*/
+	unsigned int active_rate5;
+	/*--- select by [select-variable] one of (INPUT_WDS_LINK_DOWN) ---*/
+	unsigned int active_rate6;
 	/*--- select by [select-variable] one of (INPUT_RADAR) ---*/
-	unsigned int radar_freq;
+	unsigned int radar_chan;
 	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT_PRECAC) ---*/
-	unsigned int radar_freq1;
-	/*--- select by [select-variable] one of (INPUT_AUTH_1_D) ---*/
-	unsigned int wlan_mode;
+	unsigned int radar_chan1;
+	/*--- select by [select-variable] one of (INPUT_GREENAP_PS) ---*/
+	unsigned int green_ap_ps_state;
+	/*--- select by [select-variable] one of (INPUT_COEXIST_SWITCH) ---*/
+	unsigned int coexist_ht40_state;
+	/*--- select by [select-variable] one of (INPUT_MAX_NODE_REACHED) ---*/
+	unsigned int max_node_count;
+	/*--- select by [select-variable] one of (INPUT_INTERFERENCE_CHAN_CHANGE) ---*/
+	unsigned int channel;
 	/*--- select by [select-variable] one of (INPUT_AUTH_1_OS_A) ---*/
 	unsigned int dummy0;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_wlan_credentials {
 	char ssid[33];
 	unsigned char bssid[6];
@@ -1161,40 +1204,22 @@
 	unsigned int security;
 } __attribute__((packed));
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_sel'
 -----------------------------------------------------------------------------------*/
-union avm_event_wlan_client_status_u3 {
+union avm_event_wlan_client_status_u2 {
 	/*--- select by [select-variable] one of (INPUT_RADAR) ---*/
-	unsigned int radar_time;
+	unsigned int radar_freq;
+	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT_PRECAC) ---*/
+	unsigned int radar_freq1;
+	/*--- select by [select-variable] one of (INPUT_AUTH_1_D) ---*/
+	unsigned int wlan_mode;
 	/*--- select by [select-variable] one of (INPUT_AUTH_1_OS_A) ---*/
 	unsigned int dummy0;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-/*-----------------------------------------------------------------------------------
-	union entry is select by variable of type 'enum avm_event_internet_new_ip_param_sel'
------------------------------------------------------------------------------------*/
-union avm_event_internet_new_ip_param {
-	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v4) ---*/
-	unsigned char ipv4[4];
-	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v6) ---*/
-	unsigned char ipv6[16];
-};
-
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-/*-----------------------------------------------------------------------------------
-	union entry is select by variable of type 'enum avm_event_powermanagment_remote_action'
------------------------------------------------------------------------------------*/
-union avm_event_powermanagment_remote_union {
-	/*--- select by [select-variable] one of (avm_event_powermanagment_ressourceinfo) ---*/
-	struct avm_event_powermanagment_remote_ressourceinfo ressourceinfo;
-	/*--- select by [select-variable] one of (avm_event_powermanagment_activatepowermode) ---*/
-	char powermode[32];
-};
-
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum _powermanagment_status_type'
 -----------------------------------------------------------------------------------*/
@@ -1203,138 +1228,84 @@
 	unsigned int dsl_status;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_telephony_missed_call_params {
-	enum avm_event_telephony_param_sel id;
-	union avm_event_telephony_call_params params;
-} __attribute__((packed));
-
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_sel'
 -----------------------------------------------------------------------------------*/
-union avm_event_wlan_client_status_u1 {
-	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT) ---*/
-	unsigned int sub_event;
-	/*--- select by [select-variable] one of (INPUT_MAC_AUTHORIZE) ---*/
-	unsigned int active_rate;
-	/*--- select by [select-variable] one of (INPUT_EAP_AUTHORIZED) ---*/
-	unsigned int active_rate1;
-	/*--- select by [select-variable] one of (INPUT_MADWIFI_WRONG_PSK) ---*/
-	unsigned int active_rate2;
-	/*--- select by [select-variable] one of (INPUT_AUTH_EXPIRED) ---*/
-	unsigned int active_rate3;
-	/*--- select by [select-variable] one of (INPUT_STA) ---*/
-	unsigned int active_rate4;
-	/*--- select by [select-variable] one of (INPUT_WDS_LINK_UP) ---*/
-	unsigned int active_rate5;
-	/*--- select by [select-variable] one of (INPUT_WDS_LINK_DOWN) ---*/
-	unsigned int active_rate6;
+union avm_event_wlan_client_status_u3 {
 	/*--- select by [select-variable] one of (INPUT_RADAR) ---*/
-	unsigned int radar_chan;
-	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT_PRECAC) ---*/
-	unsigned int radar_chan1;
-	/*--- select by [select-variable] one of (INPUT_GREENAP_PS) ---*/
-	unsigned int green_ap_ps_state;
-	/*--- select by [select-variable] one of (INPUT_COEXIST_SWITCH) ---*/
-	unsigned int coexist_ht40_state;
-	/*--- select by [select-variable] one of (INPUT_MAX_NODE_REACHED) ---*/
-	unsigned int max_node_count;
-	/*--- select by [select-variable] one of (INPUT_INTERFERENCE_CHAN_CHANGE) ---*/
-	unsigned int channel;
+	unsigned int radar_time;
 	/*--- select by [select-variable] one of (INPUT_AUTH_1_OS_A) ---*/
 	unsigned int dummy0;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-struct cpmac_port {
-	uint8_t cable;
-	uint8_t link;
-	uint8_t speed100;
-	uint8_t fullduplex;
-	enum _avm_event_ethernet_speed speed;
-	enum _avm_event_ethernet_speed maxspeed;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_piglet {
-	enum _avm_piglettype type;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_mass_storage_mount {
-	unsigned long long size;
-	unsigned long long free;
-	unsigned int name_length;
-	unsigned char name[0];
-} __attribute__((packed));
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+/*-----------------------------------------------------------------------------------
+	union entry is select by variable of type 'enum avm_event_powermanagment_remote_action'
+-----------------------------------------------------------------------------------*/
+union avm_event_powermanagment_remote_union {
+	/*--- select by [select-variable] one of (avm_event_powermanagment_ressourceinfo) ---*/
+	struct avm_event_powermanagment_remote_ressourceinfo ressourceinfo;
+	/*--- select by [select-variable] one of (avm_event_powermanagment_activatepowermode) ---*/
+	char powermode[32];
+};
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_powermanagment_status {
-	enum _powermanagment_status_type substatus;
-	union __powermanagment_status_union param;
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_telephony_missed_call_params {
+	enum avm_event_telephony_param_sel id;
+	union avm_event_telephony_call_params params;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_fax_status {
-	enum fax_receive_mode fax_receive_mode;
-	enum fax_storage_dest fax_storage_dest;
-	unsigned int dirname_length;
-	unsigned char dirname[0];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_log {
+	enum _avm_logtype logtype;
+	unsigned int loglen;
+	unsigned int logpointer;
+	unsigned int checksum;
+	unsigned int rebootflag;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_remotewatchdog {
-	enum _avm_remote_wdt_cmd cmd;
-	char name[16];
-	unsigned int param;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_wlan_power {
+	unsigned int power;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_internet_new_ip {
-	enum avm_event_internet_new_ip_param_sel sel;
-	union avm_event_internet_new_ip_param params;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_cpu_run {
+	enum _cputype cputype;
+	unsigned char cpu_run[4];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_remotepcmlink {
-	enum _avm_remotepcmlinktype type;
-	unsigned int sharedlen;
-	unsigned int sharedpointer;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_def {
+	enum wlan_event_id event_id;
+	union wlan_event_data event_data;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_fax_file {
 	enum fax_file_event_type action;
 	time_t date;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct _cpmac_event_struct {
-	unsigned int ports;
-	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_telefonprofile {
-	unsigned int on;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_powermanagment_remote {
+	enum avm_event_powermanagment_remote_action remote_action;
+	union avm_event_powermanagment_remote_union param;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_led_status {
-	enum _led_event led;
-	unsigned int state;
-	unsigned int param_len;
-	unsigned char params[AVM_LED_STATUS_MAX_PARAMLEN];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_ambient_brightness {
+	unsigned int value;
+	unsigned int maxvalue;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_powermanagment_remote {
-	enum avm_event_powermanagment_remote_action remote_action;
-	union avm_event_powermanagment_remote_union param;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_telefonprofile {
+	unsigned int on;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_smarthome_switch_status {
 	enum avm_event_switch_type type;
 	unsigned int value;
@@ -1342,60 +1313,85 @@
 	unsigned char ain[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_def {
-	enum wlan_event_id event_id;
-	union wlan_event_data event_data;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_boykott {
+	struct {} dummy;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_checkpoint {
-	uint32_t node_id;
-	uint64_t checkpoints;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_powermanagment_status {
+	enum _powermanagment_status_type substatus;
+	union __powermanagment_status_union param;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_boykott {
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct _cpmac_event_struct {
+	unsigned int ports;
+	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_telefon_up {
 	struct {} dummy;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_push_button {
-	enum _avm_event_push_button_key key;
-	uint32_t pressed;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_wlan {
+	char mac[6];
+	union avm_event_wlan_client_status_u1 u1;
+	wlan_event event;
+	wlan_info info;
+	enum wlan_sm_states status;
+	union avm_event_wlan_client_status_u2 u2;
+	char if_name[IFNAMSIZ];
+	unsigned int ev_initiator;
+	unsigned int ev_reason;
+	unsigned int avm_capabilities;
+	union avm_event_wlan_client_status_u3 u3;
+	struct avm_event_wlan_credentials credentials;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_cpu_run {
-	enum _cputype cputype;
-	unsigned char cpu_run[4];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_led_status {
+	enum _led_event led;
+	unsigned int state;
+	unsigned int param_len;
+	unsigned char params[AVM_LED_STATUS_MAX_PARAMLEN];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_wlan_power {
-	unsigned int power;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_fax_status {
+	enum fax_receive_mode fax_receive_mode;
+	enum fax_storage_dest fax_storage_dest;
+	unsigned int dirname_length;
+	unsigned char dirname[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_led_info {
-	unsigned int mode;
-	unsigned int param1;
-	unsigned int param2;
-	unsigned int gpio_driver_type;
-	unsigned int gpio;
-	unsigned int pos;
-	char name[MAX_EVENT_SOURCE_NAME_LEN];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_temperature {
+	int temperature;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_smarthome {
-	uint16_t length;
-	char ident[20];
-	uint16_t type;
-	struct {} payload;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_internet_new_ip {
+	enum avm_event_internet_new_ip_param_sel sel;
+	union avm_event_internet_new_ip_param params;
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_remotewatchdog {
+	enum _avm_remote_wdt_cmd cmd;
+	char name[16];
+	unsigned int param;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_telephony_missed_call {
+	unsigned int length;
+	struct _avm_event_telephony_missed_call_params p[0];
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_rpc {
 	enum _avm_rpctype type;
 	unsigned int id;
@@ -1403,38 +1399,20 @@
 	unsigned char message[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_cpu_idle {
-	unsigned char cpu_idle;
-	unsigned char dsl_dsp_idle;
-	unsigned char voice_dsp_idle;
-	unsigned char mem_strictlyused;
-	unsigned char mem_cacheused;
-	unsigned char mem_physfree;
-	enum _cputype cputype;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_log {
-	enum _avm_logtype logtype;
-	unsigned int loglen;
-	unsigned int logpointer;
-	unsigned int checksum;
-	unsigned int rebootflag;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_temperature {
-	int temperature;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_remotepcmlink {
+	enum _avm_remotepcmlinktype type;
+	unsigned int sharedlen;
+	unsigned int sharedpointer;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_mass_storage_unmount {
 	unsigned int name_length;
 	unsigned char name[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_pm_info_stat {
 	unsigned char reserved1;
 	unsigned char rate_sumact;
@@ -1472,52 +1450,125 @@
 	unsigned char rate_dvbccum;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_telephony_missed_call {
-	unsigned int length;
-	struct _avm_event_telephony_missed_call_params p[0];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_mass_storage_mount {
+	unsigned long long size;
+	unsigned long long free;
+	unsigned int name_length;
+	unsigned char name[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_telefon_up {
-	struct {} dummy;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_push_button {
+	enum _avm_event_push_button_key key;
+	uint32_t pressed;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_wlan {
-	char mac[6];
-	union avm_event_wlan_client_status_u1 u1;
-	wlan_event event;
-	wlan_info info;
-	enum wlan_sm_states status;
-	union avm_event_wlan_client_status_u2 u2;
-	char if_name[IFNAMSIZ];
-	unsigned int ev_initiator;
-	unsigned int ev_reason;
-	unsigned int avm_capabilities;
-	union avm_event_wlan_client_status_u3 u3;
-	struct avm_event_wlan_credentials credentials;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_cpu_idle {
+	unsigned char cpu_idle;
+	unsigned char dsl_dsp_idle;
+	unsigned char voice_dsp_idle;
+	unsigned char mem_strictlyused;
+	unsigned char mem_cacheused;
+	unsigned char mem_physfree;
+	enum _cputype cputype;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_ambient_brightness {
-	unsigned int value;
-	unsigned int maxvalue;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_piglet {
+	enum _avm_piglettype type;
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_smarthome {
+	uint16_t length;
+	char ident[20];
+	uint16_t type;
+	struct {} payload;
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_led_info {
+	unsigned int mode;
+	unsigned int param1;
+	unsigned int param2;
+	unsigned int gpio_driver_type;
+	unsigned int gpio;
+	unsigned int pos;
+	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_firmware_update_available {
 	enum avm_event_firmware_type type;
 	unsigned int version_length;
 	unsigned char version[0];
 } __attribute__((packed));
 
-/* pos 9700 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_id_mask {
-	avm_event_mask_fieldentry mask[avm_event_mask_fieldentries];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_checkpoint {
+	uint32_t node_id;
+	uint64_t checkpoints;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_write {
+	uint64_t buff_addr;
+	uint64_t len;
+	uint32_t id;
+	uint32_t final;
+	int32_t crc;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_close {
+	uint32_t dummy;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_deinit {
+	uint32_t dummy;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_info {
+	uint32_t fill_level;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_init {
+	int64_t mem_offset;
+	uint32_t max_seg_size;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_notify {
+	uint32_t id;
+	enum avm_event_tffs_notify_event event;
 } __attribute__((packed));
 
-/* pos 9700 (Wed Sep 26 15:41:17 2018) */
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_paniclog {
+	uint64_t buff_addr;
+	uint64_t len;
+	int32_t crc;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_cleanup {
+	uint32_t dummy;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_read {
+	uint64_t buff_addr;
+	uint64_t len;
+	uint32_t id;
+	int32_t crc;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum _avm_event_id'
 -----------------------------------------------------------------------------------*/
@@ -1622,75 +1673,24 @@
 	struct avm_event_smarthome smarthome;
 };
 
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_reindex {
-	uint32_t dummy;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_info {
-	uint32_t fill_level;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_cleanup {
-	uint32_t dummy;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_read {
-	uint64_t buff_addr;
-	uint64_t len;
-	uint32_t id;
-	int32_t crc;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_close {
-	uint32_t dummy;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_tffs_open {
 	uint32_t id;
 	enum avm_event_tffs_open_mode mode;
 	uint32_t max_segment_size;
 } __attribute__((packed));
 
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_deinit {
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_reindex {
 	uint32_t dummy;
 } __attribute__((packed));
 
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_notify {
-	uint32_t id;
-	enum avm_event_tffs_notify_event event;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_write {
-	uint64_t buff_addr;
-	uint64_t len;
-	uint32_t id;
-	uint32_t final;
-	int32_t crc;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_paniclog {
-	uint64_t buff_addr;
-	uint64_t len;
-	int32_t crc;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_init {
-	int64_t mem_offset;
-	uint32_t max_seg_size;
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_id_mask {
+	avm_event_mask_fieldentry mask[avm_event_mask_fieldentries];
 } __attribute__((packed));
 
-/* pos 9750 (Wed Sep 26 15:41:17 2018) */
+/* pos 9750 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum avm_event_tffs_call_type'
 -----------------------------------------------------------------------------------*/
@@ -1719,29 +1719,19 @@
 	struct avm_event_tffs_paniclog paniclog;
 };
 
-/* pos 9750 (Wed Sep 26 15:41:17 2018) */
+/* pos 9750 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_data {
 	enum _avm_event_id id;
 	union avm_event_data_union data;
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_source_notifier {
-	enum _avm_event_id id;
-} __attribute__((packed));
-
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_remote_source_trigger_request {
-	struct avm_event_data data;
-} __attribute__((packed));
-
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_source_unregister {
 	struct _avm_event_id_mask id_mask;
 	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_tffs {
 	uint32_t src_id;
 	uint32_t dst_id;
@@ -1754,40 +1744,67 @@
 	union avm_event_tffs_call_union call;
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_ping {
-	uint32_t seq;
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_source_notifier {
+	enum _avm_event_id id;
+} __attribute__((packed));
+
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_remote_source_trigger_request {
+	struct avm_event_data data;
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_source_register {
 	struct _avm_event_id_mask id_mask;
 	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_cmd_param_trigger {
-	enum _avm_event_id id;
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_cmd_param_register {
+	struct _avm_event_id_mask mask;
+	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
+} __attribute__((packed));
+
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_cmd_param_release {
+	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_ping {
+	uint32_t seq;
+} __attribute__((packed));
+
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct _avm_event_cmd_param_source_trigger {
 	enum _avm_event_id id;
 	unsigned int data_length;
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_cmd_param_register {
-	struct _avm_event_id_mask mask;
-	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_cmd_param_trigger {
+	enum _avm_event_id id;
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_cmd_param_release {
-	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
-} __attribute__((packed));
+/* pos 9900 (Wed Jan  2 12:04:50 2019) */
+/*-----------------------------------------------------------------------------------
+	union entry is select by variable of type 'enum __avm_event_cmd'
+-----------------------------------------------------------------------------------*/
+union _avm_event_cmd_param {
+	/*--- select by [select-variable] one of (avm_event_cmd_register) ---*/
+	struct _avm_event_cmd_param_register avm_event_cmd_param_register;
+	/*--- select by [select-variable] one of (avm_event_cmd_release) ---*/
+	struct _avm_event_cmd_param_release avm_event_cmd_param_release;
+	/*--- select by [select-variable] one of (avm_event_cmd_trigger) ---*/
+	struct _avm_event_cmd_param_trigger avm_event_cmd_param_trigger;
+	/*--- select by [select-variable] one of (avm_event_cmd_source_register) ---*/
+	struct _avm_event_cmd_param_register avm_event_cmd_param_source_register;
+	/*--- select by [select-variable] one of (avm_event_cmd_source_trigger) ---*/
+	struct _avm_event_cmd_param_source_trigger avm_event_cmd_param_source_trigger;
+};
 
-/* pos 9900 (Wed Sep 26 15:41:17 2018) */
+/* pos 9900 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum avm_event_msg_type'
 -----------------------------------------------------------------------------------*/
@@ -1806,45 +1823,36 @@
 	struct avm_event_tffs tffs;
 };
 
-/* pos 9900 (Wed Sep 26 15:41:17 2018) */
+/* pos 9900 (Wed Jan  2 12:04:50 2019) */
 struct _avm_event_header {
 	enum _avm_event_id id;
 } __attribute__((packed));
 
-/* pos 9900 (Wed Sep 26 15:41:17 2018) */
-/*-----------------------------------------------------------------------------------
-	union entry is select by variable of type 'enum __avm_event_cmd'
------------------------------------------------------------------------------------*/
-union _avm_event_cmd_param {
-	/*--- select by [select-variable] one of (avm_event_cmd_register) ---*/
-	struct _avm_event_cmd_param_register avm_event_cmd_param_register;
-	/*--- select by [select-variable] one of (avm_event_cmd_release) ---*/
-	struct _avm_event_cmd_param_release avm_event_cmd_param_release;
-	/*--- select by [select-variable] one of (avm_event_cmd_trigger) ---*/
-	struct _avm_event_cmd_param_trigger avm_event_cmd_param_trigger;
-	/*--- select by [select-variable] one of (avm_event_cmd_source_register) ---*/
-	struct _avm_event_cmd_param_register avm_event_cmd_param_source_register;
-	/*--- select by [select-variable] one of (avm_event_cmd_source_trigger) ---*/
-	struct _avm_event_cmd_param_source_trigger avm_event_cmd_param_source_trigger;
-};
+struct _avm_event_cmd {
+	enum __avm_event_cmd cmd;
+	union _avm_event_cmd_param param;
+} __attribute__((packed));
 
-struct _avm_event_ambient_brightness {
+struct _avm_event_log {
 	struct _avm_event_header event_header;
-	unsigned int value;
-	unsigned int maxvalue;
+	enum _avm_logtype logtype;
+	unsigned int loglen;
+	unsigned int logpointer;
+	unsigned int checksum;
+	unsigned int rebootflag;
 } __attribute__((packed));
 
-struct _avm_event_mass_storage_unmount {
-	struct _avm_event_header header;
-	unsigned int name_length;
-	unsigned char name[0];
+struct avm_event_unserialised {
+	uint64_t evnt_id;
+	uint32_t data_len;
+	unsigned char data;
 } __attribute__((packed));
 
-struct _avm_event_remotepcmlink {
+struct _avm_event_remotewatchdog {
 	struct _avm_event_header event_header;
-	enum _avm_remotepcmlinktype type;
-	unsigned int sharedlen;
-	unsigned int sharedpointer;
+	enum _avm_remote_wdt_cmd cmd;
+	char name[16];
+	unsigned int param;
 } __attribute__((packed));
 
 struct _avm_event_firmware_update_available {
@@ -1854,18 +1862,6 @@
 	unsigned char version[0];
 } __attribute__((packed));
 
-struct _avm_event_powermanagment_remote {
-	struct _avm_event_header header;
-	enum avm_event_powermanagment_remote_action remote_action;
-	union avm_event_powermanagment_remote_union param;
-} __attribute__((packed));
-
-struct _avm_event_fax_file {
-	struct _avm_event_header header;
-	enum fax_file_event_type action;
-	time_t date;
-} __attribute__((packed));
-
 struct _avm_event_led_status {
 	struct _avm_event_header header;
 	enum _led_event led;
@@ -1874,24 +1870,38 @@
 	unsigned char params[AVM_LED_STATUS_MAX_PARAMLEN];
 } __attribute__((packed));
 
-struct avm_event_message {
-	uint32_t length;
-	uint32_t magic;
-	uint32_t nonce;
-	uint32_t flags;
-	int32_t result;
-	uint32_t transmitter_handle;
-	uint32_t receiver_handle;
-	enum avm_event_msg_type type;
-	union avm_event_message_union message;
+struct _avm_event_wlan {
+	struct _avm_event_header header;
+	char mac[6];
+	unsigned int u1;
+	unsigned int event;
+	unsigned int info;
+	unsigned int status;
+	unsigned int u2;
+	char if_name[IFNAMSIZ];
+	unsigned int ev_initiator;
+	unsigned int ev_reason;
+	unsigned int avm_capabilities;
+	unsigned int u3;
+	struct avm_event_wlan_credentials credentials;
 } __attribute__((packed));
 
-struct _avm_event_mass_storage_mount {
+struct _avm_event_ambient_brightness {
+	struct _avm_event_header event_header;
+	unsigned int value;
+	unsigned int maxvalue;
+} __attribute__((packed));
+
+struct _avm_event_powermanagment_remote_ressourceinfo {
 	struct _avm_event_header header;
-	unsigned long long size;
-	unsigned long long free;
-	unsigned int name_length;
-	unsigned char name[0];
+	enum _powermanagment_device device;
+	unsigned int power_rate;
+} __attribute__((packed));
+
+struct _avm_event_powermanagment_remote {
+	struct _avm_event_header header;
+	enum avm_event_powermanagment_remote_action remote_action;
+	union avm_event_powermanagment_remote_union param;
 } __attribute__((packed));
 
 struct _avm_event_led_info {
@@ -1905,16 +1915,81 @@
 	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-struct _avm_event_remotewatchdog {
+struct _avm_event_powerline_status {
 	struct _avm_event_header event_header;
-	enum _avm_remote_wdt_cmd cmd;
-	char name[16];
-	unsigned int param;
+	enum ePLCState status;
 } __attribute__((packed));
 
-struct _avm_event_piglet {
+struct _avm_event_remotepcmlink {
 	struct _avm_event_header event_header;
-	enum _avm_piglettype type;
+	enum _avm_remotepcmlinktype type;
+	unsigned int sharedlen;
+	unsigned int sharedpointer;
+} __attribute__((packed));
+
+struct _avm_event_checkpoint {
+	struct _avm_event_header event_header;
+	uint32_t node_id;
+	uint64_t checkpoints;
+} __attribute__((packed));
+
+struct _avm_event_internet_new_ip {
+	struct _avm_event_header header;
+	enum avm_event_internet_new_ip_param_sel sel;
+	union avm_event_internet_new_ip_param params;
+} __attribute__((packed));
+
+struct _avm_event_rpc {
+	struct _avm_event_header event_header;
+	enum _avm_rpctype type;
+	unsigned int id;
+	unsigned int length;
+	unsigned char message[0];
+} __attribute__((packed));
+
+struct _avm_event_fax_status {
+	struct _avm_event_header header;
+	enum fax_receive_mode fax_receive_mode;
+	enum fax_storage_dest fax_storage_dest;
+	unsigned int dirname_length;
+	unsigned char dirname[0];
+} __attribute__((packed));
+
+struct _avm_event_mass_storage_unmount {
+	struct _avm_event_header header;
+	unsigned int name_length;
+	unsigned char name[0];
+} __attribute__((packed));
+
+struct _avm_event_cpu_run {
+	struct _avm_event_header event_header;
+	enum _cputype cputype;
+	unsigned char cpu_run[4];
+} __attribute__((packed));
+
+struct _avm_event_push_button {
+	enum _avm_event_id id;
+	enum _avm_event_push_button_key key;
+	uint32_t pressed;
+} __attribute__((packed));
+
+struct _avm_event_smarthome_switch_status {
+	struct _avm_event_header header;
+	enum avm_event_switch_type type;
+	unsigned int value;
+	unsigned int ain_length;
+	unsigned char ain[0];
+} __attribute__((packed));
+
+struct _avm_event_cpu_idle {
+	struct _avm_event_header event_header;
+	unsigned char cpu_idle;
+	unsigned char dsl_dsp_idle;
+	unsigned char voice_dsp_idle;
+	unsigned char mem_strictlyused;
+	unsigned char mem_cacheused;
+	unsigned char mem_physfree;
+	enum _cputype cputype;
 } __attribute__((packed));
 
 struct _avm_event_pm_info_stat {
@@ -1955,26 +2030,16 @@
 	unsigned char rate_dvbccum;
 } __attribute__((packed));
 
-struct _avm_event_smarthome_switch_status {
-	struct _avm_event_header header;
-	enum avm_event_switch_type type;
-	unsigned int value;
-	unsigned int ain_length;
-	unsigned char ain[0];
+struct cpmac_event_struct {
+	struct _avm_event_header event_header;
+	unsigned int ports;
+	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
 } __attribute__((packed));
 
-struct _avm_event_fax_status {
+struct _avm_event_fax_file {
 	struct _avm_event_header header;
-	enum fax_receive_mode fax_receive_mode;
-	enum fax_storage_dest fax_storage_dest;
-	unsigned int dirname_length;
-	unsigned char dirname[0];
-} __attribute__((packed));
-
-struct avm_event_unserialised {
-	uint64_t evnt_id;
-	uint32_t data_len;
-	unsigned char data;
+	enum fax_file_event_type action;
+	time_t date;
 } __attribute__((packed));
 
 struct _avm_event_smarthome {
@@ -1985,15 +2050,9 @@
 	struct {} payload;
 } __attribute__((packed));
 
-struct _avm_event_cpu_idle {
+struct _avm_event_piglet {
 	struct _avm_event_header event_header;
-	unsigned char cpu_idle;
-	unsigned char dsl_dsp_idle;
-	unsigned char voice_dsp_idle;
-	unsigned char mem_strictlyused;
-	unsigned char mem_cacheused;
-	unsigned char mem_physfree;
-	enum _cputype cputype;
+	enum _avm_piglettype type;
 } __attribute__((packed));
 
 struct _avm_event_telefonprofile {
@@ -2007,107 +2066,48 @@
 	union __powermanagment_status_union param;
 } __attribute__((packed));
 
-struct cpmac_event_struct {
-	struct _avm_event_header event_header;
-	unsigned int ports;
-	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
-} __attribute__((packed));
-
 struct _avm_event_temperature {
 	struct _avm_event_header event_header;
 	int temperature;
 } __attribute__((packed));
 
-struct _avm_event_user_mode_source_notify {
-	struct _avm_event_header header;
-	enum _avm_event_id id;
-} __attribute__((packed));
-
 struct avm_event_powerline_status {
 	enum ePLCState status;
 } __attribute__((packed));
 
-struct _avm_event_checkpoint {
-	struct _avm_event_header event_header;
-	uint32_t node_id;
-	uint64_t checkpoints;
-} __attribute__((packed));
-
-struct avm_event_user_mode_source_notify {
-	enum _avm_event_id id;
-} __attribute__((packed));
-
-struct _avm_event_powerline_status {
-	struct _avm_event_header event_header;
-	enum ePLCState status;
-} __attribute__((packed));
-
-struct _avm_event_cmd {
-	enum __avm_event_cmd cmd;
-	union _avm_event_cmd_param param;
-} __attribute__((packed));
-
-struct _avm_event_wlan {
+struct _avm_event_telephony_missed_call {
 	struct _avm_event_header header;
-	char mac[6];
-	unsigned int u1;
-	unsigned int event;
-	unsigned int info;
-	unsigned int status;
-	unsigned int u2;
-	char if_name[IFNAMSIZ];
-	unsigned int ev_initiator;
-	unsigned int ev_reason;
-	unsigned int avm_capabilities;
-	unsigned int u3;
-	struct avm_event_wlan_credentials credentials;
-} __attribute__((packed));
-
-struct _avm_event_rpc {
-	struct _avm_event_header event_header;
-	enum _avm_rpctype type;
-	unsigned int id;
 	unsigned int length;
-	unsigned char message[0];
+	struct _avm_event_telephony_missed_call_params p[0];
 } __attribute__((packed));
 
-struct _avm_event_internet_new_ip {
+struct _avm_event_mass_storage_mount {
 	struct _avm_event_header header;
-	enum avm_event_internet_new_ip_param_sel sel;
-	union avm_event_internet_new_ip_param params;
-} __attribute__((packed));
-
-struct _avm_event_log {
-	struct _avm_event_header event_header;
-	enum _avm_logtype logtype;
-	unsigned int loglen;
-	unsigned int logpointer;
-	unsigned int checksum;
-	unsigned int rebootflag;
-} __attribute__((packed));
-
-struct _avm_event_cpu_run {
-	struct _avm_event_header event_header;
-	enum _cputype cputype;
-	unsigned char cpu_run[4];
+	unsigned long long size;
+	unsigned long long free;
+	unsigned int name_length;
+	unsigned char name[0];
 } __attribute__((packed));
 
-struct _avm_event_push_button {
+struct avm_event_user_mode_source_notify {
 	enum _avm_event_id id;
-	enum _avm_event_push_button_key key;
-	uint32_t pressed;
 } __attribute__((packed));
 
-struct _avm_event_telephony_missed_call {
+struct _avm_event_user_mode_source_notify {
 	struct _avm_event_header header;
-	unsigned int length;
-	struct _avm_event_telephony_missed_call_params p[0];
+	enum _avm_event_id id;
 } __attribute__((packed));
 
-struct _avm_event_powermanagment_remote_ressourceinfo {
-	struct _avm_event_header header;
-	enum _powermanagment_device device;
-	unsigned int power_rate;
+struct avm_event_message {
+	uint32_t length;
+	uint32_t magic;
+	uint32_t nonce;
+	uint32_t flags;
+	int32_t result;
+	uint32_t transmitter_handle;
+	uint32_t receiver_handle;
+	enum avm_event_msg_type type;
+	union avm_event_message_union message;
 } __attribute__((packed));
 
 
diff -ur linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_perl_convert.pm linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_perl_convert.pm
--- linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_perl_convert.pm	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_dist_event/avm_event_perl_convert.pm	2019-01-02 12:04:50.000000000 +0100
@@ -8,119 +8,119 @@
 
 $VERSION     = 1.00;
 @ISA = qw(Exporter);
-@EXPORT = qw(avm_event_read_from_binary_struct__avm_event_cpu_idle
-		&avm_event_read_from_binary_struct_avm_event_unserialised
-		&avm_event_read_from_binary_struct__avm_event_smarthome
+@EXPORT = qw(avm_event_read_from_binary_struct__avm_event_header
+		&avm_event_read_from_binary_struct__avm_event_telephony_missed_call
+		&avm_event_read_from_binary_struct_wlan_event_data_client_connect_info
+		&avm_event_read_from_binary_struct_avm_event_smarthome
+		&avm_event_read_from_binary_struct_avm_event_powerline_status
+		&avm_event_read_from_binary_struct__avm_event_cmd_param_trigger
+		&avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params
+		&avm_event_read_from_binary_struct_avm_event_data
+		&avm_event_read_from_binary_struct__avm_event_powermanagment_status
+		&avm_event_read_from_binary_struct_wlan_event_data_client_common
+		&avm_event_read_from_binary_struct_avm_event_piglet
+		&avm_event_read_from_binary_struct__avm_event_temperature
+		&avm_event_read_from_binary_struct_wlan_event_data_client_state_idle
+		&avm_event_read_from_binary_struct_avm_event_firmware_update_available
+		&avm_event_read_from_binary_struct__avm_event_id_mask
+		&avm_event_read_from_binary_struct_avm_event_tffs_reindex
 		&avm_event_read_from_binary_struct_avm_event_checkpoint
-		&avm_event_read_from_binary_struct_avm_event_boykott
+		&avm_event_read_from_binary_struct_avm_event_message
+		&avm_event_read_from_binary_struct__avm_event_user_mode_source_notify
+		&avm_event_read_from_binary_struct_avm_event_tffs_open
+		&avm_event_read_from_binary_struct_avm_event_user_mode_source_notify
+		&avm_event_read_from_binary_struct_avm_event_led_info
+		&avm_event_read_from_binary_struct_avm_event_telephony_string
+		&avm_event_read_from_binary_struct__avm_event_mass_storage_mount
+		&avm_event_read_from_binary_struct__avm_event_cpu_idle
 		&avm_event_read_from_binary_struct__avm_event_smarthome_switch_status
-		&avm_event_read_from_binary_struct__avm_event_fax_status
-		&avm_event_read_from_binary_struct__avm_event_cmd_param_source_trigger
+		&avm_event_read_from_binary_struct__avm_event_cmd_param_release
+		&avm_event_read_from_binary_struct_avm_event_ping
+		&avm_event_read_from_binary_struct_avm_event_wlan_credentials
+		&avm_event_read_from_binary_struct_avm_event_tffs_cleanup
+		&avm_event_read_from_binary_struct_avm_event_remotepcmlink
+		&avm_event_read_from_binary_struct__avm_event_push_button
+		&avm_event_read_from_binary_struct_avm_event_tffs_read
+		&avm_event_read_from_binary_struct_wlan_event_data_scan_event_info
+		&avm_event_read_from_binary_struct_avm_event_mass_storage_unmount
+		&avm_event_read_from_binary_struct__avm_event_cmd_param_register
+		&avm_event_read_from_binary_struct__avm_event_cpu_run
+		&avm_event_read_from_binary_struct_avm_event_mass_storage_mount
+		&avm_event_read_from_binary_struct__avm_event_piglet
+		&avm_event_read_from_binary_struct__avm_event_smarthome
+		&avm_event_read_from_binary_struct_avm_event_pm_info_stat
 		&avm_event_read_from_binary_struct__avm_event_telefonprofile
-		&avm_event_read_from_binary_struct_avm_event_source_unregister
 		&avm_event_read_from_binary_struct_avm_event_push_button
-		&avm_event_read_from_binary_struct__avm_event_cmd_param_trigger
+		&avm_event_read_from_binary_struct_wlan_event_data_scan_common
+		&avm_event_read_from_binary_struct_avm_event_cpu_idle
+		&avm_event_read_from_binary_struct_cpmac_event_struct
+		&avm_event_read_from_binary_struct__avm_event_pm_info_stat
+		&avm_event_read_from_binary_struct__avm_event_cmd_param_source_trigger
+		&avm_event_read_from_binary_struct__avm_event_fax_file
 		&avm_event_read_from_binary_struct_avm_event_tffs_notify
-		&avm_event_read_from_binary_struct__avm_event_remotewatchdog
-		&avm_event_read_from_binary_struct_avm_event_powermanagment_remote
-		&avm_event_read_from_binary_struct_avm_event_tffs_open
-		&avm_event_read_from_binary_struct_avm_event_tffs_deinit
-		&avm_event_read_from_binary_struct_avm_event_wlan_credentials
-		&avm_event_read_from_binary_struct__avm_event_mass_storage_mount
+		&avm_event_read_from_binary_struct_avm_event_powermanagment_remote_ressourceinfo
+		&avm_event_read_from_binary_struct_avm_event_telefon_up
+		&avm_event_read_from_binary_struct_avm_event_tffs_init
+		&avm_event_read_from_binary_struct_avm_event_wlan
+		&avm_event_read_from_binary_struct__avm_event_powerline_status
 		&avm_event_read_from_binary_struct__avm_event_led_info
 		&avm_event_read_from_binary_struct_avm_event_led_status
-		&avm_event_read_from_binary_struct_avm_event_tffs_close
-		&avm_event_read_from_binary_struct_avm_event_telephony_string
-		&avm_event_read_from_binary_struct_wlan_event_def
-		&avm_event_read_from_binary_struct_avm_event_smarthome_switch_status
-		&avm_event_read_from_binary_struct__avm_event_piglet
-		&avm_event_read_from_binary_struct__avm_event_pm_info_stat
-		&avm_event_read_from_binary_struct_avm_event_data
-		&avm_event_read_from_binary_struct_avm_event_message
-		&avm_event_read_from_binary_struct_avm_event_tffs_cleanup
-		&avm_event_read_from_binary_struct_avm_event_internet_new_ip
-		&avm_event_read_from_binary_struct__avm_event_fax_file
-		&avm_event_read_from_binary_struct__avm_event_led_status
-		&avm_event_read_from_binary_struct_avm_event_tffs_info
 		&avm_event_read_from_binary_struct_avm_event_fax_status
-		&avm_event_read_from_binary_struct_avm_event_remotewatchdog
-		&avm_event_read_from_binary_struct_avm_event_telefonprofile
-		&avm_event_read_from_binary_struct__cpmac_event_struct
-		&avm_event_read_from_binary_struct_avm_event_fax_file
-		&avm_event_read_from_binary_struct_avm_event_tffs_read
-		&avm_event_read_from_binary_struct_avm_event_remotepcmlink
-		&avm_event_read_from_binary_struct_wlan_event_data_client_connect_info
-		&avm_event_read_from_binary_struct_wlan_event_data_radio_recovery
-		&avm_event_read_from_binary_struct_avm_event_tffs_reindex
-		&avm_event_read_from_binary_struct_avm_event_mass_storage_mount
-		&avm_event_read_from_binary_struct__avm_event_ambient_brightness
-		&avm_event_read_from_binary_struct__avm_event_mass_storage_unmount
-		&avm_event_read_from_binary_struct_avm_event_piglet
-		&avm_event_read_from_binary_struct_wlan_event_data_client_state_idle
-		&avm_event_read_from_binary_struct_avm_event_remote_source_trigger_request
-		&avm_event_read_from_binary_struct__avm_event_powermanagment_remote
-		&avm_event_read_from_binary_struct__avm_event_firmware_update_available
+		&avm_event_read_from_binary_struct__avm_event_checkpoint
 		&avm_event_read_from_binary_struct__avm_event_remotepcmlink
-		&avm_event_read_from_binary_struct_avm_event_source_notifier
-		&avm_event_read_from_binary_struct__avm_event_id_mask
-		&avm_event_read_from_binary_struct_avm_event_powermanagment_status
-		&avm_event_read_from_binary_struct__avm_event_rpc
-		&avm_event_read_from_binary_struct_avm_event_wlan
-		&avm_event_read_from_binary_struct_avm_event_telephony_missed_call
-		&avm_event_read_from_binary_struct_avm_event_telefon_up
-		&avm_event_read_from_binary_struct__avm_event_cmd
 		&avm_event_read_from_binary_struct__avm_event_wlan
-		&avm_event_read_from_binary_struct_avm_event_powermanagment_remote_ressourceinfo
-		&avm_event_read_from_binary_struct_avm_event_ambient_brightness
-		&avm_event_read_from_binary_struct__avm_event_powermanagment_remote_ressourceinfo
-		&avm_event_read_from_binary_struct_avm_event_firmware_update_available
-		&avm_event_read_from_binary_struct__avm_event_push_button
+		&avm_event_read_from_binary_struct_avm_event_boykott
 		&avm_event_read_from_binary_struct_cpmac_port
-		&avm_event_read_from_binary_struct_wlan_event_data_scan_event_info
-		&avm_event_read_from_binary_struct__avm_event_telephony_missed_call
-		&avm_event_read_from_binary_struct__avm_event_cmd_param_release
-		&avm_event_read_from_binary_struct_avm_event_source_register
-		&avm_event_read_from_binary_struct__avm_event_cpu_run
-		&avm_event_read_from_binary_struct__avm_event_log
-		&avm_event_read_from_binary_struct__avm_event_internet_new_ip
-		&avm_event_read_from_binary_struct__avm_event_header
-		&avm_event_read_from_binary_struct_wlan_event_data_scan_common
-		&avm_event_read_from_binary_struct__avm_event_checkpoint
-		&avm_event_read_from_binary_struct_avm_event_tffs
-		&avm_event_read_from_binary_struct_avm_event_ping
-		&avm_event_read_from_binary_struct_avm_event_powerline_status
+		&avm_event_read_from_binary_struct_avm_event_tffs_info
+		&avm_event_read_from_binary_struct__avm_event_powermanagment_remote_ressourceinfo
+		&avm_event_read_from_binary_struct_avm_event_remote_source_trigger_request
+		&avm_event_read_from_binary_struct__cpmac_event_struct
+		&avm_event_read_from_binary_struct_avm_event_powermanagment_status
+		&avm_event_read_from_binary_struct__avm_event_powermanagment_remote
+		&avm_event_read_from_binary_struct__avm_event_ambient_brightness
+		&avm_event_read_from_binary_struct_avm_event_telephony_missed_call
 		&avm_event_read_from_binary_struct_avm_event_rpc
-		&avm_event_read_from_binary_struct_avm_event_cpu_idle
-		&avm_event_read_from_binary_struct_wlan_event_data_client_common
-		&avm_event_read_from_binary_struct_avm_event_pm_info_stat
-		&avm_event_read_from_binary_struct__avm_event_powerline_status
-		&avm_event_read_from_binary_struct_wlan_event_data_client_state_change
+		&avm_event_read_from_binary_struct__avm_event_fax_status
+		&avm_event_read_from_binary_struct__avm_event_mass_storage_unmount
+		&avm_event_read_from_binary_struct__avm_event_internet_new_ip
 		&avm_event_read_from_binary_struct_avm_event_temperature
-		&avm_event_read_from_binary_struct_avm_event_user_mode_source_notify
-		&avm_event_read_from_binary_struct_avm_event_mass_storage_unmount
-		&avm_event_read_from_binary_struct_avm_event_log
-		&avm_event_read_from_binary_struct_avm_event_led_info
 		&avm_event_read_from_binary_struct_avm_event_tffs_paniclog
-		&avm_event_read_from_binary_struct_avm_event_tffs_init
-		&avm_event_read_from_binary_struct__avm_event_cmd_param_register
-		&avm_event_read_from_binary_struct_avm_event_smarthome
-		&avm_event_read_from_binary_struct__avm_event_user_mode_source_notify
-		&avm_event_read_from_binary_struct_avm_event_tffs_write
+		&avm_event_read_from_binary_struct_avm_event_source_register
+		&avm_event_read_from_binary_struct__avm_event_rpc
+		&avm_event_read_from_binary_struct_avm_event_internet_new_ip
+		&avm_event_read_from_binary_struct_avm_event_remotewatchdog
+		&avm_event_read_from_binary_struct_avm_event_tffs
+		&avm_event_read_from_binary_struct_avm_event_ambient_brightness
+		&avm_event_read_from_binary_struct_avm_event_fax_file
+		&avm_event_read_from_binary_struct_wlan_event_def
+		&avm_event_read_from_binary_struct__avm_event_log
 		&avm_event_read_from_binary_struct_avm_event_cpu_run
-		&avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params
+		&avm_event_read_from_binary_struct_avm_event_powermanagment_remote
+		&avm_event_read_from_binary_struct_wlan_event_data_radio_recovery
+		&avm_event_read_from_binary_struct__avm_event_cmd
 		&avm_event_read_from_binary_struct_avm_event_wlan_power
-		&avm_event_read_from_binary_struct_cpmac_event_struct
-		&avm_event_read_from_binary_struct__avm_event_temperature
-		&avm_event_read_from_binary_struct__avm_event_powermanagment_status
+		&avm_event_read_from_binary_struct_avm_event_log
+		&avm_event_read_from_binary_struct_avm_event_tffs_write
+		&avm_event_read_from_binary_struct_avm_event_source_unregister
+		&avm_event_read_from_binary_struct_avm_event_tffs_deinit
+		&avm_event_read_from_binary_struct_avm_event_source_notifier
+		&avm_event_read_from_binary_struct__avm_event_led_status
+		&avm_event_read_from_binary_struct_avm_event_unserialised
+		&avm_event_read_from_binary_struct_avm_event_telefonprofile
+		&avm_event_read_from_binary_struct_avm_event_tffs_close
+		&avm_event_read_from_binary_struct_avm_event_smarthome_switch_status
+		&avm_event_read_from_binary_struct_wlan_event_data_client_state_change
+		&avm_event_read_from_binary_struct__avm_event_remotewatchdog
+		&avm_event_read_from_binary_struct__avm_event_firmware_update_available
 	);
 
 @EXPORT_OK = qw();
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cpu_idle'
+# convert function for 'struct _avm_event_header'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cpu_idle {
+sub avm_event_read_from_binary_struct__avm_event_header {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -128,69 +128,68 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_header;
-	my $cpu_idle;
-	my $dsl_dsp_idle;
-	my $voice_dsp_idle;
-	my $mem_strictlyused;
-	my $mem_cacheused;
-	my $mem_physfree;
-	my $cputype;
+	my $id;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'cpu_idle' at offset '0'
-	$cpu_idle = unpack("C", $in_ref);
-	$offset += 1;
 
-	# c-struct component 'dsl_dsp_idle' at offset '1'
-	$dsl_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
+	####### return hash and used length #######
+	$return ( {
+		"id" => $id,
+	}, $offset );
+}
 
-	# c-struct component 'voice_dsp_idle' at offset '2'
-	$voice_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
 
-	# c-struct component 'mem_strictlyused' at offset '3'
-	$mem_strictlyused = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
+##########################################################################################
+# convert function for 'struct _avm_event_telephony_missed_call'
+##########################################################################################
+sub avm_event_read_from_binary_struct__avm_event_telephony_missed_call {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
 
-	# c-struct component 'mem_cacheused' at offset '4'
-	$mem_cacheused = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
+	####### liste of hash components #######
+	my $header;
+	my $length;
+	my $p;
 
-	# c-struct component 'mem_physfree' at offset '5'
-	$mem_physfree = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
+	####### convert binary message to hash components #######
 
-	# c-struct component 'cputype' at offset '6'
-	$cputype = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+	# c-struct component 'length' at offset '0'
+	$length = unpack("", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $length;
+
+	# c-struct component 'p' at offset '0'
+	( $p, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"cpu_idle" => $cpu_idle,
-		"dsl_dsp_idle" => $dsl_dsp_idle,
-		"voice_dsp_idle" => $voice_dsp_idle,
-		"mem_strictlyused" => $mem_strictlyused,
-		"mem_cacheused" => $mem_cacheused,
-		"mem_physfree" => $mem_physfree,
-		"cputype" => $cputype,
+		"header" => $header,
+		"length" => $length,
+		"p" => $p,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_unserialised'
+# convert function for 'struct wlan_event_data_client_connect_info'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_unserialised {
+sub avm_event_read_from_binary_struct_wlan_event_data_client_connect_info {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -198,38 +197,51 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $evnt_id;
-	my $data_len;
-	my $data;
+	my $common;
+	my $info_context;
+	my $reason;
+	my $max_node_count;
+	my $ieee80211_code;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'evnt_id' at offset '0'
-	$evnt_id = unpack(">L", $in_ref);
-	$offset += 8;
+	# c-struct component 'common' at offset '0'
+	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_client_common(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	# c-struct component 'data_len' at offset '8'
-	$data_len = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'info_context' at offset '0'
+	$info_context = unpack(">S", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'data' at offset '20'
-	$data = unpack("a" . $offset . "/C", $in_ref);
+	# c-struct component 'reason' at offset '1'
+	$reason = unpack("a" . $offset . "/>S", $in_ref);
 	$offset += 1;
 
+	# c-struct component 'max_node_count' at offset '2'
+	$max_node_count = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'ieee80211_code' at offset '14'
+	$ieee80211_code = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"evnt_id" => $evnt_id,
-		"data_len" => $data_len,
-		"data" => $data,
+		"common" => $common,
+		"info_context" => $info_context,
+		"reason" => $reason,
+		"max_node_count" => $max_node_count,
+		"ieee80211_code" => $ieee80211_code,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_smarthome'
+# convert function for 'struct avm_event_smarthome'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_smarthome {
+sub avm_event_read_from_binary_struct_avm_event_smarthome {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -237,7 +249,6 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
 	my $length;
 	my @ident = ();
 	my $type;
@@ -245,11 +256,6 @@
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
 	# c-struct component 'length' at offset '0'
 	$length = unpack("", $in_ref);
 	$offset += 0;
@@ -273,7 +279,6 @@
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
 		"length" => $length,
 		"ident" => [ @ident ],
 		"type" => $type,
@@ -283,9 +288,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_checkpoint'
+# convert function for 'struct avm_event_powerline_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_checkpoint {
+sub avm_event_read_from_binary_struct_avm_event_powerline_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -293,32 +298,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $node_id;
-	my $checkpoints;
+	my $status;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'node_id' at offset '0'
-	$node_id = unpack(">I>I>I", $in_ref);
+	# c-struct component 'status' at offset '0'
+	$status = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'checkpoints' at offset '12'
-	$checkpoints = unpack("a" . $offset . "/>L", $in_ref);
-	$offset += 8;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"node_id" => $node_id,
-		"checkpoints" => $checkpoints,
+		"status" => $status,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_boykott'
+# convert function for 'struct _avm_event_cmd_param_trigger'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_boykott {
+sub avm_event_read_from_binary_struct__avm_event_cmd_param_trigger {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -326,27 +325,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $dummy;
+	my $id;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'dummy' at offset '0'
-	( $dummy, $struct_offset ) = avm_event_read_from_binary_struct_{}(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"dummy" => $dummy,
+		"id" => $id,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_smarthome_switch_status'
+# convert function for 'struct _avm_event_telephony_missed_call_params'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_smarthome_switch_status {
+sub avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -354,55 +352,67 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
-	my $type;
-	my $value;
-	my $ain_length;
-	my @ain = ();
+	my $id;
+	my $params;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'params' at offset '4'
+	( $params, $struct_offset ) = avm_event_read_from_binary_union_avm_event_telephony_call_params(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
-	$offset += 4;
 
-	# c-struct component 'value' at offset '4'
-	$value = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
+	####### return hash and used length #######
+	$return ( {
+		"id" => $id,
+		"params" => $params,
+	}, $offset );
+}
 
-	# c-struct component 'ain_length' at offset '4'
-	$ain_length = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-	$array_element_anzahl  = $ain_length;
 
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+##########################################################################################
+# convert function for 'struct avm_event_data'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_data {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
 
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+	####### liste of hash components #######
+	my $id;
+	my $data;
 
-		$ain[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
+	####### convert binary message to hash components #######
+
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'data' at offset '4'
+	( $data, $struct_offset ) = avm_event_read_from_binary_union_avm_event_data_union(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"type" => $type,
-		"value" => $value,
-		"ain_length" => $ain_length,
-		"ain" => [ @ain ],
+		"id" => $id,
+		"data" => $data,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_fax_status'
+# convert function for 'struct _avm_event_powermanagment_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_fax_status {
+sub avm_event_read_from_binary_struct__avm_event_powermanagment_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -410,55 +420,79 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
-	my $fax_receive_mode;
-	my $fax_storage_dest;
-	my $dirname_length;
-	my @dirname = ();
+	my $event_header;
+	my $substatus;
+	my $param;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'fax_receive_mode' at offset '0'
-	$fax_receive_mode = unpack(">I", $in_ref);
+	# c-struct component 'substatus' at offset '0'
+	$substatus = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'fax_storage_dest' at offset '4'
-	$fax_storage_dest = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'param' at offset '4'
+	( $param, $struct_offset ) = avm_event_read_from_binary_union___powermanagment_status_union(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	# c-struct component 'dirname_length' at offset '8'
-	$dirname_length = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-	$array_element_anzahl  = $dirname_length;
 
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+	####### return hash and used length #######
+	$return ( {
+		"event_header" => $event_header,
+		"substatus" => $substatus,
+		"param" => $param,
+	}, $offset );
+}
 
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-		$dirname[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
+##########################################################################################
+# convert function for 'struct wlan_event_data_client_common'
+##########################################################################################
+sub avm_event_read_from_binary_struct_wlan_event_data_client_common {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $mac;
+	my $iface;
+	my $initiator;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'mac' at offset '0'
+	$mac = unpack(">S6", $in_ref);
+	$offset += 6;
+
+	# c-struct component 'iface' at offset '6'
+	$iface = unpack("a" . $offset . "/CIFNAMSIZ + 1", $in_ref);
+	$offset += IFNAMSIZ + 1;
+
+	# c-struct component 'initiator' at offset '6'
+	$initiator = unpack("a" . $offset . "/C16 + 1", $in_ref);
+	$offset += 16 + 1;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"fax_receive_mode" => $fax_receive_mode,
-		"fax_storage_dest" => $fax_storage_dest,
-		"dirname_length" => $dirname_length,
-		"dirname" => [ @dirname ],
+		"mac" => $mac,
+		"iface" => $iface,
+		"initiator" => $initiator,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cmd_param_source_trigger'
+# convert function for 'struct avm_event_piglet'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cmd_param_source_trigger {
+sub avm_event_read_from_binary_struct_avm_event_piglet {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -466,32 +500,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
-	my $data_length;
+	my $type;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'data_length' at offset '4'
-	$data_length = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
-		"data_length" => $data_length,
+		"type" => $type,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_telefonprofile'
+# convert function for 'struct _avm_event_temperature'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_telefonprofile {
+sub avm_event_read_from_binary_struct__avm_event_temperature {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -500,7 +528,7 @@
 
 	####### liste of hash components #######
 	my $event_header;
-	my $on;
+	my $temperature;
 
 	####### convert binary message to hash components #######
 
@@ -509,23 +537,23 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'on' at offset '0'
-	$on = unpack("", $in_ref);
+	# c-struct component 'temperature' at offset '0'
+	$temperature = unpack("", $in_ref);
 	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
 		"event_header" => $event_header,
-		"on" => $on,
+		"temperature" => $temperature,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_source_unregister'
+# convert function for 'struct wlan_event_data_client_state_idle'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_source_unregister {
+sub avm_event_read_from_binary_struct_wlan_event_data_client_state_idle {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -533,33 +561,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id_mask;
-	my $name;
+	my $common;
+	my $idle;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id_mask' at offset '0'
-	( $id_mask, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_id_mask(
+	# c-struct component 'common' at offset '0'
+	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_client_common(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'name' at offset '0'
-	$name = unpack("C32", $in_ref);
-	$offset += 32;
+	# c-struct component 'idle' at offset '0'
+	$idle = unpack(">S", $in_ref);
+	$offset += 1;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"id_mask" => $id_mask,
-		"name" => $name,
+		"common" => $common,
+		"idle" => $idle,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_push_button'
+# convert function for 'struct avm_event_firmware_update_available'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_push_button {
+sub avm_event_read_from_binary_struct_avm_event_firmware_update_available {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -567,32 +595,42 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $key;
-	my $pressed;
+	my $type;
+	my $version_length;
+	my @version = ();
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'key' at offset '0'
-	$key = unpack(">I", $in_ref);
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'pressed' at offset '4'
-	$pressed = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'version_length' at offset '4'
+	$version_length = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $version_length;
+
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$version[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"key" => $key,
-		"pressed" => $pressed,
+		"type" => $type,
+		"version_length" => $version_length,
+		"version" => [ @version ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cmd_param_trigger'
+# convert function for 'struct _avm_event_id_mask'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cmd_param_trigger {
+sub avm_event_read_from_binary_struct__avm_event_id_mask {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -600,26 +638,27 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
+	my $mask;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'mask' at offset '0'
+	( $mask, $struct_offset ) = avm_event_read_from_binary_avm_event_mask_fieldentry(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
+		"mask" => $mask,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_notify'
+# convert function for 'struct avm_event_tffs_reindex'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_notify {
+sub avm_event_read_from_binary_struct_avm_event_tffs_reindex {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -627,32 +666,59 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
-	my $event;
+	my $dummy;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I>I>I", $in_ref);
+	# c-struct component 'dummy' at offset '0'
+	$dummy = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'event' at offset '12'
-	$event = unpack("a" . $offset . "/>I", $in_ref);
+
+	####### return hash and used length #######
+	$return ( {
+		"dummy" => $dummy,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_checkpoint'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_checkpoint {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $node_id;
+	my $checkpoints;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'node_id' at offset '0'
+	$node_id = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'checkpoints' at offset '12'
+	$checkpoints = unpack("a" . $offset . "/>L", $in_ref);
+	$offset += 8;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
-		"event" => $event,
+		"node_id" => $node_id,
+		"checkpoints" => $checkpoints,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_remotewatchdog'
+# convert function for 'struct avm_event_message'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_remotewatchdog {
+sub avm_event_read_from_binary_struct_avm_event_message {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -660,45 +726,75 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_header;
-	my $cmd;
-	my $name;
-	my $param;
+	my $length;
+	my $magic;
+	my $nonce;
+	my $flags;
+	my $result;
+	my $transmitter_handle;
+	my $receiver_handle;
+	my $type;
+	my $message;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'length' at offset '0'
+	$length = unpack(">I>I>I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'cmd' at offset '0'
-	$cmd = unpack(">I", $in_ref);
+	# c-struct component 'magic' at offset '12'
+	$magic = unpack("a" . $offset . "/>I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'name' at offset '4'
-	$name = unpack("a" . $offset . "/C16", $in_ref);
-	$offset += 16;
+	# c-struct component 'nonce' at offset '24'
+	$nonce = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'param' at offset '20'
-	$param = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
+	# c-struct component 'flags' at offset '36'
+	$flags = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'result' at offset '48'
+	$result = unpack("a" . $offset . "/>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'transmitter_handle' at offset '56'
+	$transmitter_handle = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'receiver_handle' at offset '68'
+	$receiver_handle = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'type' at offset '80'
+	$type = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'message' at offset '84'
+	( $message, $struct_offset ) = avm_event_read_from_binary_union_avm_event_message_union(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"cmd" => $cmd,
-		"name" => $name,
-		"param" => $param,
+		"length" => $length,
+		"magic" => $magic,
+		"nonce" => $nonce,
+		"flags" => $flags,
+		"result" => $result,
+		"transmitter_handle" => $transmitter_handle,
+		"receiver_handle" => $receiver_handle,
+		"type" => $type,
+		"message" => $message,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_powermanagment_remote'
+# convert function for 'struct _avm_event_user_mode_source_notify'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_powermanagment_remote {
+sub avm_event_read_from_binary_struct__avm_event_user_mode_source_notify {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -706,25 +802,25 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $remote_action;
-	my $param;
+	my $header;
+	my $id;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'remote_action' at offset '0'
-	$remote_action = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'param' at offset '4'
-	( $param, $struct_offset ) = avm_event_read_from_binary_union_avm_event_powermanagment_remote_union(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"remote_action" => $remote_action,
-		"param" => $param,
+		"header" => $header,
+		"id" => $id,
 	}, $offset );
 }
 
@@ -769,9 +865,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_deinit'
+# convert function for 'struct avm_event_user_mode_source_notify'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_deinit {
+sub avm_event_read_from_binary_struct_avm_event_user_mode_source_notify {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -779,26 +875,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $dummy;
+	my $id;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'dummy' at offset '0'
-	$dummy = unpack(">I>I>I", $in_ref);
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
 	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"dummy" => $dummy,
+		"id" => $id,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_wlan_credentials'
+# convert function for 'struct avm_event_led_info'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_wlan_credentials {
+sub avm_event_read_from_binary_struct_avm_event_led_info {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -806,36 +902,91 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $ssid;
-	my $bssid;
-	my $key;
-	my $security;
+	my $mode;
+	my $param1;
+	my $param2;
+	my $gpio_driver_type;
+	my $gpio;
+	my $pos;
+	my $name;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'ssid' at offset '0'
-	$ssid = unpack("C33", $in_ref);
-	$offset += 33;
+	# c-struct component 'mode' at offset '0'
+	$mode = unpack("", $in_ref);
+	$offset += 0;
 
-	# c-struct component 'bssid' at offset '33'
-	$bssid = unpack("a" . $offset . "/C6", $in_ref);
-	$offset += 6;
+	# c-struct component 'param1' at offset '0'
+	$param1 = unpack("", $in_ref);
+	$offset += 0;
 
-	# c-struct component 'key' at offset '39'
-	$key = unpack("a" . $offset . "/C65", $in_ref);
-	$offset += 65;
+	# c-struct component 'param2' at offset '0'
+	$param2 = unpack("", $in_ref);
+	$offset += 0;
 
-	# c-struct component 'security' at offset '104'
-	$security = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'gpio_driver_type' at offset '0'
+	$gpio_driver_type = unpack("", $in_ref);
 	$offset += 0;
 
+	# c-struct component 'gpio' at offset '0'
+	$gpio = unpack("", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'pos' at offset '0'
+	$pos = unpack("", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'name' at offset '0'
+	$name = unpack("C32", $in_ref);
+	$offset += 32;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"ssid" => $ssid,
-		"bssid" => $bssid,
-		"key" => $key,
-		"security" => $security,
+		"mode" => $mode,
+		"param1" => $param1,
+		"param2" => $param2,
+		"gpio_driver_type" => $gpio_driver_type,
+		"gpio" => $gpio,
+		"pos" => $pos,
+		"name" => $name,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_telephony_string'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_telephony_string {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $length;
+	my @string = ();
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'length' at offset '0'
+	$length = unpack("", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $length;
+
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$string[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
+
+
+	####### return hash and used length #######
+	$return ( {
+		"length" => $length,
+		"string" => [ @string ],
 	}, $offset );
 }
 
@@ -897,9 +1048,79 @@
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_led_info'
+# convert function for 'struct _avm_event_cpu_idle'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_led_info {
+sub avm_event_read_from_binary_struct__avm_event_cpu_idle {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $event_header;
+	my $cpu_idle;
+	my $dsl_dsp_idle;
+	my $voice_dsp_idle;
+	my $mem_strictlyused;
+	my $mem_cacheused;
+	my $mem_physfree;
+	my $cputype;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+	# c-struct component 'cpu_idle' at offset '0'
+	$cpu_idle = unpack("C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'dsl_dsp_idle' at offset '1'
+	$dsl_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'voice_dsp_idle' at offset '2'
+	$voice_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'mem_strictlyused' at offset '3'
+	$mem_strictlyused = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'mem_cacheused' at offset '4'
+	$mem_cacheused = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'mem_physfree' at offset '5'
+	$mem_physfree = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'cputype' at offset '6'
+	$cputype = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"event_header" => $event_header,
+		"cpu_idle" => $cpu_idle,
+		"dsl_dsp_idle" => $dsl_dsp_idle,
+		"voice_dsp_idle" => $voice_dsp_idle,
+		"mem_strictlyused" => $mem_strictlyused,
+		"mem_cacheused" => $mem_cacheused,
+		"mem_physfree" => $mem_physfree,
+		"cputype" => $cputype,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct _avm_event_smarthome_switch_status'
+##########################################################################################
+sub avm_event_read_from_binary_struct__avm_event_smarthome_switch_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -908,13 +1129,10 @@
 
 	####### liste of hash components #######
 	my $header;
-	my $mode;
-	my $param1;
-	my $param2;
-	my $gpio_driver_type;
-	my $gpio;
-	my $pos;
-	my $name;
+	my $type;
+	my $value;
+	my $ain_length;
+	my @ain = ();
 
 	####### convert binary message to hash components #######
 
@@ -923,53 +1141,42 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'mode' at offset '0'
-	$mode = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'param1' at offset '0'
-	$param1 = unpack("", $in_ref);
-	$offset += 0;
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'param2' at offset '0'
-	$param2 = unpack("", $in_ref);
+	# c-struct component 'value' at offset '4'
+	$value = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'gpio_driver_type' at offset '0'
-	$gpio_driver_type = unpack("", $in_ref);
+	# c-struct component 'ain_length' at offset '4'
+	$ain_length = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
+	$array_element_anzahl  = $ain_length;
 
-	# c-struct component 'gpio' at offset '0'
-	$gpio = unpack("", $in_ref);
-	$offset += 0;
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
-	# c-struct component 'pos' at offset '0'
-	$pos = unpack("", $in_ref);
-	$offset += 0;
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-	# c-struct component 'name' at offset '0'
-	$name = unpack("C32", $in_ref);
-	$offset += 32;
+		$ain[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
 		"header" => $header,
-		"mode" => $mode,
-		"param1" => $param1,
-		"param2" => $param2,
-		"gpio_driver_type" => $gpio_driver_type,
-		"gpio" => $gpio,
-		"pos" => $pos,
-		"name" => $name,
+		"type" => $type,
+		"value" => $value,
+		"ain_length" => $ain_length,
+		"ain" => [ @ain ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_led_status'
+# convert function for 'struct _avm_event_cmd_param_release'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_led_status {
+sub avm_event_read_from_binary_struct__avm_event_cmd_param_release {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -977,44 +1184,98 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $led;
-	my $state;
-	my $param_len;
-	my $params;
+	my $Name;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'led' at offset '0'
-	$led = unpack(">I", $in_ref);
+	# c-struct component 'Name' at offset '0'
+	$Name = unpack("CMAX_EVENT_CLIENT_NAME_LEN + 1", $in_ref);
+	$offset += MAX_EVENT_CLIENT_NAME_LEN + 1;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"Name" => $Name,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_ping'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_ping {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $seq;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'seq' at offset '0'
+	$seq = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'state' at offset '4'
-	$state = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
 
-	# c-struct component 'param_len' at offset '4'
-	$param_len = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
+	####### return hash and used length #######
+	$return ( {
+		"seq" => $seq,
+	}, $offset );
+}
 
-	# c-struct component 'params' at offset '4'
-	$params = unpack("a" . $offset . "/C245", $in_ref);
-	$offset += 245;
+
+##########################################################################################
+# convert function for 'struct avm_event_wlan_credentials'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_wlan_credentials {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $ssid;
+	my $bssid;
+	my $key;
+	my $security;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'ssid' at offset '0'
+	$ssid = unpack("C33", $in_ref);
+	$offset += 33;
+
+	# c-struct component 'bssid' at offset '33'
+	$bssid = unpack("a" . $offset . "/C6", $in_ref);
+	$offset += 6;
+
+	# c-struct component 'key' at offset '39'
+	$key = unpack("a" . $offset . "/C65", $in_ref);
+	$offset += 65;
+
+	# c-struct component 'security' at offset '104'
+	$security = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"led" => $led,
-		"state" => $state,
-		"param_len" => $param_len,
-		"params" => $params,
+		"ssid" => $ssid,
+		"bssid" => $bssid,
+		"key" => $key,
+		"security" => $security,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_close'
+# convert function for 'struct avm_event_tffs_cleanup'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_close {
+sub avm_event_read_from_binary_struct_avm_event_tffs_cleanup {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1039,9 +1300,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_telephony_string'
+# convert function for 'struct avm_event_remotepcmlink'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_telephony_string {
+sub avm_event_read_from_binary_struct_avm_event_remotepcmlink {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1049,36 +1310,193 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $length;
-	my @string = ();
+	my $type;
+	my $sharedlen;
+	my $sharedpointer;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'length' at offset '0'
-	$length = unpack("", $in_ref);
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'sharedlen' at offset '4'
+	$sharedlen = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $length;
+
+	# c-struct component 'sharedpointer' at offset '4'
+	$sharedpointer = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"type" => $type,
+		"sharedlen" => $sharedlen,
+		"sharedpointer" => $sharedpointer,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct _avm_event_push_button'
+##########################################################################################
+sub avm_event_read_from_binary_struct__avm_event_push_button {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $id;
+	my $key;
+	my $pressed;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'key' at offset '4'
+	$key = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'pressed' at offset '8'
+	$pressed = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"id" => $id,
+		"key" => $key,
+		"pressed" => $pressed,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_tffs_read'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_tffs_read {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $buff_addr;
+	my $len;
+	my $id;
+	my $crc;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'buff_addr' at offset '0'
+	$buff_addr = unpack(">L", $in_ref);
+	$offset += 8;
+
+	# c-struct component 'len' at offset '8'
+	$len = unpack("a" . $offset . "/>L", $in_ref);
+	$offset += 8;
+
+	# c-struct component 'id' at offset '16'
+	$id = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'crc' at offset '28'
+	$crc = unpack("a" . $offset . "/>I>I", $in_ref);
+	$offset += 4;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"buff_addr" => $buff_addr,
+		"len" => $len,
+		"id" => $id,
+		"crc" => $crc,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct wlan_event_data_scan_event_info'
+##########################################################################################
+sub avm_event_read_from_binary_struct_wlan_event_data_scan_event_info {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $common;
+	my $event_type;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'common' at offset '0'
+	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_scan_common(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+	# c-struct component 'event_type' at offset '0'
+	$event_type = unpack(">I", $in_ref);
+	$offset += 4;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"common" => $common,
+		"event_type" => $event_type,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_mass_storage_unmount'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_mass_storage_unmount {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $name_length;
+	my @name = ();
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'name_length' at offset '0'
+	$name_length = unpack("", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $name_length;
 
 	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
 		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-		$string[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+		$name[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
 	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"length" => $length,
-		"string" => [ @string ],
+		"name_length" => $name_length,
+		"name" => [ @name ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct wlan_event_def'
+# convert function for 'struct _avm_event_cmd_param_register'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_def {
+sub avm_event_read_from_binary_struct__avm_event_cmd_param_register {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1086,33 +1504,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_id;
-	my $event_data;
+	my $mask;
+	my $Name;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_id' at offset '0'
-	$event_id = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'event_data' at offset '4'
-	( $event_data, $struct_offset ) = avm_event_read_from_binary_union_wlan_event_data(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	# c-struct component 'mask' at offset '0'
+	( $mask, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_id_mask(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
+	# c-struct component 'Name' at offset '0'
+	$Name = unpack("CMAX_EVENT_CLIENT_NAME_LEN + 1", $in_ref);
+	$offset += MAX_EVENT_CLIENT_NAME_LEN + 1;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"event_id" => $event_id,
-		"event_data" => $event_data,
+		"mask" => $mask,
+		"Name" => $Name,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_smarthome_switch_status'
+# convert function for 'struct _avm_event_cpu_run'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_smarthome_switch_status {
+sub avm_event_read_from_binary_struct__avm_event_cpu_run {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1120,40 +1538,80 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $type;
-	my $value;
-	my $ain_length;
-	my @ain = ();
+	my $event_header;
+	my $cputype;
+	my $cpu_run;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+	# c-struct component 'cputype' at offset '0'
+	$cputype = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'value' at offset '4'
-	$value = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'cpu_run' at offset '4'
+	$cpu_run = unpack("a" . $offset . "/C4", $in_ref);
+	$offset += 4;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"event_header" => $event_header,
+		"cputype" => $cputype,
+		"cpu_run" => $cpu_run,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_mass_storage_mount'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_mass_storage_mount {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
+	my $size;
+	my $free;
+	my $name_length;
+	my @name = ();
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'size' at offset '0'
+	$size = unpack("", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'ain_length' at offset '4'
-	$ain_length = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'free' at offset '0'
+	$free = unpack("", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $ain_length;
+
+	# c-struct component 'name_length' at offset '0'
+	$name_length = unpack("", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $name_length;
 
 	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
 		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-		$ain[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+		$name[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
 	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"type" => $type,
-		"value" => $value,
-		"ain_length" => $ain_length,
-		"ain" => [ @ain ],
+		"size" => $size,
+		"free" => $free,
+		"name_length" => $name_length,
+		"name" => [ @name ],
 	}, $offset );
 }
 
@@ -1193,9 +1651,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_pm_info_stat'
+# convert function for 'struct _avm_event_smarthome'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_pm_info_stat {
+sub avm_event_read_from_binary_struct__avm_event_smarthome {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1204,6 +1662,61 @@
 
 	####### liste of hash components #######
 	my $header;
+	my $length;
+	my @ident = ();
+	my $type;
+	my $payload;
+
+	####### convert binary message to hash components #######
+
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+	# c-struct component 'length' at offset '0'
+	$length = unpack("", $in_ref);
+	$offset += 0;
+
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$ident[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
+
+	# c-struct component 'type' at offset '20'
+	$type = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'payload' at offset '20'
+	( $payload, $struct_offset ) = avm_event_read_from_binary_struct_{}(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+
+	####### return hash and used length #######
+	$return ( {
+		"header" => $header,
+		"length" => $length,
+		"ident" => [ @ident ],
+		"type" => $type,
+		"payload" => $payload,
+	}, $offset );
+}
+
+
+##########################################################################################
+# convert function for 'struct avm_event_pm_info_stat'
+##########################################################################################
+sub avm_event_read_from_binary_struct_avm_event_pm_info_stat {
+	my ( $msg_length, $in_ref ) = $@;
+	my $offset = 0;
+	my $struct_offset;
+	my $array_element_anzahl = 0;
+	my $array_element_size = 1;
+
+	####### liste of hash components #######
 	my $reserved1;
 	my $rate_sumact;
 	my $rate_sumcum;
@@ -1241,11 +1754,6 @@
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
 	# c-struct component 'reserved1' at offset '0'
 	$reserved1 = unpack("C", $in_ref);
 	$offset += 1;
@@ -1385,7 +1893,6 @@
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
 		"reserved1" => $reserved1,
 		"rate_sumact" => $rate_sumact,
 		"rate_sumcum" => $rate_sumcum,
@@ -1425,9 +1932,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_data'
+# convert function for 'struct _avm_event_telefonprofile'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_data {
+sub avm_event_read_from_binary_struct__avm_event_telefonprofile {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1435,33 +1942,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
-	my $data;
+	my $event_header;
+	my $on;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'data' at offset '4'
-	( $data, $struct_offset ) = avm_event_read_from_binary_union_avm_event_data_union(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
+	# c-struct component 'on' at offset '0'
+	$on = unpack("", $in_ref);
+	$offset += 0;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
-		"data" => $data,
+		"event_header" => $event_header,
+		"on" => $on,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_message'
+# convert function for 'struct avm_event_push_button'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_message {
+sub avm_event_read_from_binary_struct_avm_event_push_button {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1469,75 +1976,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $length;
-	my $magic;
-	my $nonce;
-	my $flags;
-	my $result;
-	my $transmitter_handle;
-	my $receiver_handle;
-	my $type;
-	my $message;
+	my $key;
+	my $pressed;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'length' at offset '0'
-	$length = unpack(">I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'magic' at offset '12'
-	$magic = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'nonce' at offset '24'
-	$nonce = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'flags' at offset '36'
-	$flags = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'result' at offset '48'
-	$result = unpack("a" . $offset . "/>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'transmitter_handle' at offset '56'
-	$transmitter_handle = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	# c-struct component 'key' at offset '0'
+	$key = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'receiver_handle' at offset '68'
-	$receiver_handle = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	# c-struct component 'pressed' at offset '4'
+	$pressed = unpack("a" . $offset . "/>I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'type' at offset '80'
-	$type = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'message' at offset '84'
-	( $message, $struct_offset ) = avm_event_read_from_binary_union_avm_event_message_union(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"length" => $length,
-		"magic" => $magic,
-		"nonce" => $nonce,
-		"flags" => $flags,
-		"result" => $result,
-		"transmitter_handle" => $transmitter_handle,
-		"receiver_handle" => $receiver_handle,
-		"type" => $type,
-		"message" => $message,
+		"key" => $key,
+		"pressed" => $pressed,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_cleanup'
+# convert function for 'struct wlan_event_data_scan_common'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_cleanup {
+sub avm_event_read_from_binary_struct_wlan_event_data_scan_common {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1545,26 +2009,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $dummy;
+	my $iface;
+	my $initiator;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'dummy' at offset '0'
-	$dummy = unpack(">I>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'iface' at offset '0'
+	$iface = unpack("CIFNAMSIZ + 1", $in_ref);
+	$offset += IFNAMSIZ + 1;
+
+	# c-struct component 'initiator' at offset '0'
+	$initiator = unpack("C16 + 1", $in_ref);
+	$offset += 16 + 1;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"dummy" => $dummy,
+		"iface" => $iface,
+		"initiator" => $initiator,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_internet_new_ip'
+# convert function for 'struct avm_event_cpu_idle'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_internet_new_ip {
+sub avm_event_read_from_binary_struct_avm_event_cpu_idle {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1572,33 +2042,62 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $sel;
-	my $params;
+	my $cpu_idle;
+	my $dsl_dsp_idle;
+	my $voice_dsp_idle;
+	my $mem_strictlyused;
+	my $mem_cacheused;
+	my $mem_physfree;
+	my $cputype;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'sel' at offset '0'
-	$sel = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'cpu_idle' at offset '0'
+	$cpu_idle = unpack("C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'params' at offset '4'
-	( $params, $struct_offset ) = avm_event_read_from_binary_union_avm_event_internet_new_ip_param(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'dsl_dsp_idle' at offset '1'
+	$dsl_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'voice_dsp_idle' at offset '2'
+	$voice_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'mem_strictlyused' at offset '3'
+	$mem_strictlyused = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'mem_cacheused' at offset '4'
+	$mem_cacheused = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'mem_physfree' at offset '5'
+	$mem_physfree = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'cputype' at offset '6'
+	$cputype = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"sel" => $sel,
-		"params" => $params,
+		"cpu_idle" => $cpu_idle,
+		"dsl_dsp_idle" => $dsl_dsp_idle,
+		"voice_dsp_idle" => $voice_dsp_idle,
+		"mem_strictlyused" => $mem_strictlyused,
+		"mem_cacheused" => $mem_cacheused,
+		"mem_physfree" => $mem_physfree,
+		"cputype" => $cputype,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_fax_file'
+# convert function for 'struct cpmac_event_struct'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_fax_file {
+sub avm_event_read_from_binary_struct_cpmac_event_struct {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1606,40 +2105,40 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
-	my $action;
-	my $date;
+	my $event_header;
+	my $ports;
+	my $port;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'action' at offset '0'
-	$action = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'ports' at offset '0'
+	$ports = unpack("", $in_ref);
+	$offset += 0;
 
-	# c-struct component 'date' at offset '4'
-	( $date, $struct_offset ) = avm_event_read_from_binary_time_t(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	# c-struct component 'port' at offset '0'
+	( $port, $struct_offset ) = avm_event_read_from_binary_struct_cpmac_port(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"action" => $action,
-		"date" => $date,
+		"event_header" => $event_header,
+		"ports" => $ports,
+		"port" => $port,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_led_status'
+# convert function for 'struct _avm_event_pm_info_stat'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_led_status {
+sub avm_event_read_from_binary_struct__avm_event_pm_info_stat {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1648,10 +2147,40 @@
 
 	####### liste of hash components #######
 	my $header;
-	my $led;
-	my $state;
-	my $param_len;
-	my $params;
+	my $reserved1;
+	my $rate_sumact;
+	my $rate_sumcum;
+	my $rate_systemact;
+	my $rate_systemcum;
+	my $system_status;
+	my $rate_dspact;
+	my $rate_dspcum;
+	my $rate_wlanact;
+	my $rate_wlancum;
+	my $wlan_devices;
+	my $wlan_status;
+	my $rate_ethact;
+	my $rate_ethcum;
+	my $eth_status;
+	my $rate_abact;
+	my $rate_abcum;
+	my $isdn_status;
+	my $rate_dectact;
+	my $rate_dectcum;
+	my $rate_battchargeact;
+	my $rate_battchargecum;
+	my $dect_status;
+	my $rate_usbhostact;
+	my $rate_usbhostcum;
+	my $usb_status;
+	my $act_temperature;
+	my $min_temperature;
+	my $max_temperature;
+	my $avg_temperature;
+	my $rate_lteact;
+	my $rate_ltecum;
+	my $rate_dvbcact;
+	my $rate_dvbccum;
 
 	####### convert binary message to hash components #######
 
@@ -1660,180 +2189,188 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'led' at offset '0'
-	$led = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'state' at offset '4'
-	$state = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'param_len' at offset '4'
-	$param_len = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'params' at offset '4'
-	$params = unpack("a" . $offset . "/C245", $in_ref);
-	$offset += 245;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"header" => $header,
-		"led" => $led,
-		"state" => $state,
-		"param_len" => $param_len,
-		"params" => $params,
-	}, $offset );
-}
+	# c-struct component 'reserved1' at offset '0'
+	$reserved1 = unpack("C", $in_ref);
+	$offset += 1;
 
+	# c-struct component 'rate_sumact' at offset '1'
+	$rate_sumact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-##########################################################################################
-# convert function for 'struct avm_event_tffs_info'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_info {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
+	# c-struct component 'rate_sumcum' at offset '2'
+	$rate_sumcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### liste of hash components #######
-	my $fill_level;
+	# c-struct component 'rate_systemact' at offset '3'
+	$rate_systemact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### convert binary message to hash components #######
+	# c-struct component 'rate_systemcum' at offset '4'
+	$rate_systemcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'fill_level' at offset '0'
-	$fill_level = unpack(">I>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'system_status' at offset '5'
+	$system_status = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
+	# c-struct component 'rate_dspact' at offset '6'
+	$rate_dspact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### return hash and used length #######
-	$return ( {
-		"fill_level" => $fill_level,
-	}, $offset );
-}
+	# c-struct component 'rate_dspcum' at offset '7'
+	$rate_dspcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
+	# c-struct component 'rate_wlanact' at offset '8'
+	$rate_wlanact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-##########################################################################################
-# convert function for 'struct avm_event_fax_status'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_fax_status {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
+	# c-struct component 'rate_wlancum' at offset '9'
+	$rate_wlancum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### liste of hash components #######
-	my $fax_receive_mode;
-	my $fax_storage_dest;
-	my $dirname_length;
-	my @dirname = ();
+	# c-struct component 'wlan_devices' at offset '10'
+	$wlan_devices = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### convert binary message to hash components #######
+	# c-struct component 'wlan_status' at offset '11'
+	$wlan_status = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'fax_receive_mode' at offset '0'
-	$fax_receive_mode = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'rate_ethact' at offset '12'
+	$rate_ethact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'fax_storage_dest' at offset '4'
-	$fax_storage_dest = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'rate_ethcum' at offset '13'
+	$rate_ethcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'dirname_length' at offset '8'
-	$dirname_length = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'eth_status' at offset '14'
+	$eth_status = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $dirname_length;
 
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+	# c-struct component 'rate_abact' at offset '14'
+	$rate_abact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+	# c-struct component 'rate_abcum' at offset '15'
+	$rate_abcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-		$dirname[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
+	# c-struct component 'isdn_status' at offset '16'
+	$isdn_status = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
+	# c-struct component 'rate_dectact' at offset '16'
+	$rate_dectact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### return hash and used length #######
-	$return ( {
-		"fax_receive_mode" => $fax_receive_mode,
-		"fax_storage_dest" => $fax_storage_dest,
-		"dirname_length" => $dirname_length,
-		"dirname" => [ @dirname ],
-	}, $offset );
-}
+	# c-struct component 'rate_dectcum' at offset '17'
+	$rate_dectcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
+	# c-struct component 'rate_battchargeact' at offset '18'
+	$rate_battchargeact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-##########################################################################################
-# convert function for 'struct avm_event_remotewatchdog'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_remotewatchdog {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
+	# c-struct component 'rate_battchargecum' at offset '19'
+	$rate_battchargecum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### liste of hash components #######
-	my $cmd;
-	my $name;
-	my $param;
+	# c-struct component 'dect_status' at offset '20'
+	$dect_status = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### convert binary message to hash components #######
+	# c-struct component 'rate_usbhostact' at offset '21'
+	$rate_usbhostact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'cmd' at offset '0'
-	$cmd = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'rate_usbhostcum' at offset '22'
+	$rate_usbhostcum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'name' at offset '4'
-	$name = unpack("a" . $offset . "/C16", $in_ref);
-	$offset += 16;
+	# c-struct component 'usb_status' at offset '23'
+	$usb_status = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'param' at offset '20'
-	$param = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'act_temperature' at offset '24'
+	$act_temperature = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
+	# c-struct component 'min_temperature' at offset '24'
+	$min_temperature = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
-	####### return hash and used length #######
-	$return ( {
-		"cmd" => $cmd,
-		"name" => $name,
-		"param" => $param,
-	}, $offset );
-}
+	# c-struct component 'max_temperature' at offset '24'
+	$max_temperature = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
+	# c-struct component 'avg_temperature' at offset '24'
+	$avg_temperature = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
-##########################################################################################
-# convert function for 'struct avm_event_telefonprofile'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_telefonprofile {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
+	# c-struct component 'rate_lteact' at offset '24'
+	$rate_lteact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### liste of hash components #######
-	my $on;
+	# c-struct component 'rate_ltecum' at offset '25'
+	$rate_ltecum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	####### convert binary message to hash components #######
+	# c-struct component 'rate_dvbcact' at offset '26'
+	$rate_dvbcact = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
-	# c-struct component 'on' at offset '0'
-	$on = unpack("", $in_ref);
-	$offset += 0;
+	# c-struct component 'rate_dvbccum' at offset '27'
+	$rate_dvbccum = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"on" => $on,
+		"header" => $header,
+		"reserved1" => $reserved1,
+		"rate_sumact" => $rate_sumact,
+		"rate_sumcum" => $rate_sumcum,
+		"rate_systemact" => $rate_systemact,
+		"rate_systemcum" => $rate_systemcum,
+		"system_status" => $system_status,
+		"rate_dspact" => $rate_dspact,
+		"rate_dspcum" => $rate_dspcum,
+		"rate_wlanact" => $rate_wlanact,
+		"rate_wlancum" => $rate_wlancum,
+		"wlan_devices" => $wlan_devices,
+		"wlan_status" => $wlan_status,
+		"rate_ethact" => $rate_ethact,
+		"rate_ethcum" => $rate_ethcum,
+		"eth_status" => $eth_status,
+		"rate_abact" => $rate_abact,
+		"rate_abcum" => $rate_abcum,
+		"isdn_status" => $isdn_status,
+		"rate_dectact" => $rate_dectact,
+		"rate_dectcum" => $rate_dectcum,
+		"rate_battchargeact" => $rate_battchargeact,
+		"rate_battchargecum" => $rate_battchargecum,
+		"dect_status" => $dect_status,
+		"rate_usbhostact" => $rate_usbhostact,
+		"rate_usbhostcum" => $rate_usbhostcum,
+		"usb_status" => $usb_status,
+		"act_temperature" => $act_temperature,
+		"min_temperature" => $min_temperature,
+		"max_temperature" => $max_temperature,
+		"avg_temperature" => $avg_temperature,
+		"rate_lteact" => $rate_lteact,
+		"rate_ltecum" => $rate_ltecum,
+		"rate_dvbcact" => $rate_dvbcact,
+		"rate_dvbccum" => $rate_dvbccum,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _cpmac_event_struct'
+# convert function for 'struct _avm_event_cmd_param_source_trigger'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__cpmac_event_struct {
+sub avm_event_read_from_binary_struct__avm_event_cmd_param_source_trigger {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1841,33 +2378,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $ports;
-	my $port;
+	my $id;
+	my $data_length;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'ports' at offset '0'
-	$ports = unpack("", $in_ref);
-	$offset += 0;
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'port' at offset '0'
-	( $port, $struct_offset ) = avm_event_read_from_binary_struct_cpmac_port(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'data_length' at offset '4'
+	$data_length = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"ports" => $ports,
-		"port" => $port,
+		"id" => $id,
+		"data_length" => $data_length,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_fax_file'
+# convert function for 'struct _avm_event_fax_file'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_fax_file {
+sub avm_event_read_from_binary_struct__avm_event_fax_file {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1875,11 +2411,17 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
+	my $header;
 	my $action;
 	my $date;
 
 	####### convert binary message to hash components #######
 
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
 	# c-struct component 'action' at offset '0'
 	$action = unpack(">I", $in_ref);
 	$offset += 4;
@@ -1892,6 +2434,7 @@
 
 	####### return hash and used length #######
 	$return ( {
+		"header" => $header,
 		"action" => $action,
 		"date" => $date,
 	}, $offset );
@@ -1899,9 +2442,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_read'
+# convert function for 'struct avm_event_tffs_notify'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_read {
+sub avm_event_read_from_binary_struct_avm_event_tffs_notify {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1909,44 +2452,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $buff_addr;
-	my $len;
 	my $id;
-	my $crc;
+	my $event;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'buff_addr' at offset '0'
-	$buff_addr = unpack(">L", $in_ref);
-	$offset += 8;
-
-	# c-struct component 'len' at offset '8'
-	$len = unpack("a" . $offset . "/>L", $in_ref);
-	$offset += 8;
-
-	# c-struct component 'id' at offset '16'
-	$id = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'crc' at offset '28'
-	$crc = unpack("a" . $offset . "/>I>I", $in_ref);
+	# c-struct component 'event' at offset '12'
+	$event = unpack("a" . $offset . "/>I", $in_ref);
 	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"buff_addr" => $buff_addr,
-		"len" => $len,
 		"id" => $id,
-		"crc" => $crc,
+		"event" => $event,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_remotepcmlink'
+# convert function for 'struct avm_event_powermanagment_remote_ressourceinfo'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_remotepcmlink {
+sub avm_event_read_from_binary_struct_avm_event_powermanagment_remote_ressourceinfo {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1954,38 +2485,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $type;
-	my $sharedlen;
-	my $sharedpointer;
+	my $device;
+	my $power_rate;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
+	# c-struct component 'device' at offset '0'
+	$device = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'sharedlen' at offset '4'
-	$sharedlen = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'sharedpointer' at offset '4'
-	$sharedpointer = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'power_rate' at offset '4'
+	$power_rate = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"type" => $type,
-		"sharedlen" => $sharedlen,
-		"sharedpointer" => $sharedpointer,
+		"device" => $device,
+		"power_rate" => $power_rate,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct wlan_event_data_client_connect_info'
+# convert function for 'struct avm_event_telefon_up'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_client_connect_info {
+sub avm_event_read_from_binary_struct_avm_event_telefon_up {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -1993,51 +2518,27 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $common;
-	my $info_context;
-	my $reason;
-	my $max_node_count;
-	my $ieee80211_code;
+	my $dummy;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'common' at offset '0'
-	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_client_common(
+	# c-struct component 'dummy' at offset '0'
+	( $dummy, $struct_offset ) = avm_event_read_from_binary_struct_{}(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'info_context' at offset '0'
-	$info_context = unpack(">S", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'reason' at offset '1'
-	$reason = unpack("a" . $offset . "/>S", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'max_node_count' at offset '2'
-	$max_node_count = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'ieee80211_code' at offset '14'
-	$ieee80211_code = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"common" => $common,
-		"info_context" => $info_context,
-		"reason" => $reason,
-		"max_node_count" => $max_node_count,
-		"ieee80211_code" => $ieee80211_code,
+		"dummy" => $dummy,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct wlan_event_data_radio_recovery'
+# convert function for 'struct avm_event_tffs_init'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_radio_recovery {
+sub avm_event_read_from_binary_struct_avm_event_tffs_init {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2045,32 +2546,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $radio_id;
-	my $state;
+	my $mem_offset;
+	my $max_seg_size;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'radio_id' at offset '0'
-	$radio_id = unpack("", $in_ref);
+	# c-struct component 'mem_offset' at offset '0'
+	$mem_offset = unpack("", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'state' at offset '0'
-	$state = unpack(">I", $in_ref);
+	# c-struct component 'max_seg_size' at offset '0'
+	$max_seg_size = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"radio_id" => $radio_id,
-		"state" => $state,
+		"mem_offset" => $mem_offset,
+		"max_seg_size" => $max_seg_size,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_reindex'
+# convert function for 'struct avm_event_wlan'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_reindex {
+sub avm_event_read_from_binary_struct_avm_event_wlan {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2078,75 +2579,96 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $dummy;
+	my $mac;
+	my $u1;
+	my $event;
+	my $info;
+	my $status;
+	my $u2;
+	my $if_name;
+	my $ev_initiator;
+	my $ev_reason;
+	my $avm_capabilities;
+	my $u3;
+	my $credentials;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'dummy' at offset '0'
-	$dummy = unpack(">I>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'mac' at offset '0'
+	$mac = unpack("C6", $in_ref);
+	$offset += 6;
 
+	# c-struct component 'u1' at offset '6'
+	( $u1, $struct_offset ) = avm_event_read_from_binary_union_avm_event_wlan_client_status_u1(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	####### return hash and used length #######
-	$return ( {
-		"dummy" => $dummy,
-	}, $offset );
-}
+	# c-struct component 'event' at offset '6'
+	$event = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
 
+	# c-struct component 'info' at offset '10'
+	$info = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
 
-##########################################################################################
-# convert function for 'struct avm_event_mass_storage_mount'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_mass_storage_mount {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
+	# c-struct component 'status' at offset '14'
+	$status = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
 
-	####### liste of hash components #######
-	my $size;
-	my $free;
-	my $name_length;
-	my @name = ();
+	# c-struct component 'u2' at offset '18'
+	( $u2, $struct_offset ) = avm_event_read_from_binary_union_avm_event_wlan_client_status_u2(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	####### convert binary message to hash components #######
+	# c-struct component 'if_name' at offset '18'
+	$if_name = unpack("a" . $offset . "/CIFNAMSIZ", $in_ref);
+	$offset += IFNAMSIZ;
 
-	# c-struct component 'size' at offset '0'
-	$size = unpack("", $in_ref);
+	# c-struct component 'ev_initiator' at offset '18'
+	$ev_initiator = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'free' at offset '0'
-	$free = unpack("", $in_ref);
+	# c-struct component 'ev_reason' at offset '18'
+	$ev_reason = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'name_length' at offset '0'
-	$name_length = unpack("", $in_ref);
+	# c-struct component 'avm_capabilities' at offset '18'
+	$avm_capabilities = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $name_length;
-
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+	# c-struct component 'u3' at offset '18'
+	( $u3, $struct_offset ) = avm_event_read_from_binary_union_avm_event_wlan_client_status_u3(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-		$name[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
+	# c-struct component 'credentials' at offset '18'
+	( $credentials, $struct_offset ) = avm_event_read_from_binary_struct_avm_event_wlan_credentials(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"size" => $size,
-		"free" => $free,
-		"name_length" => $name_length,
-		"name" => [ @name ],
+		"mac" => $mac,
+		"u1" => $u1,
+		"event" => $event,
+		"info" => $info,
+		"status" => $status,
+		"u2" => $u2,
+		"if_name" => $if_name,
+		"ev_initiator" => $ev_initiator,
+		"ev_reason" => $ev_reason,
+		"avm_capabilities" => $avm_capabilities,
+		"u3" => $u3,
+		"credentials" => $credentials,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_ambient_brightness'
+# convert function for 'struct _avm_event_powerline_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_ambient_brightness {
+sub avm_event_read_from_binary_struct__avm_event_powerline_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2155,8 +2677,7 @@
 
 	####### liste of hash components #######
 	my $event_header;
-	my $value;
-	my $maxvalue;
+	my $status;
 
 	####### convert binary message to hash components #######
 
@@ -2165,28 +2686,23 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'value' at offset '0'
-	$value = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'maxvalue' at offset '0'
-	$maxvalue = unpack("", $in_ref);
-	$offset += 0;
+	# c-struct component 'status' at offset '0'
+	$status = unpack(">I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
 		"event_header" => $event_header,
-		"value" => $value,
-		"maxvalue" => $maxvalue,
+		"status" => $status,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_mass_storage_unmount'
+# convert function for 'struct _avm_event_led_info'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_mass_storage_unmount {
+sub avm_event_read_from_binary_struct__avm_event_led_info {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2195,8 +2711,13 @@
 
 	####### liste of hash components #######
 	my $header;
-	my $name_length;
-	my @name = ();
+	my $mode;
+	my $param1;
+	my $param2;
+	my $gpio_driver_type;
+	my $gpio;
+	my $pos;
+	my $name;
 
 	####### convert binary message to hash components #######
 
@@ -2205,32 +2726,53 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'name_length' at offset '0'
-	$name_length = unpack("", $in_ref);
+	# c-struct component 'mode' at offset '0'
+	$mode = unpack("", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $name_length;
 
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+	# c-struct component 'param1' at offset '0'
+	$param1 = unpack("", $in_ref);
+	$offset += 0;
 
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+	# c-struct component 'param2' at offset '0'
+	$param2 = unpack("", $in_ref);
+	$offset += 0;
 
-		$name[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
+	# c-struct component 'gpio_driver_type' at offset '0'
+	$gpio_driver_type = unpack("", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'gpio' at offset '0'
+	$gpio = unpack("", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'pos' at offset '0'
+	$pos = unpack("", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'name' at offset '0'
+	$name = unpack("C32", $in_ref);
+	$offset += 32;
 
 
 	####### return hash and used length #######
 	$return ( {
 		"header" => $header,
-		"name_length" => $name_length,
-		"name" => [ @name ],
+		"mode" => $mode,
+		"param1" => $param1,
+		"param2" => $param2,
+		"gpio_driver_type" => $gpio_driver_type,
+		"gpio" => $gpio,
+		"pos" => $pos,
+		"name" => $name,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_piglet'
+# convert function for 'struct avm_event_led_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_piglet {
+sub avm_event_read_from_binary_struct_avm_event_led_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2238,60 +2780,44 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $type;
+	my $led;
+	my $state;
+	my $param_len;
+	my $params;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
+	# c-struct component 'led' at offset '0'
+	$led = unpack(">I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'state' at offset '4'
+	$state = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
-	####### return hash and used length #######
-	$return ( {
-		"type" => $type,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct wlan_event_data_client_state_idle'
-##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_client_state_idle {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $common;
-	my $idle;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'common' at offset '0'
-	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_client_common(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'param_len' at offset '4'
+	$param_len = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
-	# c-struct component 'idle' at offset '0'
-	$idle = unpack(">S", $in_ref);
-	$offset += 1;
+	# c-struct component 'params' at offset '4'
+	$params = unpack("a" . $offset . "/C245", $in_ref);
+	$offset += 245;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"common" => $common,
-		"idle" => $idle,
+		"led" => $led,
+		"state" => $state,
+		"param_len" => $param_len,
+		"params" => $params,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_remote_source_trigger_request'
+# convert function for 'struct avm_event_fax_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_remote_source_trigger_request {
+sub avm_event_read_from_binary_struct_avm_event_fax_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2299,68 +2825,48 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $data;
+	my $fax_receive_mode;
+	my $fax_storage_dest;
+	my $dirname_length;
+	my @dirname = ();
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'data' at offset '0'
-	( $data, $struct_offset ) = avm_event_read_from_binary_struct_avm_event_data(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"data" => $data,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct _avm_event_powermanagment_remote'
-##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_powermanagment_remote {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
+	# c-struct component 'fax_receive_mode' at offset '0'
+	$fax_receive_mode = unpack(">I", $in_ref);
+	$offset += 4;
 
-	####### liste of hash components #######
-	my $header;
-	my $remote_action;
-	my $param;
+	# c-struct component 'fax_storage_dest' at offset '4'
+	$fax_storage_dest = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
 
-	####### convert binary message to hash components #######
+	# c-struct component 'dirname_length' at offset '8'
+	$dirname_length = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $dirname_length;
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
-	# c-struct component 'remote_action' at offset '0'
-	$remote_action = unpack(">I", $in_ref);
-	$offset += 4;
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-	# c-struct component 'param' at offset '4'
-	( $param, $struct_offset ) = avm_event_read_from_binary_union_avm_event_powermanagment_remote_union(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+		$dirname[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"remote_action" => $remote_action,
-		"param" => $param,
+		"fax_receive_mode" => $fax_receive_mode,
+		"fax_storage_dest" => $fax_storage_dest,
+		"dirname_length" => $dirname_length,
+		"dirname" => [ @dirname ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_firmware_update_available'
+# convert function for 'struct _avm_event_checkpoint'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_firmware_update_available {
+sub avm_event_read_from_binary_struct__avm_event_checkpoint {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2368,41 +2874,31 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
-	my $type;
-	my $version_length;
-	my @version = ();
+	my $event_header;
+	my $node_id;
+	my $checkpoints;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
+	# c-struct component 'node_id' at offset '0'
+	$node_id = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'version_length' at offset '4'
-	$version_length = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-	$array_element_anzahl  = $version_length;
-
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
-
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
-
-		$version[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
+	# c-struct component 'checkpoints' at offset '12'
+	$checkpoints = unpack("a" . $offset . "/>L", $in_ref);
+	$offset += 8;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"type" => $type,
-		"version_length" => $version_length,
-		"version" => [ @version ],
+		"event_header" => $event_header,
+		"node_id" => $node_id,
+		"checkpoints" => $checkpoints,
 	}, $offset );
 }
 
@@ -2454,9 +2950,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_source_notifier'
+# convert function for 'struct _avm_event_wlan'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_source_notifier {
+sub avm_event_read_from_binary_struct__avm_event_wlan {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2464,26 +2960,100 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
+	my $header;
+	my $mac;
+	my $u1;
+	my $event;
+	my $info;
+	my $status;
+	my $u2;
+	my $if_name;
+	my $ev_initiator;
+	my $ev_reason;
+	my $avm_capabilities;
+	my $u3;
+	my $credentials;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
+	# c-struct component 'mac' at offset '0'
+	$mac = unpack("C6", $in_ref);
+	$offset += 6;
+
+	# c-struct component 'u1' at offset '6'
+	$u1 = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'event' at offset '6'
+	$event = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'info' at offset '6'
+	$info = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'status' at offset '6'
+	$status = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'u2' at offset '6'
+	$u2 = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'if_name' at offset '6'
+	$if_name = unpack("a" . $offset . "/CIFNAMSIZ", $in_ref);
+	$offset += IFNAMSIZ;
+
+	# c-struct component 'ev_initiator' at offset '6'
+	$ev_initiator = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'ev_reason' at offset '6'
+	$ev_reason = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'avm_capabilities' at offset '6'
+	$avm_capabilities = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'u3' at offset '6'
+	$u3 = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'credentials' at offset '6'
+	( $credentials, $struct_offset ) = avm_event_read_from_binary_struct_avm_event_wlan_credentials(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
+		"header" => $header,
+		"mac" => $mac,
+		"u1" => $u1,
+		"event" => $event,
+		"info" => $info,
+		"status" => $status,
+		"u2" => $u2,
+		"if_name" => $if_name,
+		"ev_initiator" => $ev_initiator,
+		"ev_reason" => $ev_reason,
+		"avm_capabilities" => $avm_capabilities,
+		"u3" => $u3,
+		"credentials" => $credentials,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_id_mask'
+# convert function for 'struct avm_event_boykott'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_id_mask {
+sub avm_event_read_from_binary_struct_avm_event_boykott {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2491,27 +3061,27 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $mask;
+	my $dummy;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'mask' at offset '0'
-	( $mask, $struct_offset ) = avm_event_read_from_binary_avm_event_mask_fieldentry(
+	# c-struct component 'dummy' at offset '0'
+	( $dummy, $struct_offset ) = avm_event_read_from_binary_struct_{}(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"mask" => $mask,
+		"dummy" => $dummy,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_powermanagment_status'
+# convert function for 'struct cpmac_port'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_powermanagment_status {
+sub avm_event_read_from_binary_struct_cpmac_port {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2519,33 +3089,56 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $substatus;
-	my $param;
+	my $cable;
+	my $link;
+	my $speed100;
+	my $fullduplex;
+	my $speed;
+	my $maxspeed;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'substatus' at offset '0'
-	$substatus = unpack(">I", $in_ref);
+	# c-struct component 'cable' at offset '0'
+	$cable = unpack(">S", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'link' at offset '1'
+	$link = unpack("a" . $offset . "/>S", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'speed100' at offset '2'
+	$speed100 = unpack("a" . $offset . "/>S", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'fullduplex' at offset '3'
+	$fullduplex = unpack("a" . $offset . "/>S", $in_ref);
+	$offset += 1;
+
+	# c-struct component 'speed' at offset '4'
+	$speed = unpack("a" . $offset . "/>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'param' at offset '4'
-	( $param, $struct_offset ) = avm_event_read_from_binary_union___powermanagment_status_union(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'maxspeed' at offset '8'
+	$maxspeed = unpack("a" . $offset . "/>I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"substatus" => $substatus,
-		"param" => $param,
+		"cable" => $cable,
+		"link" => $link,
+		"speed100" => $speed100,
+		"fullduplex" => $fullduplex,
+		"speed" => $speed,
+		"maxspeed" => $maxspeed,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_rpc'
+# convert function for 'struct avm_event_tffs_info'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_rpc {
+sub avm_event_read_from_binary_struct_avm_event_tffs_info {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2553,55 +3146,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_header;
-	my $type;
-	my $id;
-	my $length;
-	my @message = ();
+	my $fill_level;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
+	# c-struct component 'fill_level' at offset '0'
+	$fill_level = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'id' at offset '4'
-	$id = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'length' at offset '4'
-	$length = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-	$array_element_anzahl  = $length;
-
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
-
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
-
-		$message[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
-
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"type" => $type,
-		"id" => $id,
-		"length" => $length,
-		"message" => [ @message ],
+		"fill_level" => $fill_level,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_wlan'
+# convert function for 'struct _avm_event_powermanagment_remote_ressourceinfo'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_wlan {
+sub avm_event_read_from_binary_struct__avm_event_powermanagment_remote_ressourceinfo {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2609,96 +3173,39 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $mac;
-	my $u1;
-	my $event;
-	my $info;
-	my $status;
-	my $u2;
-	my $if_name;
-	my $ev_initiator;
-	my $ev_reason;
-	my $avm_capabilities;
-	my $u3;
-	my $credentials;
+	my $header;
+	my $device;
+	my $power_rate;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'mac' at offset '0'
-	$mac = unpack("C6", $in_ref);
-	$offset += 6;
-
-	# c-struct component 'u1' at offset '6'
-	( $u1, $struct_offset ) = avm_event_read_from_binary_union_avm_event_wlan_client_status_u1(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'event' at offset '6'
-	$event = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'info' at offset '10'
-	$info = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'status' at offset '14'
-	$status = unpack("a" . $offset . "/>I", $in_ref);
+	# c-struct component 'device' at offset '0'
+	$device = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'u2' at offset '18'
-	( $u2, $struct_offset ) = avm_event_read_from_binary_union_avm_event_wlan_client_status_u2(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'if_name' at offset '18'
-	$if_name = unpack("a" . $offset . "/CIFNAMSIZ", $in_ref);
-	$offset += IFNAMSIZ;
-
-	# c-struct component 'ev_initiator' at offset '18'
-	$ev_initiator = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'ev_reason' at offset '18'
-	$ev_reason = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'avm_capabilities' at offset '18'
-	$avm_capabilities = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'power_rate' at offset '4'
+	$power_rate = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'u3' at offset '18'
-	( $u3, $struct_offset ) = avm_event_read_from_binary_union_avm_event_wlan_client_status_u3(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'credentials' at offset '18'
-	( $credentials, $struct_offset ) = avm_event_read_from_binary_struct_avm_event_wlan_credentials(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"mac" => $mac,
-		"u1" => $u1,
-		"event" => $event,
-		"info" => $info,
-		"status" => $status,
-		"u2" => $u2,
-		"if_name" => $if_name,
-		"ev_initiator" => $ev_initiator,
-		"ev_reason" => $ev_reason,
-		"avm_capabilities" => $avm_capabilities,
-		"u3" => $u3,
-		"credentials" => $credentials,
+		"header" => $header,
+		"device" => $device,
+		"power_rate" => $power_rate,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_telephony_missed_call'
+# convert function for 'struct avm_event_remote_source_trigger_request'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_telephony_missed_call {
+sub avm_event_read_from_binary_struct_avm_event_remote_source_trigger_request {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2706,34 +3213,27 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $length;
-	my $p;
+	my $data;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'length' at offset '0'
-	$length = unpack("", $in_ref);
-	$offset += 0;
-	$array_element_anzahl  = $length;
-
-	# c-struct component 'p' at offset '0'
-	( $p, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params(
+	# c-struct component 'data' at offset '0'
+	( $data, $struct_offset ) = avm_event_read_from_binary_struct_avm_event_data(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"length" => $length,
-		"p" => $p,
+		"data" => $data,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_telefon_up'
+# convert function for 'struct _cpmac_event_struct'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_telefon_up {
+sub avm_event_read_from_binary_struct__cpmac_event_struct {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2741,27 +3241,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $dummy;
+	my $ports;
+	my $port;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'dummy' at offset '0'
-	( $dummy, $struct_offset ) = avm_event_read_from_binary_struct_{}(
+	# c-struct component 'ports' at offset '0'
+	$ports = unpack("", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'port' at offset '0'
+	( $port, $struct_offset ) = avm_event_read_from_binary_struct_cpmac_port(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"dummy" => $dummy,
+		"ports" => $ports,
+		"port" => $port,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cmd'
+# convert function for 'struct avm_event_powermanagment_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cmd {
+sub avm_event_read_from_binary_struct_avm_event_powermanagment_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2769,33 +3275,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $cmd;
+	my $substatus;
 	my $param;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'cmd' at offset '0'
-	$cmd = unpack(">I", $in_ref);
+	# c-struct component 'substatus' at offset '0'
+	$substatus = unpack(">I", $in_ref);
 	$offset += 4;
 
 	# c-struct component 'param' at offset '4'
-	( $param, $struct_offset ) = avm_event_read_from_binary_union__avm_event_cmd_param(
+	( $param, $struct_offset ) = avm_event_read_from_binary_union___powermanagment_status_union(
 				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"cmd" => $cmd,
+		"substatus" => $substatus,
 		"param" => $param,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_wlan'
+# convert function for 'struct _avm_event_powermanagment_remote'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_wlan {
+sub avm_event_read_from_binary_struct__avm_event_powermanagment_remote {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2804,18 +3310,8 @@
 
 	####### liste of hash components #######
 	my $header;
-	my $mac;
-	my $u1;
-	my $event;
-	my $info;
-	my $status;
-	my $u2;
-	my $if_name;
-	my $ev_initiator;
-	my $ev_reason;
-	my $avm_capabilities;
-	my $u3;
-	my $credentials;
+	my $remote_action;
+	my $param;
 
 	####### convert binary message to hash components #######
 
@@ -2824,52 +3320,12 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'mac' at offset '0'
-	$mac = unpack("C6", $in_ref);
-	$offset += 6;
-
-	# c-struct component 'u1' at offset '6'
-	$u1 = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'event' at offset '6'
-	$event = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'info' at offset '6'
-	$info = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'status' at offset '6'
-	$status = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'u2' at offset '6'
-	$u2 = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'if_name' at offset '6'
-	$if_name = unpack("a" . $offset . "/CIFNAMSIZ", $in_ref);
-	$offset += IFNAMSIZ;
-
-	# c-struct component 'ev_initiator' at offset '6'
-	$ev_initiator = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'ev_reason' at offset '6'
-	$ev_reason = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'avm_capabilities' at offset '6'
-	$avm_capabilities = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'u3' at offset '6'
-	$u3 = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
+	# c-struct component 'remote_action' at offset '0'
+	$remote_action = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'credentials' at offset '6'
-	( $credentials, $struct_offset ) = avm_event_read_from_binary_struct_avm_event_wlan_credentials(
+	# c-struct component 'param' at offset '4'
+	( $param, $struct_offset ) = avm_event_read_from_binary_union_avm_event_powermanagment_remote_union(
 				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
@@ -2877,59 +3333,16 @@
 	####### return hash and used length #######
 	$return ( {
 		"header" => $header,
-		"mac" => $mac,
-		"u1" => $u1,
-		"event" => $event,
-		"info" => $info,
-		"status" => $status,
-		"u2" => $u2,
-		"if_name" => $if_name,
-		"ev_initiator" => $ev_initiator,
-		"ev_reason" => $ev_reason,
-		"avm_capabilities" => $avm_capabilities,
-		"u3" => $u3,
-		"credentials" => $credentials,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct avm_event_powermanagment_remote_ressourceinfo'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_powermanagment_remote_ressourceinfo {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $device;
-	my $power_rate;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'device' at offset '0'
-	$device = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'power_rate' at offset '4'
-	$power_rate = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"device" => $device,
-		"power_rate" => $power_rate,
+		"remote_action" => $remote_action,
+		"param" => $param,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_ambient_brightness'
+# convert function for 'struct _avm_event_ambient_brightness'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_ambient_brightness {
+sub avm_event_read_from_binary_struct__avm_event_ambient_brightness {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2937,11 +3350,17 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
+	my $event_header;
 	my $value;
 	my $maxvalue;
 
 	####### convert binary message to hash components #######
 
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
 	# c-struct component 'value' at offset '0'
 	$value = unpack("", $in_ref);
 	$offset += 0;
@@ -2953,6 +3372,7 @@
 
 	####### return hash and used length #######
 	$return ( {
+		"event_header" => $event_header,
 		"value" => $value,
 		"maxvalue" => $maxvalue,
 	}, $offset );
@@ -2960,9 +3380,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_powermanagment_remote_ressourceinfo'
+# convert function for 'struct avm_event_telephony_missed_call'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_powermanagment_remote_ressourceinfo {
+sub avm_event_read_from_binary_struct_avm_event_telephony_missed_call {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -2970,39 +3390,34 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
-	my $device;
-	my $power_rate;
+	my $length;
+	my $p;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+	# c-struct component 'length' at offset '0'
+	$length = unpack("", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $length;
+
+	# c-struct component 'p' at offset '0'
+	( $p, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'device' at offset '0'
-	$device = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'power_rate' at offset '4'
-	$power_rate = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"device" => $device,
-		"power_rate" => $power_rate,
+		"length" => $length,
+		"p" => $p,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_firmware_update_available'
+# convert function for 'struct avm_event_rpc'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_firmware_update_available {
+sub avm_event_read_from_binary_struct_avm_event_rpc {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3011,8 +3426,9 @@
 
 	####### liste of hash components #######
 	my $type;
-	my $version_length;
-	my @version = ();
+	my $id;
+	my $length;
+	my @message = ();
 
 	####### convert binary message to hash components #######
 
@@ -3020,32 +3436,37 @@
 	$type = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'version_length' at offset '4'
-	$version_length = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'id' at offset '4'
+	$id = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $version_length;
+
+	# c-struct component 'length' at offset '4'
+	$length = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $length;
 
 	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
 		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-		$version[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+		$message[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
 	}
 
 
 	####### return hash and used length #######
 	$return ( {
 		"type" => $type,
-		"version_length" => $version_length,
-		"version" => [ @version ],
+		"id" => $id,
+		"length" => $length,
+		"message" => [ @message ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_push_button'
+# convert function for 'struct _avm_event_fax_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_push_button {
+sub avm_event_read_from_binary_struct__avm_event_fax_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3053,38 +3474,55 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
-	my $key;
-	my $pressed;
+	my $header;
+	my $fax_receive_mode;
+	my $fax_storage_dest;
+	my $dirname_length;
+	my @dirname = ();
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
-	$offset += 4;
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	# c-struct component 'key' at offset '4'
-	$key = unpack("a" . $offset . "/>I", $in_ref);
+	# c-struct component 'fax_receive_mode' at offset '0'
+	$fax_receive_mode = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'pressed' at offset '8'
-	$pressed = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	# c-struct component 'fax_storage_dest' at offset '4'
+	$fax_storage_dest = unpack("a" . $offset . "/>I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'dirname_length' at offset '8'
+	$dirname_length = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $dirname_length;
+
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$dirname[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
+
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
-		"key" => $key,
-		"pressed" => $pressed,
+		"header" => $header,
+		"fax_receive_mode" => $fax_receive_mode,
+		"fax_storage_dest" => $fax_storage_dest,
+		"dirname_length" => $dirname_length,
+		"dirname" => [ @dirname ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct cpmac_port'
+# convert function for 'struct _avm_event_mass_storage_unmount'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_cpmac_port {
+sub avm_event_read_from_binary_struct__avm_event_mass_storage_unmount {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3092,56 +3530,43 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $cable;
-	my $link;
-	my $speed100;
-	my $fullduplex;
-	my $speed;
-	my $maxspeed;
+	my $header;
+	my $name_length;
+	my @name = ();
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'cable' at offset '0'
-	$cable = unpack(">S", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'link' at offset '1'
-	$link = unpack("a" . $offset . "/>S", $in_ref);
-	$offset += 1;
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	# c-struct component 'speed100' at offset '2'
-	$speed100 = unpack("a" . $offset . "/>S", $in_ref);
-	$offset += 1;
+	# c-struct component 'name_length' at offset '0'
+	$name_length = unpack("", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $name_length;
 
-	# c-struct component 'fullduplex' at offset '3'
-	$fullduplex = unpack("a" . $offset . "/>S", $in_ref);
-	$offset += 1;
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
-	# c-struct component 'speed' at offset '4'
-	$speed = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
 
-	# c-struct component 'maxspeed' at offset '8'
-	$maxspeed = unpack("a" . $offset . "/>I", $in_ref);
-	$offset += 4;
+		$name[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"cable" => $cable,
-		"link" => $link,
-		"speed100" => $speed100,
-		"fullduplex" => $fullduplex,
-		"speed" => $speed,
-		"maxspeed" => $maxspeed,
+		"header" => $header,
+		"name_length" => $name_length,
+		"name" => [ @name ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct wlan_event_data_scan_event_info'
+# convert function for 'struct _avm_event_internet_new_ip'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_scan_event_info {
+sub avm_event_read_from_binary_struct__avm_event_internet_new_ip {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3149,33 +3574,40 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $common;
-	my $event_type;
+	my $header;
+	my $sel;
+	my $params;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'common' at offset '0'
-	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_scan_common(
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'event_type' at offset '0'
-	$event_type = unpack(">I", $in_ref);
+	# c-struct component 'sel' at offset '0'
+	$sel = unpack(">I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'params' at offset '4'
+	( $params, $struct_offset ) = avm_event_read_from_binary_union_avm_event_internet_new_ip_param(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"common" => $common,
-		"event_type" => $event_type,
+		"header" => $header,
+		"sel" => $sel,
+		"params" => $params,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_telephony_missed_call'
+# convert function for 'struct avm_event_temperature'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_telephony_missed_call {
+sub avm_event_read_from_binary_struct_avm_event_temperature {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3183,41 +3615,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
-	my $length;
-	my $p;
+	my $temperature;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'length' at offset '0'
-	$length = unpack("", $in_ref);
+	# c-struct component 'temperature' at offset '0'
+	$temperature = unpack("", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $length;
-
-	# c-struct component 'p' at offset '0'
-	( $p, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
-		"length" => $length,
-		"p" => $p,
+		"temperature" => $temperature,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cmd_param_release'
+# convert function for 'struct avm_event_tffs_paniclog'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cmd_param_release {
+sub avm_event_read_from_binary_struct_avm_event_tffs_paniclog {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3225,18 +3642,30 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $Name;
+	my $buff_addr;
+	my $len;
+	my $crc;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'Name' at offset '0'
-	$Name = unpack("CMAX_EVENT_CLIENT_NAME_LEN + 1", $in_ref);
-	$offset += MAX_EVENT_CLIENT_NAME_LEN + 1;
+	# c-struct component 'buff_addr' at offset '0'
+	$buff_addr = unpack(">L", $in_ref);
+	$offset += 8;
+
+	# c-struct component 'len' at offset '8'
+	$len = unpack("a" . $offset . "/>L", $in_ref);
+	$offset += 8;
+
+	# c-struct component 'crc' at offset '16'
+	$crc = unpack("a" . $offset . "/>I>I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"Name" => $Name,
+		"buff_addr" => $buff_addr,
+		"len" => $len,
+		"crc" => $crc,
 	}, $offset );
 }
 
@@ -3276,49 +3705,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cpu_run'
-##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cpu_run {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $event_header;
-	my $cputype;
-	my $cpu_run;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'cputype' at offset '0'
-	$cputype = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'cpu_run' at offset '4'
-	$cpu_run = unpack("a" . $offset . "/C4", $in_ref);
-	$offset += 4;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"event_header" => $event_header,
-		"cputype" => $cputype,
-		"cpu_run" => $cpu_run,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct _avm_event_log'
+# convert function for 'struct _avm_event_rpc'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_log {
+sub avm_event_read_from_binary_struct__avm_event_rpc {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3327,11 +3716,10 @@
 
 	####### liste of hash components #######
 	my $event_header;
-	my $logtype;
-	my $loglen;
-	my $logpointer;
-	my $checksum;
-	my $rebootflag;
+	my $type;
+	my $id;
+	my $length;
+	my @message = ();
 
 	####### convert binary message to hash components #######
 
@@ -3340,43 +3728,42 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'logtype' at offset '0'
-	$logtype = unpack(">I", $in_ref);
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'loglen' at offset '4'
-	$loglen = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'id' at offset '4'
+	$id = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'logpointer' at offset '4'
-	$logpointer = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'length' at offset '4'
+	$length = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
+	$array_element_anzahl  = $length;
 
-	# c-struct component 'checksum' at offset '4'
-	$checksum = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
 
-	# c-struct component 'rebootflag' at offset '4'
-	$rebootflag = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$message[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
 		"event_header" => $event_header,
-		"logtype" => $logtype,
-		"loglen" => $loglen,
-		"logpointer" => $logpointer,
-		"checksum" => $checksum,
-		"rebootflag" => $rebootflag,
+		"type" => $type,
+		"id" => $id,
+		"length" => $length,
+		"message" => [ @message ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_internet_new_ip'
+# convert function for 'struct avm_event_internet_new_ip'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_internet_new_ip {
+sub avm_event_read_from_binary_struct_avm_event_internet_new_ip {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3384,17 +3771,11 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $header;
 	my $sel;
 	my $params;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'header' at offset '0'
-	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
 	# c-struct component 'sel' at offset '0'
 	$sel = unpack(">I", $in_ref);
 	$offset += 4;
@@ -3407,7 +3788,6 @@
 
 	####### return hash and used length #######
 	$return ( {
-		"header" => $header,
 		"sel" => $sel,
 		"params" => $params,
 	}, $offset );
@@ -3415,9 +3795,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_header'
+# convert function for 'struct avm_event_remotewatchdog'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_header {
+sub avm_event_read_from_binary_struct_avm_event_remotewatchdog {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3425,91 +3805,30 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
+	my $cmd;
+	my $name;
+	my $param;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
+	# c-struct component 'cmd' at offset '0'
+	$cmd = unpack(">I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'name' at offset '4'
+	$name = unpack("a" . $offset . "/C16", $in_ref);
+	$offset += 16;
 
-	####### return hash and used length #######
-	$return ( {
-		"id" => $id,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct wlan_event_data_scan_common'
-##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_scan_common {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $iface;
-	my $initiator;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'iface' at offset '0'
-	$iface = unpack("CIFNAMSIZ + 1", $in_ref);
-	$offset += IFNAMSIZ + 1;
-
-	# c-struct component 'initiator' at offset '0'
-	$initiator = unpack("C16 + 1", $in_ref);
-	$offset += 16 + 1;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"iface" => $iface,
-		"initiator" => $initiator,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct _avm_event_checkpoint'
-##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_checkpoint {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $event_header;
-	my $node_id;
-	my $checkpoints;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'node_id' at offset '0'
-	$node_id = unpack(">I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'checkpoints' at offset '12'
-	$checkpoints = unpack("a" . $offset . "/>L", $in_ref);
-	$offset += 8;
+	# c-struct component 'param' at offset '20'
+	$param = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"node_id" => $node_id,
-		"checkpoints" => $checkpoints,
+		"cmd" => $cmd,
+		"name" => $name,
+		"param" => $param,
 	}, $offset );
 }
 
@@ -3591,63 +3910,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_ping'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_ping {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $seq;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'seq' at offset '0'
-	$seq = unpack(">I>I>I", $in_ref);
-	$offset += 4;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"seq" => $seq,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct avm_event_powerline_status'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_powerline_status {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $status;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'status' at offset '0'
-	$status = unpack(">I", $in_ref);
-	$offset += 4;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"status" => $status,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct avm_event_rpc'
+# convert function for 'struct avm_event_ambient_brightness'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_rpc {
+sub avm_event_read_from_binary_struct_avm_event_ambient_brightness {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3655,48 +3920,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $type;
-	my $id;
-	my $length;
-	my @message = ();
+	my $value;
+	my $maxvalue;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'type' at offset '0'
-	$type = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'id' at offset '4'
-	$id = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'value' at offset '0'
+	$value = unpack("", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'length' at offset '4'
-	$length = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'maxvalue' at offset '0'
+	$maxvalue = unpack("", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $length;
-
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
-
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
-
-		$message[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"type" => $type,
-		"id" => $id,
-		"length" => $length,
-		"message" => [ @message ],
+		"value" => $value,
+		"maxvalue" => $maxvalue,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_cpu_idle'
+# convert function for 'struct avm_event_fax_file'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_cpu_idle {
+sub avm_event_read_from_binary_struct_avm_event_fax_file {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3704,62 +3953,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $cpu_idle;
-	my $dsl_dsp_idle;
-	my $voice_dsp_idle;
-	my $mem_strictlyused;
-	my $mem_cacheused;
-	my $mem_physfree;
-	my $cputype;
+	my $action;
+	my $date;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'cpu_idle' at offset '0'
-	$cpu_idle = unpack("C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'dsl_dsp_idle' at offset '1'
-	$dsl_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'voice_dsp_idle' at offset '2'
-	$voice_dsp_idle = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'mem_strictlyused' at offset '3'
-	$mem_strictlyused = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'mem_cacheused' at offset '4'
-	$mem_cacheused = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'mem_physfree' at offset '5'
-	$mem_physfree = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'cputype' at offset '6'
-	$cputype = unpack("a" . $offset . "/>I", $in_ref);
+	# c-struct component 'action' at offset '0'
+	$action = unpack(">I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'date' at offset '4'
+	( $date, $struct_offset ) = avm_event_read_from_binary_time_t(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"cpu_idle" => $cpu_idle,
-		"dsl_dsp_idle" => $dsl_dsp_idle,
-		"voice_dsp_idle" => $voice_dsp_idle,
-		"mem_strictlyused" => $mem_strictlyused,
-		"mem_cacheused" => $mem_cacheused,
-		"mem_physfree" => $mem_physfree,
-		"cputype" => $cputype,
+		"action" => $action,
+		"date" => $date,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct wlan_event_data_client_common'
+# convert function for 'struct wlan_event_def'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_client_common {
+sub avm_event_read_from_binary_struct_wlan_event_def {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3767,38 +3987,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $mac;
-	my $iface;
-	my $initiator;
+	my $event_id;
+	my $event_data;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'mac' at offset '0'
-	$mac = unpack(">S6", $in_ref);
-	$offset += 6;
-
-	# c-struct component 'iface' at offset '6'
-	$iface = unpack("a" . $offset . "/CIFNAMSIZ + 1", $in_ref);
-	$offset += IFNAMSIZ + 1;
+	# c-struct component 'event_id' at offset '0'
+	$event_id = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'initiator' at offset '6'
-	$initiator = unpack("a" . $offset . "/C16 + 1", $in_ref);
-	$offset += 16 + 1;
+	# c-struct component 'event_data' at offset '4'
+	( $event_data, $struct_offset ) = avm_event_read_from_binary_union_wlan_event_data(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"mac" => $mac,
-		"iface" => $iface,
-		"initiator" => $initiator,
+		"event_id" => $event_id,
+		"event_data" => $event_data,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_pm_info_stat'
+# convert function for 'struct _avm_event_log'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_pm_info_stat {
+sub avm_event_read_from_binary_struct__avm_event_log {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -3806,224 +4021,57 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $reserved1;
-	my $rate_sumact;
-	my $rate_sumcum;
-	my $rate_systemact;
-	my $rate_systemcum;
-	my $system_status;
-	my $rate_dspact;
-	my $rate_dspcum;
-	my $rate_wlanact;
-	my $rate_wlancum;
-	my $wlan_devices;
-	my $wlan_status;
-	my $rate_ethact;
-	my $rate_ethcum;
-	my $eth_status;
-	my $rate_abact;
-	my $rate_abcum;
-	my $isdn_status;
-	my $rate_dectact;
-	my $rate_dectcum;
-	my $rate_battchargeact;
-	my $rate_battchargecum;
-	my $dect_status;
-	my $rate_usbhostact;
-	my $rate_usbhostcum;
-	my $usb_status;
-	my $act_temperature;
-	my $min_temperature;
-	my $max_temperature;
-	my $avg_temperature;
-	my $rate_lteact;
-	my $rate_ltecum;
-	my $rate_dvbcact;
-	my $rate_dvbccum;
+	my $event_header;
+	my $logtype;
+	my $loglen;
+	my $logpointer;
+	my $checksum;
+	my $rebootflag;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'reserved1' at offset '0'
-	$reserved1 = unpack("C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_sumact' at offset '1'
-	$rate_sumact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_sumcum' at offset '2'
-	$rate_sumcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_systemact' at offset '3'
-	$rate_systemact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_systemcum' at offset '4'
-	$rate_systemcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'system_status' at offset '5'
-	$system_status = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_dspact' at offset '6'
-	$rate_dspact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_dspcum' at offset '7'
-	$rate_dspcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_wlanact' at offset '8'
-	$rate_wlanact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_wlancum' at offset '9'
-	$rate_wlancum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'wlan_devices' at offset '10'
-	$wlan_devices = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'wlan_status' at offset '11'
-	$wlan_status = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_ethact' at offset '12'
-	$rate_ethact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_ethcum' at offset '13'
-	$rate_ethcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'eth_status' at offset '14'
-	$eth_status = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'rate_abact' at offset '14'
-	$rate_abact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_abcum' at offset '15'
-	$rate_abcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'isdn_status' at offset '16'
-	$isdn_status = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'rate_dectact' at offset '16'
-	$rate_dectact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_dectcum' at offset '17'
-	$rate_dectcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_battchargeact' at offset '18'
-	$rate_battchargeact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_battchargecum' at offset '19'
-	$rate_battchargecum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'dect_status' at offset '20'
-	$dect_status = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_usbhostact' at offset '21'
-	$rate_usbhostact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_usbhostcum' at offset '22'
-	$rate_usbhostcum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
+	# c-struct component 'event_header' at offset '0'
+	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	# c-struct component 'usb_status' at offset '23'
-	$usb_status = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
+	# c-struct component 'logtype' at offset '0'
+	$logtype = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'act_temperature' at offset '24'
-	$act_temperature = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'loglen' at offset '4'
+	$loglen = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'min_temperature' at offset '24'
-	$min_temperature = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'logpointer' at offset '4'
+	$logpointer = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'max_temperature' at offset '24'
-	$max_temperature = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'checksum' at offset '4'
+	$checksum = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'avg_temperature' at offset '24'
-	$avg_temperature = unpack("a" . $offset . "/", $in_ref);
+	# c-struct component 'rebootflag' at offset '4'
+	$rebootflag = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
-	# c-struct component 'rate_lteact' at offset '24'
-	$rate_lteact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_ltecum' at offset '25'
-	$rate_ltecum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_dvbcact' at offset '26'
-	$rate_dvbcact = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
-	# c-struct component 'rate_dvbccum' at offset '27'
-	$rate_dvbccum = unpack("a" . $offset . "/C", $in_ref);
-	$offset += 1;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"reserved1" => $reserved1,
-		"rate_sumact" => $rate_sumact,
-		"rate_sumcum" => $rate_sumcum,
-		"rate_systemact" => $rate_systemact,
-		"rate_systemcum" => $rate_systemcum,
-		"system_status" => $system_status,
-		"rate_dspact" => $rate_dspact,
-		"rate_dspcum" => $rate_dspcum,
-		"rate_wlanact" => $rate_wlanact,
-		"rate_wlancum" => $rate_wlancum,
-		"wlan_devices" => $wlan_devices,
-		"wlan_status" => $wlan_status,
-		"rate_ethact" => $rate_ethact,
-		"rate_ethcum" => $rate_ethcum,
-		"eth_status" => $eth_status,
-		"rate_abact" => $rate_abact,
-		"rate_abcum" => $rate_abcum,
-		"isdn_status" => $isdn_status,
-		"rate_dectact" => $rate_dectact,
-		"rate_dectcum" => $rate_dectcum,
-		"rate_battchargeact" => $rate_battchargeact,
-		"rate_battchargecum" => $rate_battchargecum,
-		"dect_status" => $dect_status,
-		"rate_usbhostact" => $rate_usbhostact,
-		"rate_usbhostcum" => $rate_usbhostcum,
-		"usb_status" => $usb_status,
-		"act_temperature" => $act_temperature,
-		"min_temperature" => $min_temperature,
-		"max_temperature" => $max_temperature,
-		"avg_temperature" => $avg_temperature,
-		"rate_lteact" => $rate_lteact,
-		"rate_ltecum" => $rate_ltecum,
-		"rate_dvbcact" => $rate_dvbcact,
-		"rate_dvbccum" => $rate_dvbccum,
+		"event_header" => $event_header,
+		"logtype" => $logtype,
+		"loglen" => $loglen,
+		"logpointer" => $logpointer,
+		"checksum" => $checksum,
+		"rebootflag" => $rebootflag,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_powerline_status'
+# convert function for 'struct avm_event_cpu_run'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_powerline_status {
+sub avm_event_read_from_binary_struct_avm_event_cpu_run {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4031,33 +4079,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_header;
-	my $status;
+	my $cputype;
+	my $cpu_run;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'cputype' at offset '0'
+	$cputype = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'status' at offset '0'
-	$status = unpack(">I", $in_ref);
+	# c-struct component 'cpu_run' at offset '4'
+	$cpu_run = unpack("a" . $offset . "/C4", $in_ref);
 	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"status" => $status,
+		"cputype" => $cputype,
+		"cpu_run" => $cpu_run,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct wlan_event_data_client_state_change'
+# convert function for 'struct avm_event_powermanagment_remote'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_wlan_event_data_client_state_change {
+sub avm_event_read_from_binary_struct_avm_event_powermanagment_remote {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4065,33 +4112,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $common;
-	my $state;
+	my $remote_action;
+	my $param;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'common' at offset '0'
-	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_client_common(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'remote_action' at offset '0'
+	$remote_action = unpack(">I", $in_ref);
+	$offset += 4;
 
-	# c-struct component 'state' at offset '0'
-	$state = unpack(">S", $in_ref);
-	$offset += 1;
+	# c-struct component 'param' at offset '4'
+	( $param, $struct_offset ) = avm_event_read_from_binary_union_avm_event_powermanagment_remote_union(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"common" => $common,
-		"state" => $state,
+		"remote_action" => $remote_action,
+		"param" => $param,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_temperature'
+# convert function for 'struct wlan_event_data_radio_recovery'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_temperature {
+sub avm_event_read_from_binary_struct_wlan_event_data_radio_recovery {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4099,26 +4146,32 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $temperature;
+	my $radio_id;
+	my $state;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'temperature' at offset '0'
-	$temperature = unpack("", $in_ref);
+	# c-struct component 'radio_id' at offset '0'
+	$radio_id = unpack("", $in_ref);
 	$offset += 0;
 
+	# c-struct component 'state' at offset '0'
+	$state = unpack(">I", $in_ref);
+	$offset += 4;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"temperature" => $temperature,
+		"radio_id" => $radio_id,
+		"state" => $state,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_user_mode_source_notify'
+# convert function for 'struct _avm_event_cmd'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_user_mode_source_notify {
+sub avm_event_read_from_binary_struct__avm_event_cmd {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4126,26 +4179,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
+	my $cmd;
+	my $param;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
+	# c-struct component 'cmd' at offset '0'
+	$cmd = unpack(">I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'param' at offset '4'
+	( $param, $struct_offset ) = avm_event_read_from_binary_union__avm_event_cmd_param(
+				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
+
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
+		"cmd" => $cmd,
+		"param" => $param,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_mass_storage_unmount'
+# convert function for 'struct avm_event_wlan_power'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_mass_storage_unmount {
+sub avm_event_read_from_binary_struct_avm_event_wlan_power {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4153,28 +4213,18 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $name_length;
-	my @name = ();
+	my $power;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'name_length' at offset '0'
-	$name_length = unpack("", $in_ref);
+	# c-struct component 'power' at offset '0'
+	$power = unpack("", $in_ref);
 	$offset += 0;
-	$array_element_anzahl  = $name_length;
-
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
-
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
-
-		$name[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"name_length" => $name_length,
-		"name" => [ @name ],
+		"power" => $power,
 	}, $offset );
 }
 
@@ -4231,72 +4281,9 @@
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_led_info'
-##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_led_info {
-	my ( $msg_length, $in_ref ) = $@;
-	my $offset = 0;
-	my $struct_offset;
-	my $array_element_anzahl = 0;
-	my $array_element_size = 1;
-
-	####### liste of hash components #######
-	my $mode;
-	my $param1;
-	my $param2;
-	my $gpio_driver_type;
-	my $gpio;
-	my $pos;
-	my $name;
-
-	####### convert binary message to hash components #######
-
-	# c-struct component 'mode' at offset '0'
-	$mode = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'param1' at offset '0'
-	$param1 = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'param2' at offset '0'
-	$param2 = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'gpio_driver_type' at offset '0'
-	$gpio_driver_type = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'gpio' at offset '0'
-	$gpio = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'pos' at offset '0'
-	$pos = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'name' at offset '0'
-	$name = unpack("C32", $in_ref);
-	$offset += 32;
-
-
-	####### return hash and used length #######
-	$return ( {
-		"mode" => $mode,
-		"param1" => $param1,
-		"param2" => $param2,
-		"gpio_driver_type" => $gpio_driver_type,
-		"gpio" => $gpio,
-		"pos" => $pos,
-		"name" => $name,
-	}, $offset );
-}
-
-
-##########################################################################################
-# convert function for 'struct avm_event_tffs_paniclog'
+# convert function for 'struct avm_event_tffs_write'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_paniclog {
+sub avm_event_read_from_binary_struct_avm_event_tffs_write {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4306,6 +4293,8 @@
 	####### liste of hash components #######
 	my $buff_addr;
 	my $len;
+	my $id;
+	my $final;
 	my $crc;
 
 	####### convert binary message to hash components #######
@@ -4318,7 +4307,15 @@
 	$len = unpack("a" . $offset . "/>L", $in_ref);
 	$offset += 8;
 
-	# c-struct component 'crc' at offset '16'
+	# c-struct component 'id' at offset '16'
+	$id = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'final' at offset '28'
+	$final = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'crc' at offset '40'
 	$crc = unpack("a" . $offset . "/>I>I", $in_ref);
 	$offset += 4;
 
@@ -4327,15 +4324,17 @@
 	$return ( {
 		"buff_addr" => $buff_addr,
 		"len" => $len,
+		"id" => $id,
+		"final" => $final,
 		"crc" => $crc,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_init'
+# convert function for 'struct avm_event_source_unregister'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_init {
+sub avm_event_read_from_binary_struct_avm_event_source_unregister {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4343,32 +4342,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $mem_offset;
-	my $max_seg_size;
+	my $id_mask;
+	my $name;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'mem_offset' at offset '0'
-	$mem_offset = unpack("", $in_ref);
-	$offset += 0;
+	# c-struct component 'id_mask' at offset '0'
+	( $id_mask, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_id_mask(
+				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
+	$offset += $struct_offset;
 
-	# c-struct component 'max_seg_size' at offset '0'
-	$max_seg_size = unpack(">I>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'name' at offset '0'
+	$name = unpack("C32", $in_ref);
+	$offset += 32;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"mem_offset" => $mem_offset,
-		"max_seg_size" => $max_seg_size,
+		"id_mask" => $id_mask,
+		"name" => $name,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_cmd_param_register'
+# convert function for 'struct avm_event_tffs_deinit'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_cmd_param_register {
+sub avm_event_read_from_binary_struct_avm_event_tffs_deinit {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4376,33 +4376,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $mask;
-	my $Name;
+	my $dummy;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'mask' at offset '0'
-	( $mask, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_id_mask(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
-	# c-struct component 'Name' at offset '0'
-	$Name = unpack("CMAX_EVENT_CLIENT_NAME_LEN + 1", $in_ref);
-	$offset += MAX_EVENT_CLIENT_NAME_LEN + 1;
+	# c-struct component 'dummy' at offset '0'
+	$dummy = unpack(">I>I>I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"mask" => $mask,
-		"Name" => $Name,
+		"dummy" => $dummy,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_smarthome'
+# convert function for 'struct avm_event_source_notifier'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_smarthome {
+sub avm_event_read_from_binary_struct_avm_event_source_notifier {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4410,48 +4403,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $length;
-	my @ident = ();
-	my $type;
-	my $payload;
+	my $id;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'length' at offset '0'
-	$length = unpack("", $in_ref);
-	$offset += 0;
-
-	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
-
-		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
-
-		$ident[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
-	}
-
-	# c-struct component 'type' at offset '20'
-	$type = unpack("a" . $offset . "/", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'payload' at offset '20'
-	( $payload, $struct_offset ) = avm_event_read_from_binary_struct_{}(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'id' at offset '0'
+	$id = unpack(">I", $in_ref);
+	$offset += 4;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"length" => $length,
-		"ident" => [ @ident ],
-		"type" => $type,
-		"payload" => $payload,
+		"id" => $id,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_user_mode_source_notify'
+# convert function for 'struct _avm_event_led_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_user_mode_source_notify {
+sub avm_event_read_from_binary_struct__avm_event_led_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4460,7 +4431,10 @@
 
 	####### liste of hash components #######
 	my $header;
-	my $id;
+	my $led;
+	my $state;
+	my $param_len;
+	my $params;
 
 	####### convert binary message to hash components #######
 
@@ -4469,23 +4443,38 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
+	# c-struct component 'led' at offset '0'
+	$led = unpack(">I", $in_ref);
 	$offset += 4;
 
+	# c-struct component 'state' at offset '4'
+	$state = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'param_len' at offset '4'
+	$param_len = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'params' at offset '4'
+	$params = unpack("a" . $offset . "/C245", $in_ref);
+	$offset += 245;
+
 
 	####### return hash and used length #######
 	$return ( {
 		"header" => $header,
-		"id" => $id,
+		"led" => $led,
+		"state" => $state,
+		"param_len" => $param_len,
+		"params" => $params,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_tffs_write'
+# convert function for 'struct avm_event_unserialised'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_tffs_write {
+sub avm_event_read_from_binary_struct_avm_event_unserialised {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4493,50 +4482,38 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $buff_addr;
-	my $len;
-	my $id;
-	my $final;
-	my $crc;
+	my $evnt_id;
+	my $data_len;
+	my $data;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'buff_addr' at offset '0'
-	$buff_addr = unpack(">L", $in_ref);
-	$offset += 8;
-
-	# c-struct component 'len' at offset '8'
-	$len = unpack("a" . $offset . "/>L", $in_ref);
+	# c-struct component 'evnt_id' at offset '0'
+	$evnt_id = unpack(">L", $in_ref);
 	$offset += 8;
 
-	# c-struct component 'id' at offset '16'
-	$id = unpack("a" . $offset . "/>I>I>I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'final' at offset '28'
-	$final = unpack("a" . $offset . "/>I>I>I", $in_ref);
+	# c-struct component 'data_len' at offset '8'
+	$data_len = unpack("a" . $offset . "/>I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'crc' at offset '40'
-	$crc = unpack("a" . $offset . "/>I>I", $in_ref);
-	$offset += 4;
+	# c-struct component 'data' at offset '20'
+	$data = unpack("a" . $offset . "/C", $in_ref);
+	$offset += 1;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"buff_addr" => $buff_addr,
-		"len" => $len,
-		"id" => $id,
-		"final" => $final,
-		"crc" => $crc,
+		"evnt_id" => $evnt_id,
+		"data_len" => $data_len,
+		"data" => $data,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_cpu_run'
+# convert function for 'struct avm_event_telefonprofile'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_cpu_run {
+sub avm_event_read_from_binary_struct_avm_event_telefonprofile {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4544,32 +4521,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $cputype;
-	my $cpu_run;
+	my $on;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'cputype' at offset '0'
-	$cputype = unpack(">I", $in_ref);
-	$offset += 4;
-
-	# c-struct component 'cpu_run' at offset '4'
-	$cpu_run = unpack("a" . $offset . "/C4", $in_ref);
-	$offset += 4;
+	# c-struct component 'on' at offset '0'
+	$on = unpack("", $in_ref);
+	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"cputype" => $cputype,
-		"cpu_run" => $cpu_run,
+		"on" => $on,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_telephony_missed_call_params'
+# convert function for 'struct avm_event_tffs_close'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_telephony_missed_call_params {
+sub avm_event_read_from_binary_struct_avm_event_tffs_close {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4577,33 +4548,26 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $id;
-	my $params;
+	my $dummy;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'id' at offset '0'
-	$id = unpack(">I", $in_ref);
+	# c-struct component 'dummy' at offset '0'
+	$dummy = unpack(">I>I>I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'params' at offset '4'
-	( $params, $struct_offset ) = avm_event_read_from_binary_union_avm_event_telephony_call_params(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
-
 
 	####### return hash and used length #######
 	$return ( {
-		"id" => $id,
-		"params" => $params,
+		"dummy" => $dummy,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct avm_event_wlan_power'
+# convert function for 'struct avm_event_smarthome_switch_status'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_avm_event_wlan_power {
+sub avm_event_read_from_binary_struct_avm_event_smarthome_switch_status {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4611,26 +4575,48 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $power;
+	my $type;
+	my $value;
+	my $ain_length;
+	my @ain = ();
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'power' at offset '0'
-	$power = unpack("", $in_ref);
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'value' at offset '4'
+	$value = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+
+	# c-struct component 'ain_length' at offset '4'
+	$ain_length = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
+	$array_element_anzahl  = $ain_length;
+
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$ain[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"power" => $power,
+		"type" => $type,
+		"value" => $value,
+		"ain_length" => $ain_length,
+		"ain" => [ @ain ],
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct cpmac_event_struct'
+# convert function for 'struct wlan_event_data_client_state_change'
 ##########################################################################################
-sub avm_event_read_from_binary_struct_cpmac_event_struct {
+sub avm_event_read_from_binary_struct_wlan_event_data_client_state_change {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4638,40 +4624,33 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_header;
-	my $ports;
-	my $port;
+	my $common;
+	my $state;
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+	# c-struct component 'common' at offset '0'
+	( $common, $struct_offset ) = avm_event_read_from_binary_struct_wlan_event_data_client_common(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'ports' at offset '0'
-	$ports = unpack("", $in_ref);
-	$offset += 0;
-
-	# c-struct component 'port' at offset '0'
-	( $port, $struct_offset ) = avm_event_read_from_binary_struct_cpmac_port(
-				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'state' at offset '0'
+	$state = unpack(">S", $in_ref);
+	$offset += 1;
 
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"ports" => $ports,
-		"port" => $port,
+		"common" => $common,
+		"state" => $state,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_temperature'
+# convert function for 'struct _avm_event_remotewatchdog'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_temperature {
+sub avm_event_read_from_binary_struct__avm_event_remotewatchdog {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4680,7 +4659,9 @@
 
 	####### liste of hash components #######
 	my $event_header;
-	my $temperature;
+	my $cmd;
+	my $name;
+	my $param;
 
 	####### convert binary message to hash components #######
 
@@ -4689,23 +4670,33 @@
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'temperature' at offset '0'
-	$temperature = unpack("", $in_ref);
+	# c-struct component 'cmd' at offset '0'
+	$cmd = unpack(">I", $in_ref);
+	$offset += 4;
+
+	# c-struct component 'name' at offset '4'
+	$name = unpack("a" . $offset . "/C16", $in_ref);
+	$offset += 16;
+
+	# c-struct component 'param' at offset '20'
+	$param = unpack("a" . $offset . "/", $in_ref);
 	$offset += 0;
 
 
 	####### return hash and used length #######
 	$return ( {
 		"event_header" => $event_header,
-		"temperature" => $temperature,
+		"cmd" => $cmd,
+		"name" => $name,
+		"param" => $param,
 	}, $offset );
 }
 
 
 ##########################################################################################
-# convert function for 'struct _avm_event_powermanagment_status'
+# convert function for 'struct _avm_event_firmware_update_available'
 ##########################################################################################
-sub avm_event_read_from_binary_struct__avm_event_powermanagment_status {
+sub avm_event_read_from_binary_struct__avm_event_firmware_update_available {
 	my ( $msg_length, $in_ref ) = $@;
 	my $offset = 0;
 	my $struct_offset;
@@ -4713,32 +4704,41 @@
 	my $array_element_size = 1;
 
 	####### liste of hash components #######
-	my $event_header;
-	my $substatus;
-	my $param;
+	my $header;
+	my $type;
+	my $version_length;
+	my @version = ();
 
 	####### convert binary message to hash components #######
 
-	# c-struct component 'event_header' at offset '0'
-	( $event_header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
+	# c-struct component 'header' at offset '0'
+	( $header, $struct_offset ) = avm_event_read_from_binary_struct__avm_event_header(
 				( $msg_length - $offset), unpack("C" . ($msg_length - $offset), $in_ref));
 	$offset += $struct_offset;
 
-	# c-struct component 'substatus' at offset '0'
-	$substatus = unpack(">I", $in_ref);
+	# c-struct component 'type' at offset '0'
+	$type = unpack(">I", $in_ref);
 	$offset += 4;
 
-	# c-struct component 'param' at offset '4'
-	( $param, $struct_offset ) = avm_event_read_from_binary_union___powermanagment_status_union(
-				( $msg_length - $offset), unpack("a" . $offset . "/C" . ($msg_length - $offset), $in_ref));
-	$offset += $struct_offset;
+	# c-struct component 'version_length' at offset '4'
+	$version_length = unpack("a" . $offset . "/", $in_ref);
+	$offset += 0;
+	$array_element_anzahl  = $version_length;
+
+	$for ( my $i = 0 ; $i < $array_element_anzahl ; $i++ ) {
+
+		my @unpack_type = ( " ", "C", ">S", ">C>S", ">I" );
+
+		$version[$i] = unpack("a" . $offset . "/" . $unpack_type[$array_element_size], $in_ref );
+	}
 
 
 	####### return hash and used length #######
 	$return ( {
-		"event_header" => $event_header,
-		"substatus" => $substatus,
-		"param" => $param,
+		"header" => $header,
+		"type" => $type,
+		"version_length" => $version_length,
+		"version" => [ @version ],
 	}, $offset );
 }
 
diff -ur linux-3.10/drivers/char/avm_new/avm_event.h linux-3.10/drivers/char/avm_new/avm_event.h
--- linux-3.10/drivers/char/avm_new/avm_event.h	2018-09-26 15:41:17.000000000 +0200
+++ linux-3.10/drivers/char/avm_new/avm_event.h	2019-01-02 12:04:50.000000000 +0100
@@ -1034,65 +1034,77 @@
 #endif /*--- #ifdef WIRESHARK_PLUGIN ---*/
 
 
-char *get_enum__powermanagment_status_type_name (enum _powermanagment_status_type value);
-char *get_enum_ePLCState_name (enum ePLCState value);
-char *get_enum_avm_event_powermanagment_remote_action_name (enum avm_event_powermanagment_remote_action value);
+char *get_enum_wlan_event_scan_type_name (enum wlan_event_scan_type value);
+char *get_enum_wlan_event_sel_name (enum wlan_event_sel value);
+char *get_enum___avm_event_cmd_name (enum __avm_event_cmd value);
 char *get_enum__avm_remotepcmlinktype_name (enum _avm_remotepcmlinktype value);
-char *get_enum_wlan_sm_states_name (enum wlan_sm_states value);
-char *get_enum_avm_event_switch_type_name (enum avm_event_switch_type value);
-char *get_enum_avm_event_internet_new_ip_param_sel_name (enum avm_event_internet_new_ip_param_sel value);
-char *get_enum_fax_receive_mode_name (enum fax_receive_mode value);
-char *get_enum_avm_event_tffs_open_mode_name (enum avm_event_tffs_open_mode value);
+char *get_enum__powermanagment_device_name (enum _powermanagment_device value);
+char *get_enum_avm_event_tffs_notify_event_name (enum avm_event_tffs_notify_event value);
 char *get_enum_wlan_info_sel_name (enum wlan_info_sel value);
-char *get_enum_avm_event_tffs_call_type_name (enum avm_event_tffs_call_type value);
-char *get_enum_avm_event_firmware_type_name (enum avm_event_firmware_type value);
-char *get_enum__avm_event_id_name (enum _avm_event_id value);
-char *get_enum_wlan_event_id_name (enum wlan_event_id value);
+char *get_enum_avm_event_powermanagment_remote_action_name (enum avm_event_powermanagment_remote_action value);
 char *get_enum__avm_remote_wdt_cmd_name (enum _avm_remote_wdt_cmd value);
-char *get_enum__avm_logtype_name (enum _avm_logtype value);
-char *get_enum__avm_rpctype_name (enum _avm_rpctype value);
-char *get_enum__powermanagment_device_name (enum _powermanagment_device value);
+char *get_enum__avm_event_push_button_key_name (enum _avm_event_push_button_key value);
+char *get_enum_ePLCState_name (enum ePLCState value);
+char *get_enum_avm_event_internet_new_ip_param_sel_name (enum avm_event_internet_new_ip_param_sel value);
+char *get_enum__cputype_name (enum _cputype value);
+char *get_enum_avm_event_tffs_open_mode_name (enum avm_event_tffs_open_mode value);
+char *get_enum_wlan_event_radio_recovery_state_name (enum wlan_event_radio_recovery_state value);
 char *get_enum__avm_event_ethernet_speed_name (enum _avm_event_ethernet_speed value);
-char *get_enum__avm_piglettype_name (enum _avm_piglettype value);
-char *get_enum_avm_event_telephony_param_sel_name (enum avm_event_telephony_param_sel value);
-char *get_enum_wlan_event_scan_type_name (enum wlan_event_scan_type value);
-char *get_enum___avm_event_cmd_name (enum __avm_event_cmd value);
-char *get_enum_wlan_info_special_name (enum wlan_info_special value);
-char *get_enum_avm_event_led_id_name (enum avm_event_led_id value);
-char *get_enum_wlan_event_sel_name (enum wlan_event_sel value);
 char *get_enum_avm_event_msg_type_name (enum avm_event_msg_type value);
-char *get_enum_avm_event_tffs_notify_event_name (enum avm_event_tffs_notify_event value);
+char *get_enum_wlan_sm_states_name (enum wlan_sm_states value);
+char *get_enum__avm_event_id_name (enum _avm_event_id value);
 char *get_enum_fax_file_event_type_name (enum fax_file_event_type value);
-char *get_enum__cputype_name (enum _cputype value);
-char *get_enum__avm_event_push_button_key_name (enum _avm_event_push_button_key value);
+char *get_enum_avm_event_firmware_type_name (enum avm_event_firmware_type value);
+char *get_enum_avm_event_telephony_param_sel_name (enum avm_event_telephony_param_sel value);
 char *get_enum_fax_storage_dest_name (enum fax_storage_dest value);
-char *get_enum_wlan_event_radio_recovery_state_name (enum wlan_event_radio_recovery_state value);
-/* pos 9600 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_client_common {
-	uint8_t mac[6];
+char *get_enum_avm_event_led_id_name (enum avm_event_led_id value);
+char *get_enum__avm_logtype_name (enum _avm_logtype value);
+char *get_enum_wlan_info_special_name (enum wlan_info_special value);
+char *get_enum_avm_event_switch_type_name (enum avm_event_switch_type value);
+char *get_enum__avm_piglettype_name (enum _avm_piglettype value);
+char *get_enum__avm_rpctype_name (enum _avm_rpctype value);
+char *get_enum__powermanagment_status_type_name (enum _powermanagment_status_type value);
+char *get_enum_wlan_event_id_name (enum wlan_event_id value);
+char *get_enum_avm_event_tffs_call_type_name (enum avm_event_tffs_call_type value);
+char *get_enum_fax_receive_mode_name (enum fax_receive_mode value);
+/* pos 9550 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_scan_common {
 	char iface[IFNAMSIZ + 1];
 	char initiator[16 + 1];
 } __attribute__((packed));
 
-/* pos 9600 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_scan_common {
+/* pos 9550 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_client_common {
+	uint8_t mac[6];
 	char iface[IFNAMSIZ + 1];
 	char initiator[16 + 1];
 } __attribute__((packed));
 
-/* pos 9600 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_powermanagment_remote_ressourceinfo {
-	enum _powermanagment_device device;
-	unsigned int power_rate;
-} __attribute__((packed));
-
-/* pos 9606.25 (Wed Sep 26 15:41:17 2018) */
+/* pos 9575 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_telephony_string {
 	unsigned int length;
 	unsigned char string[0];
 } __attribute__((packed));
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_radio_recovery {
+	int radio_id;
+	enum wlan_event_radio_recovery_state state;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_client_state_change {
+	struct wlan_event_data_client_common common;
+	uint8_t state;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_powermanagment_remote_ressourceinfo {
+	enum _powermanagment_device device;
+	unsigned int power_rate;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum avm_event_telephony_param_sel'
 -----------------------------------------------------------------------------------*/
@@ -1109,19 +1121,19 @@
 	unsigned int id;
 };
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_data_scan_event_info {
+	struct wlan_event_data_scan_common common;
+	enum wlan_event_scan_type event_type;
+} __attribute__((packed));
+
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
 struct wlan_event_data_client_state_idle {
 	struct wlan_event_data_client_common common;
 	uint8_t idle;
 } __attribute__((packed));
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_radio_recovery {
-	int radio_id;
-	enum wlan_event_radio_recovery_state state;
-} __attribute__((packed));
-
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
+/* pos 9600 (Wed Jan  2 12:04:50 2019) */
 struct wlan_event_data_client_connect_info {
 	struct wlan_event_data_client_common common;
 	uint8_t info_context;
@@ -1130,19 +1142,28 @@
 	uint16_t ieee80211_code;
 } __attribute__((packed));
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_client_state_change {
-	struct wlan_event_data_client_common common;
-	uint8_t state;
-} __attribute__((packed));
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+/*-----------------------------------------------------------------------------------
+	union entry is select by variable of type 'enum avm_event_internet_new_ip_param_sel'
+-----------------------------------------------------------------------------------*/
+union avm_event_internet_new_ip_param {
+	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v4) ---*/
+	unsigned char ipv4[4];
+	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v6) ---*/
+	unsigned char ipv6[16];
+};
 
-/* pos 9612.5 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_data_scan_event_info {
-	struct wlan_event_data_scan_common common;
-	enum wlan_event_scan_type event_type;
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+struct cpmac_port {
+	uint8_t cable;
+	uint8_t link;
+	uint8_t speed100;
+	uint8_t fullduplex;
+	enum _avm_event_ethernet_speed speed;
+	enum _avm_event_ethernet_speed maxspeed;
 } __attribute__((packed));
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_id'
 -----------------------------------------------------------------------------------*/
@@ -1159,22 +1180,44 @@
 	struct wlan_event_data_radio_recovery radio_recovery;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_sel'
 -----------------------------------------------------------------------------------*/
-union avm_event_wlan_client_status_u2 {
+union avm_event_wlan_client_status_u1 {
+	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT) ---*/
+	unsigned int sub_event;
+	/*--- select by [select-variable] one of (INPUT_MAC_AUTHORIZE) ---*/
+	unsigned int active_rate;
+	/*--- select by [select-variable] one of (INPUT_EAP_AUTHORIZED) ---*/
+	unsigned int active_rate1;
+	/*--- select by [select-variable] one of (INPUT_MADWIFI_WRONG_PSK) ---*/
+	unsigned int active_rate2;
+	/*--- select by [select-variable] one of (INPUT_AUTH_EXPIRED) ---*/
+	unsigned int active_rate3;
+	/*--- select by [select-variable] one of (INPUT_STA) ---*/
+	unsigned int active_rate4;
+	/*--- select by [select-variable] one of (INPUT_WDS_LINK_UP) ---*/
+	unsigned int active_rate5;
+	/*--- select by [select-variable] one of (INPUT_WDS_LINK_DOWN) ---*/
+	unsigned int active_rate6;
 	/*--- select by [select-variable] one of (INPUT_RADAR) ---*/
-	unsigned int radar_freq;
+	unsigned int radar_chan;
 	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT_PRECAC) ---*/
-	unsigned int radar_freq1;
-	/*--- select by [select-variable] one of (INPUT_AUTH_1_D) ---*/
-	unsigned int wlan_mode;
+	unsigned int radar_chan1;
+	/*--- select by [select-variable] one of (INPUT_GREENAP_PS) ---*/
+	unsigned int green_ap_ps_state;
+	/*--- select by [select-variable] one of (INPUT_COEXIST_SWITCH) ---*/
+	unsigned int coexist_ht40_state;
+	/*--- select by [select-variable] one of (INPUT_MAX_NODE_REACHED) ---*/
+	unsigned int max_node_count;
+	/*--- select by [select-variable] one of (INPUT_INTERFERENCE_CHAN_CHANGE) ---*/
+	unsigned int channel;
 	/*--- select by [select-variable] one of (INPUT_AUTH_1_OS_A) ---*/
 	unsigned int dummy0;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_wlan_credentials {
 	char ssid[33];
 	unsigned char bssid[6];
@@ -1182,40 +1225,22 @@
 	unsigned int security;
 } __attribute__((packed));
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_sel'
 -----------------------------------------------------------------------------------*/
-union avm_event_wlan_client_status_u3 {
+union avm_event_wlan_client_status_u2 {
 	/*--- select by [select-variable] one of (INPUT_RADAR) ---*/
-	unsigned int radar_time;
+	unsigned int radar_freq;
+	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT_PRECAC) ---*/
+	unsigned int radar_freq1;
+	/*--- select by [select-variable] one of (INPUT_AUTH_1_D) ---*/
+	unsigned int wlan_mode;
 	/*--- select by [select-variable] one of (INPUT_AUTH_1_OS_A) ---*/
 	unsigned int dummy0;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-/*-----------------------------------------------------------------------------------
-	union entry is select by variable of type 'enum avm_event_internet_new_ip_param_sel'
------------------------------------------------------------------------------------*/
-union avm_event_internet_new_ip_param {
-	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v4) ---*/
-	unsigned char ipv4[4];
-	/*--- select by [select-variable] one of (avm_event_internet_new_ip_v6) ---*/
-	unsigned char ipv6[16];
-};
-
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-/*-----------------------------------------------------------------------------------
-	union entry is select by variable of type 'enum avm_event_powermanagment_remote_action'
------------------------------------------------------------------------------------*/
-union avm_event_powermanagment_remote_union {
-	/*--- select by [select-variable] one of (avm_event_powermanagment_ressourceinfo) ---*/
-	struct avm_event_powermanagment_remote_ressourceinfo ressourceinfo;
-	/*--- select by [select-variable] one of (avm_event_powermanagment_activatepowermode) ---*/
-	char powermode[32];
-};
-
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum _powermanagment_status_type'
 -----------------------------------------------------------------------------------*/
@@ -1224,138 +1249,84 @@
 	unsigned int dsl_status;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_telephony_missed_call_params {
-	enum avm_event_telephony_param_sel id;
-	union avm_event_telephony_call_params params;
-} __attribute__((packed));
-
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum wlan_event_sel'
 -----------------------------------------------------------------------------------*/
-union avm_event_wlan_client_status_u1 {
-	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT) ---*/
-	unsigned int sub_event;
-	/*--- select by [select-variable] one of (INPUT_MAC_AUTHORIZE) ---*/
-	unsigned int active_rate;
-	/*--- select by [select-variable] one of (INPUT_EAP_AUTHORIZED) ---*/
-	unsigned int active_rate1;
-	/*--- select by [select-variable] one of (INPUT_MADWIFI_WRONG_PSK) ---*/
-	unsigned int active_rate2;
-	/*--- select by [select-variable] one of (INPUT_AUTH_EXPIRED) ---*/
-	unsigned int active_rate3;
-	/*--- select by [select-variable] one of (INPUT_STA) ---*/
-	unsigned int active_rate4;
-	/*--- select by [select-variable] one of (INPUT_WDS_LINK_UP) ---*/
-	unsigned int active_rate5;
-	/*--- select by [select-variable] one of (INPUT_WDS_LINK_DOWN) ---*/
-	unsigned int active_rate6;
+union avm_event_wlan_client_status_u3 {
 	/*--- select by [select-variable] one of (INPUT_RADAR) ---*/
-	unsigned int radar_chan;
-	/*--- select by [select-variable] one of (INPUT_RADAR_DFS_WAIT_PRECAC) ---*/
-	unsigned int radar_chan1;
-	/*--- select by [select-variable] one of (INPUT_GREENAP_PS) ---*/
-	unsigned int green_ap_ps_state;
-	/*--- select by [select-variable] one of (INPUT_COEXIST_SWITCH) ---*/
-	unsigned int coexist_ht40_state;
-	/*--- select by [select-variable] one of (INPUT_MAX_NODE_REACHED) ---*/
-	unsigned int max_node_count;
-	/*--- select by [select-variable] one of (INPUT_INTERFERENCE_CHAN_CHANGE) ---*/
-	unsigned int channel;
+	unsigned int radar_time;
 	/*--- select by [select-variable] one of (INPUT_AUTH_1_OS_A) ---*/
 	unsigned int dummy0;
 };
 
-/* pos 9625 (Wed Sep 26 15:41:17 2018) */
-struct cpmac_port {
-	uint8_t cable;
-	uint8_t link;
-	uint8_t speed100;
-	uint8_t fullduplex;
-	enum _avm_event_ethernet_speed speed;
-	enum _avm_event_ethernet_speed maxspeed;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_piglet {
-	enum _avm_piglettype type;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_mass_storage_mount {
-	unsigned long long size;
-	unsigned long long free;
-	unsigned int name_length;
-	unsigned char name[0];
-} __attribute__((packed));
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+/*-----------------------------------------------------------------------------------
+	union entry is select by variable of type 'enum avm_event_powermanagment_remote_action'
+-----------------------------------------------------------------------------------*/
+union avm_event_powermanagment_remote_union {
+	/*--- select by [select-variable] one of (avm_event_powermanagment_ressourceinfo) ---*/
+	struct avm_event_powermanagment_remote_ressourceinfo ressourceinfo;
+	/*--- select by [select-variable] one of (avm_event_powermanagment_activatepowermode) ---*/
+	char powermode[32];
+};
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_powermanagment_status {
-	enum _powermanagment_status_type substatus;
-	union __powermanagment_status_union param;
+/* pos 9650 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_telephony_missed_call_params {
+	enum avm_event_telephony_param_sel id;
+	union avm_event_telephony_call_params params;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_fax_status {
-	enum fax_receive_mode fax_receive_mode;
-	enum fax_storage_dest fax_storage_dest;
-	unsigned int dirname_length;
-	unsigned char dirname[0];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_log {
+	enum _avm_logtype logtype;
+	unsigned int loglen;
+	unsigned int logpointer;
+	unsigned int checksum;
+	unsigned int rebootflag;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_remotewatchdog {
-	enum _avm_remote_wdt_cmd cmd;
-	char name[16];
-	unsigned int param;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_wlan_power {
+	unsigned int power;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_internet_new_ip {
-	enum avm_event_internet_new_ip_param_sel sel;
-	union avm_event_internet_new_ip_param params;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_cpu_run {
+	enum _cputype cputype;
+	unsigned char cpu_run[4];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_remotepcmlink {
-	enum _avm_remotepcmlinktype type;
-	unsigned int sharedlen;
-	unsigned int sharedpointer;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct wlan_event_def {
+	enum wlan_event_id event_id;
+	union wlan_event_data event_data;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_fax_file {
 	enum fax_file_event_type action;
 	time_t date;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct _cpmac_event_struct {
-	unsigned int ports;
-	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_telefonprofile {
-	unsigned int on;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_powermanagment_remote {
+	enum avm_event_powermanagment_remote_action remote_action;
+	union avm_event_powermanagment_remote_union param;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_led_status {
-	enum _led_event led;
-	unsigned int state;
-	unsigned int param_len;
-	unsigned char params[AVM_LED_STATUS_MAX_PARAMLEN];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_ambient_brightness {
+	unsigned int value;
+	unsigned int maxvalue;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_powermanagment_remote {
-	enum avm_event_powermanagment_remote_action remote_action;
-	union avm_event_powermanagment_remote_union param;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_telefonprofile {
+	unsigned int on;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_smarthome_switch_status {
 	enum avm_event_switch_type type;
 	unsigned int value;
@@ -1363,60 +1334,85 @@
 	unsigned char ain[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct wlan_event_def {
-	enum wlan_event_id event_id;
-	union wlan_event_data event_data;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_boykott {
+	struct {} dummy;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_checkpoint {
-	uint32_t node_id;
-	uint64_t checkpoints;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_powermanagment_status {
+	enum _powermanagment_status_type substatus;
+	union __powermanagment_status_union param;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_boykott {
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct _cpmac_event_struct {
+	unsigned int ports;
+	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_telefon_up {
 	struct {} dummy;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_push_button {
-	enum _avm_event_push_button_key key;
-	uint32_t pressed;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_wlan {
+	char mac[6];
+	union avm_event_wlan_client_status_u1 u1;
+	wlan_event event;
+	wlan_info info;
+	enum wlan_sm_states status;
+	union avm_event_wlan_client_status_u2 u2;
+	char if_name[IFNAMSIZ];
+	unsigned int ev_initiator;
+	unsigned int ev_reason;
+	unsigned int avm_capabilities;
+	union avm_event_wlan_client_status_u3 u3;
+	struct avm_event_wlan_credentials credentials;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_cpu_run {
-	enum _cputype cputype;
-	unsigned char cpu_run[4];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_led_status {
+	enum _led_event led;
+	unsigned int state;
+	unsigned int param_len;
+	unsigned char params[AVM_LED_STATUS_MAX_PARAMLEN];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_wlan_power {
-	unsigned int power;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_fax_status {
+	enum fax_receive_mode fax_receive_mode;
+	enum fax_storage_dest fax_storage_dest;
+	unsigned int dirname_length;
+	unsigned char dirname[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_led_info {
-	unsigned int mode;
-	unsigned int param1;
-	unsigned int param2;
-	unsigned int gpio_driver_type;
-	unsigned int gpio;
-	unsigned int pos;
-	char name[MAX_EVENT_SOURCE_NAME_LEN];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_temperature {
+	int temperature;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_smarthome {
-	uint16_t length;
-	char ident[20];
-	uint16_t type;
-	struct {} payload;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_internet_new_ip {
+	enum avm_event_internet_new_ip_param_sel sel;
+	union avm_event_internet_new_ip_param params;
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_remotewatchdog {
+	enum _avm_remote_wdt_cmd cmd;
+	char name[16];
+	unsigned int param;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_telephony_missed_call {
+	unsigned int length;
+	struct _avm_event_telephony_missed_call_params p[0];
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_rpc {
 	enum _avm_rpctype type;
 	unsigned int id;
@@ -1424,38 +1420,20 @@
 	unsigned char message[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_cpu_idle {
-	unsigned char cpu_idle;
-	unsigned char dsl_dsp_idle;
-	unsigned char voice_dsp_idle;
-	unsigned char mem_strictlyused;
-	unsigned char mem_cacheused;
-	unsigned char mem_physfree;
-	enum _cputype cputype;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_log {
-	enum _avm_logtype logtype;
-	unsigned int loglen;
-	unsigned int logpointer;
-	unsigned int checksum;
-	unsigned int rebootflag;
-} __attribute__((packed));
-
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_temperature {
-	int temperature;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_remotepcmlink {
+	enum _avm_remotepcmlinktype type;
+	unsigned int sharedlen;
+	unsigned int sharedpointer;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_mass_storage_unmount {
 	unsigned int name_length;
 	unsigned char name[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_pm_info_stat {
 	unsigned char reserved1;
 	unsigned char rate_sumact;
@@ -1493,52 +1471,125 @@
 	unsigned char rate_dvbccum;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_telephony_missed_call {
-	unsigned int length;
-	struct _avm_event_telephony_missed_call_params p[0];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_mass_storage_mount {
+	unsigned long long size;
+	unsigned long long free;
+	unsigned int name_length;
+	unsigned char name[0];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_telefon_up {
-	struct {} dummy;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_push_button {
+	enum _avm_event_push_button_key key;
+	uint32_t pressed;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_wlan {
-	char mac[6];
-	union avm_event_wlan_client_status_u1 u1;
-	wlan_event event;
-	wlan_info info;
-	enum wlan_sm_states status;
-	union avm_event_wlan_client_status_u2 u2;
-	char if_name[IFNAMSIZ];
-	unsigned int ev_initiator;
-	unsigned int ev_reason;
-	unsigned int avm_capabilities;
-	union avm_event_wlan_client_status_u3 u3;
-	struct avm_event_wlan_credentials credentials;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_cpu_idle {
+	unsigned char cpu_idle;
+	unsigned char dsl_dsp_idle;
+	unsigned char voice_dsp_idle;
+	unsigned char mem_strictlyused;
+	unsigned char mem_cacheused;
+	unsigned char mem_physfree;
+	enum _cputype cputype;
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_ambient_brightness {
-	unsigned int value;
-	unsigned int maxvalue;
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_piglet {
+	enum _avm_piglettype type;
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_smarthome {
+	uint16_t length;
+	char ident[20];
+	uint16_t type;
+	struct {} payload;
+} __attribute__((packed));
+
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_led_info {
+	unsigned int mode;
+	unsigned int param1;
+	unsigned int param2;
+	unsigned int gpio_driver_type;
+	unsigned int gpio;
+	unsigned int pos;
+	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-/* pos 9650 (Wed Sep 26 15:41:17 2018) */
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_firmware_update_available {
 	enum avm_event_firmware_type type;
 	unsigned int version_length;
 	unsigned char version[0];
 } __attribute__((packed));
 
-/* pos 9700 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_id_mask {
-	avm_event_mask_fieldentry mask[avm_event_mask_fieldentries];
+/* pos 9675 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_checkpoint {
+	uint32_t node_id;
+	uint64_t checkpoints;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_write {
+	uint64_t buff_addr;
+	uint64_t len;
+	uint32_t id;
+	uint32_t final;
+	int32_t crc;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_close {
+	uint32_t dummy;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_deinit {
+	uint32_t dummy;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_info {
+	uint32_t fill_level;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_init {
+	int64_t mem_offset;
+	uint32_t max_seg_size;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_notify {
+	uint32_t id;
+	enum avm_event_tffs_notify_event event;
 } __attribute__((packed));
 
-/* pos 9700 (Wed Sep 26 15:41:17 2018) */
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_paniclog {
+	uint64_t buff_addr;
+	uint64_t len;
+	int32_t crc;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_cleanup {
+	uint32_t dummy;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_read {
+	uint64_t buff_addr;
+	uint64_t len;
+	uint32_t id;
+	int32_t crc;
+} __attribute__((packed));
+
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum _avm_event_id'
 -----------------------------------------------------------------------------------*/
@@ -1643,75 +1694,24 @@
 	struct avm_event_smarthome smarthome;
 };
 
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_reindex {
-	uint32_t dummy;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_info {
-	uint32_t fill_level;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_cleanup {
-	uint32_t dummy;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_read {
-	uint64_t buff_addr;
-	uint64_t len;
-	uint32_t id;
-	int32_t crc;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_close {
-	uint32_t dummy;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_tffs_open {
 	uint32_t id;
 	enum avm_event_tffs_open_mode mode;
 	uint32_t max_segment_size;
 } __attribute__((packed));
 
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_deinit {
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_tffs_reindex {
 	uint32_t dummy;
 } __attribute__((packed));
 
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_notify {
-	uint32_t id;
-	enum avm_event_tffs_notify_event event;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_write {
-	uint64_t buff_addr;
-	uint64_t len;
-	uint32_t id;
-	uint32_t final;
-	int32_t crc;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_paniclog {
-	uint64_t buff_addr;
-	uint64_t len;
-	int32_t crc;
-} __attribute__((packed));
-
-/* pos 9725 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_tffs_init {
-	int64_t mem_offset;
-	uint32_t max_seg_size;
+/* pos 9700 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_id_mask {
+	avm_event_mask_fieldentry mask[avm_event_mask_fieldentries];
 } __attribute__((packed));
 
-/* pos 9750 (Wed Sep 26 15:41:17 2018) */
+/* pos 9750 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum avm_event_tffs_call_type'
 -----------------------------------------------------------------------------------*/
@@ -1740,29 +1740,19 @@
 	struct avm_event_tffs_paniclog paniclog;
 };
 
-/* pos 9750 (Wed Sep 26 15:41:17 2018) */
+/* pos 9750 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_data {
 	enum _avm_event_id id;
 	union avm_event_data_union data;
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_source_notifier {
-	enum _avm_event_id id;
-} __attribute__((packed));
-
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_remote_source_trigger_request {
-	struct avm_event_data data;
-} __attribute__((packed));
-
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_source_unregister {
 	struct _avm_event_id_mask id_mask;
 	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_tffs {
 	uint32_t src_id;
 	uint32_t dst_id;
@@ -1775,40 +1765,67 @@
 	union avm_event_tffs_call_union call;
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
-struct avm_event_ping {
-	uint32_t seq;
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_source_notifier {
+	enum _avm_event_id id;
+} __attribute__((packed));
+
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_remote_source_trigger_request {
+	struct avm_event_data data;
 } __attribute__((packed));
 
-/* pos 9800 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct avm_event_source_register {
 	struct _avm_event_id_mask id_mask;
 	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_cmd_param_trigger {
-	enum _avm_event_id id;
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_cmd_param_register {
+	struct _avm_event_id_mask mask;
+	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
+} __attribute__((packed));
+
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_cmd_param_release {
+	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct avm_event_ping {
+	uint32_t seq;
+} __attribute__((packed));
+
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
 struct _avm_event_cmd_param_source_trigger {
 	enum _avm_event_id id;
 	unsigned int data_length;
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_cmd_param_register {
-	struct _avm_event_id_mask mask;
-	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
+/* pos 9800 (Wed Jan  2 12:04:50 2019) */
+struct _avm_event_cmd_param_trigger {
+	enum _avm_event_id id;
 } __attribute__((packed));
 
-/* pos 9850 (Wed Sep 26 15:41:17 2018) */
-struct _avm_event_cmd_param_release {
-	char Name[MAX_EVENT_CLIENT_NAME_LEN + 1];
-} __attribute__((packed));
+/* pos 9900 (Wed Jan  2 12:04:50 2019) */
+/*-----------------------------------------------------------------------------------
+	union entry is select by variable of type 'enum __avm_event_cmd'
+-----------------------------------------------------------------------------------*/
+union _avm_event_cmd_param {
+	/*--- select by [select-variable] one of (avm_event_cmd_register) ---*/
+	struct _avm_event_cmd_param_register avm_event_cmd_param_register;
+	/*--- select by [select-variable] one of (avm_event_cmd_release) ---*/
+	struct _avm_event_cmd_param_release avm_event_cmd_param_release;
+	/*--- select by [select-variable] one of (avm_event_cmd_trigger) ---*/
+	struct _avm_event_cmd_param_trigger avm_event_cmd_param_trigger;
+	/*--- select by [select-variable] one of (avm_event_cmd_source_register) ---*/
+	struct _avm_event_cmd_param_register avm_event_cmd_param_source_register;
+	/*--- select by [select-variable] one of (avm_event_cmd_source_trigger) ---*/
+	struct _avm_event_cmd_param_source_trigger avm_event_cmd_param_source_trigger;
+};
 
-/* pos 9900 (Wed Sep 26 15:41:17 2018) */
+/* pos 9900 (Wed Jan  2 12:04:50 2019) */
 /*-----------------------------------------------------------------------------------
 	union entry is select by variable of type 'enum avm_event_msg_type'
 -----------------------------------------------------------------------------------*/
@@ -1827,45 +1844,36 @@
 	struct avm_event_tffs tffs;
 };
 
-/* pos 9900 (Wed Sep 26 15:41:17 2018) */
+/* pos 9900 (Wed Jan  2 12:04:50 2019) */
 struct _avm_event_header {
 	enum _avm_event_id id;
 } __attribute__((packed));
 
-/* pos 9900 (Wed Sep 26 15:41:17 2018) */
-/*-----------------------------------------------------------------------------------
-	union entry is select by variable of type 'enum __avm_event_cmd'
------------------------------------------------------------------------------------*/
-union _avm_event_cmd_param {
-	/*--- select by [select-variable] one of (avm_event_cmd_register) ---*/
-	struct _avm_event_cmd_param_register avm_event_cmd_param_register;
-	/*--- select by [select-variable] one of (avm_event_cmd_release) ---*/
-	struct _avm_event_cmd_param_release avm_event_cmd_param_release;
-	/*--- select by [select-variable] one of (avm_event_cmd_trigger) ---*/
-	struct _avm_event_cmd_param_trigger avm_event_cmd_param_trigger;
-	/*--- select by [select-variable] one of (avm_event_cmd_source_register) ---*/
-	struct _avm_event_cmd_param_register avm_event_cmd_param_source_register;
-	/*--- select by [select-variable] one of (avm_event_cmd_source_trigger) ---*/
-	struct _avm_event_cmd_param_source_trigger avm_event_cmd_param_source_trigger;
-};
+struct _avm_event_cmd {
+	enum __avm_event_cmd cmd;
+	union _avm_event_cmd_param param;
+} __attribute__((packed));
 
-struct _avm_event_ambient_brightness {
+struct _avm_event_log {
 	struct _avm_event_header event_header;
-	unsigned int value;
-	unsigned int maxvalue;
+	enum _avm_logtype logtype;
+	unsigned int loglen;
+	unsigned int logpointer;
+	unsigned int checksum;
+	unsigned int rebootflag;
 } __attribute__((packed));
 
-struct _avm_event_mass_storage_unmount {
-	struct _avm_event_header header;
-	unsigned int name_length;
-	unsigned char name[0];
+struct avm_event_unserialised {
+	uint64_t evnt_id;
+	uint32_t data_len;
+	unsigned char data;
 } __attribute__((packed));
 
-struct _avm_event_remotepcmlink {
+struct _avm_event_remotewatchdog {
 	struct _avm_event_header event_header;
-	enum _avm_remotepcmlinktype type;
-	unsigned int sharedlen;
-	unsigned int sharedpointer;
+	enum _avm_remote_wdt_cmd cmd;
+	char name[16];
+	unsigned int param;
 } __attribute__((packed));
 
 struct _avm_event_firmware_update_available {
@@ -1875,18 +1883,6 @@
 	unsigned char version[0];
 } __attribute__((packed));
 
-struct _avm_event_powermanagment_remote {
-	struct _avm_event_header header;
-	enum avm_event_powermanagment_remote_action remote_action;
-	union avm_event_powermanagment_remote_union param;
-} __attribute__((packed));
-
-struct _avm_event_fax_file {
-	struct _avm_event_header header;
-	enum fax_file_event_type action;
-	time_t date;
-} __attribute__((packed));
-
 struct _avm_event_led_status {
 	struct _avm_event_header header;
 	enum _led_event led;
@@ -1895,24 +1891,38 @@
 	unsigned char params[AVM_LED_STATUS_MAX_PARAMLEN];
 } __attribute__((packed));
 
-struct avm_event_message {
-	uint32_t length;
-	uint32_t magic;
-	uint32_t nonce;
-	uint32_t flags;
-	int32_t result;
-	uint32_t transmitter_handle;
-	uint32_t receiver_handle;
-	enum avm_event_msg_type type;
-	union avm_event_message_union message;
+struct _avm_event_wlan {
+	struct _avm_event_header header;
+	char mac[6];
+	unsigned int u1;
+	unsigned int event;
+	unsigned int info;
+	unsigned int status;
+	unsigned int u2;
+	char if_name[IFNAMSIZ];
+	unsigned int ev_initiator;
+	unsigned int ev_reason;
+	unsigned int avm_capabilities;
+	unsigned int u3;
+	struct avm_event_wlan_credentials credentials;
 } __attribute__((packed));
 
-struct _avm_event_mass_storage_mount {
+struct _avm_event_ambient_brightness {
+	struct _avm_event_header event_header;
+	unsigned int value;
+	unsigned int maxvalue;
+} __attribute__((packed));
+
+struct _avm_event_powermanagment_remote_ressourceinfo {
 	struct _avm_event_header header;
-	unsigned long long size;
-	unsigned long long free;
-	unsigned int name_length;
-	unsigned char name[0];
+	enum _powermanagment_device device;
+	unsigned int power_rate;
+} __attribute__((packed));
+
+struct _avm_event_powermanagment_remote {
+	struct _avm_event_header header;
+	enum avm_event_powermanagment_remote_action remote_action;
+	union avm_event_powermanagment_remote_union param;
 } __attribute__((packed));
 
 struct _avm_event_led_info {
@@ -1926,16 +1936,81 @@
 	char name[MAX_EVENT_SOURCE_NAME_LEN];
 } __attribute__((packed));
 
-struct _avm_event_remotewatchdog {
+struct _avm_event_powerline_status {
 	struct _avm_event_header event_header;
-	enum _avm_remote_wdt_cmd cmd;
-	char name[16];
-	unsigned int param;
+	enum ePLCState status;
 } __attribute__((packed));
 
-struct _avm_event_piglet {
+struct _avm_event_remotepcmlink {
 	struct _avm_event_header event_header;
-	enum _avm_piglettype type;
+	enum _avm_remotepcmlinktype type;
+	unsigned int sharedlen;
+	unsigned int sharedpointer;
+} __attribute__((packed));
+
+struct _avm_event_checkpoint {
+	struct _avm_event_header event_header;
+	uint32_t node_id;
+	uint64_t checkpoints;
+} __attribute__((packed));
+
+struct _avm_event_internet_new_ip {
+	struct _avm_event_header header;
+	enum avm_event_internet_new_ip_param_sel sel;
+	union avm_event_internet_new_ip_param params;
+} __attribute__((packed));
+
+struct _avm_event_rpc {
+	struct _avm_event_header event_header;
+	enum _avm_rpctype type;
+	unsigned int id;
+	unsigned int length;
+	unsigned char message[0];
+} __attribute__((packed));
+
+struct _avm_event_fax_status {
+	struct _avm_event_header header;
+	enum fax_receive_mode fax_receive_mode;
+	enum fax_storage_dest fax_storage_dest;
+	unsigned int dirname_length;
+	unsigned char dirname[0];
+} __attribute__((packed));
+
+struct _avm_event_mass_storage_unmount {
+	struct _avm_event_header header;
+	unsigned int name_length;
+	unsigned char name[0];
+} __attribute__((packed));
+
+struct _avm_event_cpu_run {
+	struct _avm_event_header event_header;
+	enum _cputype cputype;
+	unsigned char cpu_run[4];
+} __attribute__((packed));
+
+struct _avm_event_push_button {
+	enum _avm_event_id id;
+	enum _avm_event_push_button_key key;
+	uint32_t pressed;
+} __attribute__((packed));
+
+struct _avm_event_smarthome_switch_status {
+	struct _avm_event_header header;
+	enum avm_event_switch_type type;
+	unsigned int value;
+	unsigned int ain_length;
+	unsigned char ain[0];
+} __attribute__((packed));
+
+struct _avm_event_cpu_idle {
+	struct _avm_event_header event_header;
+	unsigned char cpu_idle;
+	unsigned char dsl_dsp_idle;
+	unsigned char voice_dsp_idle;
+	unsigned char mem_strictlyused;
+	unsigned char mem_cacheused;
+	unsigned char mem_physfree;
+	enum _cputype cputype;
 } __attribute__((packed));
 
 struct _avm_event_pm_info_stat {
@@ -1976,26 +2051,16 @@
 	unsigned char rate_dvbccum;
 } __attribute__((packed));
 
-struct _avm_event_smarthome_switch_status {
-	struct _avm_event_header header;
-	enum avm_event_switch_type type;
-	unsigned int value;
-	unsigned int ain_length;
-	unsigned char ain[0];
+struct cpmac_event_struct {
+	struct _avm_event_header event_header;
+	unsigned int ports;
+	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
 } __attribute__((packed));
 
-struct _avm_event_fax_status {
+struct _avm_event_fax_file {
 	struct _avm_event_header header;
-	enum fax_receive_mode fax_receive_mode;
-	enum fax_storage_dest fax_storage_dest;
-	unsigned int dirname_length;
-	unsigned char dirname[0];
-} __attribute__((packed));
-
-struct avm_event_unserialised {
-	uint64_t evnt_id;
-	uint32_t data_len;
-	unsigned char data;
+	enum fax_file_event_type action;
+	time_t date;
 } __attribute__((packed));
 
 struct _avm_event_smarthome {
@@ -2006,15 +2071,9 @@
 	struct {} payload;
 } __attribute__((packed));
 
-struct _avm_event_cpu_idle {
+struct _avm_event_piglet {
 	struct _avm_event_header event_header;
-	unsigned char cpu_idle;
-	unsigned char dsl_dsp_idle;
-	unsigned char voice_dsp_idle;
-	unsigned char mem_strictlyused;
-	unsigned char mem_cacheused;
-	unsigned char mem_physfree;
-	enum _cputype cputype;
+	enum _avm_piglettype type;
 } __attribute__((packed));
 
 struct _avm_event_telefonprofile {
@@ -2028,107 +2087,48 @@
 	union __powermanagment_status_union param;
 } __attribute__((packed));
 
-struct cpmac_event_struct {
-	struct _avm_event_header event_header;
-	unsigned int ports;
-	struct cpmac_port port[AVM_EVENT_ETH_MAXPORTS];
-} __attribute__((packed));
-
 struct _avm_event_temperature {
 	struct _avm_event_header event_header;
 	int temperature;
 } __attribute__((packed));
 
-struct _avm_event_user_mode_source_notify {
-	struct _avm_event_header header;
-	enum _avm_event_id id;
-} __attribute__((packed));
-
 struct avm_event_powerline_status {
 	enum ePLCState status;
 } __attribute__((packed));
 
-struct _avm_event_checkpoint {
-	struct _avm_event_header event_header;
-	uint32_t node_id;
-	uint64_t checkpoints;
-} __attribute__((packed));
-
-struct avm_event_user_mode_source_notify {
-	enum _avm_event_id id;
-} __attribute__((packed));
-
-struct _avm_event_powerline_status {
-	struct _avm_event_header event_header;
-	enum ePLCState status;
-} __attribute__((packed));
-
-struct _avm_event_cmd {
-	enum __avm_event_cmd cmd;
-	union _avm_event_cmd_param param;
-} __attribute__((packed));
-
-struct _avm_event_wlan {
+struct _avm_event_telephony_missed_call {
 	struct _avm_event_header header;
-	char mac[6];
-	unsigned int u1;
-	unsigned int event;
-	unsigned int info;
-	unsigned int status;
-	unsigned int u2;
-	char if_name[IFNAMSIZ];
-	unsigned int ev_initiator;
-	unsigned int ev_reason;
-	unsigned int avm_capabilities;
-	unsigned int u3;
-	struct avm_event_wlan_credentials credentials;
-} __attribute__((packed));
-
-struct _avm_event_rpc {
-	struct _avm_event_header event_header;
-	enum _avm_rpctype type;
-	unsigned int id;
 	unsigned int length;
-	unsigned char message[0];
+	struct _avm_event_telephony_missed_call_params p[0];
 } __attribute__((packed));
 
-struct _avm_event_internet_new_ip {
+struct _avm_event_mass_storage_mount {
 	struct _avm_event_header header;
-	enum avm_event_internet_new_ip_param_sel sel;
-	union avm_event_internet_new_ip_param params;
-} __attribute__((packed));
-
-struct _avm_event_log {
-	struct _avm_event_header event_header;
-	enum _avm_logtype logtype;
-	unsigned int loglen;
-	unsigned int logpointer;
-	unsigned int checksum;
-	unsigned int rebootflag;
-} __attribute__((packed));
-
-struct _avm_event_cpu_run {
-	struct _avm_event_header event_header;
-	enum _cputype cputype;
-	unsigned char cpu_run[4];
+	unsigned long long size;
+	unsigned long long free;
+	unsigned int name_length;
+	unsigned char name[0];
 } __attribute__((packed));
 
-struct _avm_event_push_button {
+struct avm_event_user_mode_source_notify {
 	enum _avm_event_id id;
-	enum _avm_event_push_button_key key;
-	uint32_t pressed;
 } __attribute__((packed));
 
-struct _avm_event_telephony_missed_call {
+struct _avm_event_user_mode_source_notify {
 	struct _avm_event_header header;
-	unsigned int length;
-	struct _avm_event_telephony_missed_call_params p[0];
+	enum _avm_event_id id;
 } __attribute__((packed));
 
-struct _avm_event_powermanagment_remote_ressourceinfo {
-	struct _avm_event_header header;
-	enum _powermanagment_device device;
-	unsigned int power_rate;
+struct avm_event_message {
+	uint32_t length;
+	uint32_t magic;
+	uint32_t nonce;
+	uint32_t flags;
+	int32_t result;
+	uint32_t transmitter_handle;
+	uint32_t receiver_handle;
+	enum avm_event_msg_type type;
+	union avm_event_message_union message;
 } __attribute__((packed));
 
