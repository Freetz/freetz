--- PATCHES
+++ PATCHES
@@ -0,0 +1 @@
+vasprintf
--- VERSION
+++ VERSION
@@ -1 +1 @@
-3.1.5
+3.1.5-p1
--- src/mpfr.h
+++ src/mpfr.h
@@ -27,7 +27,7 @@
 #define MPFR_VERSION_MAJOR 3
 #define MPFR_VERSION_MINOR 1
 #define MPFR_VERSION_PATCHLEVEL 5
-#define MPFR_VERSION_STRING "3.1.5"
+#define MPFR_VERSION_STRING "3.1.5-p1"
 
 /* Macros dealing with MPFR VERSION */
 #define MPFR_VERSION_NUM(a,b,c) (((a) << 16L) | ((b) << 8) | (c))
--- src/vasprintf.c
+++ src/vasprintf.c
@@ -1593,7 +1593,7 @@
         }
       else if (spec.spec == 'f' || spec.spec == 'F')
         {
-          if (spec.prec == -1)
+          if (spec.prec < 0)
             spec.prec = 6;
           if (regular_fg (np, p, spec, NULL) == -1)
             goto error;
--- src/version.c
+++ src/version.c
@@ -25,5 +25,5 @@
 const char *
 mpfr_get_version (void)
 {
-  return "3.1.5";
+  return "3.1.5-p1";
 }
--- tests/tsprintf.c
+++ tests/tsprintf.c
@@ -1251,6 +1251,25 @@
   check_emin_aux (MPFR_EMIN_MIN);
 }
 
+static void
+test20161214 (void)
+{
+  mpfr_t x;
+  char buf[32];
+  const char s[] = "0x0.fffffffffffff8p+1024";
+  int r;
+
+  mpfr_init2 (x, 64);
+  mpfr_set_str (x, s, 16, MPFR_RNDN);
+  r = mpfr_snprintf (buf, 32, "%.*RDf", -2, x);
+  MPFR_ASSERTN(r == 316);
+  r = mpfr_snprintf (buf, 32, "%.*RDf", INT_MIN + 1, x);
+  MPFR_ASSERTN(r == 316);
+  r = mpfr_snprintf (buf, 32, "%.*RDf", INT_MIN, x);
+  MPFR_ASSERTN(r == 316);
+  mpfr_clear (x);
+}
+
 int
 main (int argc, char **argv)
 {
@@ -1271,6 +1290,7 @@
   mixed ();
   check_emax ();
   check_emin ();
+  test20161214 ();
 
 #if defined(HAVE_LOCALE_H) && defined(HAVE_SETLOCALE)
 #if MPFR_LCONV_DPTS
