--- cli-runopts.c
+++ cli-runopts.c
@@ -96,6 +96,20 @@
 #ifdef DEBUG_TRACE
 					"-v    verbose (compiled with DEBUG_TRACE)\n"
 #endif
+#ifdef DROPBEAR_YOURFRITZ
+					"\nThis is a special version created from the Freetz trunk and it's\n"
+					"stripped down to the really needed functions to be usable on a FRITZ!Box\n"
+					"device with the RSA key stored there. It supports only a limited set of\n"
+					"KEX and CIPHER algorithms and isn't backward compatible to elder SSH\n"
+					"clients (by intention). It allows only root user logins with public key\n"
+					"authentication, no other user(s) and/or methods will be accepted.\n"
+					"It's not optimized for size and the usually disabled TRACE output option\n"
+					"is explicitly enabled.\n"
+					"The FRITZ!Box key (/var/flash/websrv_ssl_key.pem) is the only supported\n"
+					"RSA key file for both server and client usage and it will be read only\n"
+					"from this location with automatic decryption.\n\n"
+#endif
+
 					,DROPBEAR_VERSION, cli_opts.progname,
 #ifdef ENABLE_CLI_PUBKEY_AUTH
 					DROPBEAR_DEFAULT_CLI_AUTHKEY,
@@ -214,10 +228,12 @@
 					next = &cli_opts.remoteport;
 					break;
 #ifdef ENABLE_CLI_PUBKEY_AUTH
+#ifndef DROPBEAR_YOURFRITZ
 				case 'i': /* an identityfile */
 					opt = OPT_AUTHKEY;
 					break;
 #endif
+#endif
 				case 't': /* we want a pty */
 					cli_opts.wantpty = 1;
 					break;
--- common-runopts.c
+++ common-runopts.c
@@ -31,8 +31,126 @@
 #include "algo.h"
 #include "dbrandom.h"
 
+#ifdef DROPBEAR_YOURFRITZ
+
+// it's possible to use OpenSSL libraries here, because we're on an AVM
+// router, where the OpenSSL library libcrypto.so is almost ever available
+// and it's even used to store the encrypted RSA key file ... so we can
+// use it without any scruple for the "lean SSH server" too
+
+// libtomcrypt contains own versions of the SHAx defines, we don't need them
+// here really and so we'll simply remove the previous definitions
+#undef SHA1
+#undef SHA256
+#undef SHA512
+
+// OpenSSL definitions and reading of device-specific password for the key file
+#include <openssl/pem.h>
+#include <openssl/bn.h>
+#include <openssl/err.h>
+#include <openssl/evp.h>
+#include <privatekeypassword/privatekeypassword.h>
+
+#endif
+
 runopts opts; /* GLOBAL */
 
+int buf_readdevicekey(buffer* buf, const char* filename) {
+	int ret = DROPBEAR_FAILURE;
+
+	char *password = getStaticPrivateKeyPassword();
+	if (password == NULL) {
+		TRACE(("error reading device specific password"))
+		return ret;
+	}
+
+	FILE *fp = fopen(filename, "rb");
+	if (fp == NULL) {
+		TRACE(("error opening RSA key file %s", filename))
+		return ret;
+	}
+	
+	OpenSSL_add_all_algorithms();
+
+	RSA *boxRSA = RSA_new();
+	if (boxRSA == NULL) {
+		fclose(fp);
+		TRACE(("error allocating RSA structure"))
+		EVP_cleanup();
+		return ret;
+	}
+
+	if (PEM_read_RSAPrivateKey(fp, &boxRSA, NULL, (void *) password) == NULL) {
+		unsigned long osslErr = ERR_get_error();
+		RSA_free(boxRSA);
+		fclose(fp);
+		TRACE(("error reading RSA key\n%s", ERR_error_string(osslErr, NULL)))
+		EVP_cleanup();
+		return ret;
+	}
+
+	fclose(fp);
+	TRACE2(("box key read successfully, extracting key components"))
+
+// copy RSA key components to buffer, it's the simplest way to exchange data
+// we need e, n, d, p, q in this order, preceded by a "ssh-rsa" string
+	buf_putstring(buf, "ssh-rsa", 7);
+
+	BIGNUM ** 	numbers[6];
+	int		len = 0; 
+	BIGNUM ***	current;
+
+// this list is the source of components and the order to copy them
+	numbers[0] = &boxRSA->e;
+	numbers[1] = &boxRSA->n;
+	numbers[2] = &boxRSA->d;
+	numbers[3] = &boxRSA->p;
+	numbers[4] = &boxRSA->q;
+	numbers[5] = NULL;
+
+// determine needed conversion buffer size
+	current = numbers;
+	while (*current != NULL) {
+		int newlen = BN_bn2mpi(**current, NULL);
+		if (newlen > len) len = newlen;
+		current++;
+	}
+
+// allocate a structure with containing a serialized mp_int
+	struct {
+		int		len;
+		unsigned char 	data[];
+	} * 	mp = malloc(len);
+	if (mp == NULL) {
+		TRACE(("unable to allocate memory to convert from BIGNUM to buffer"))
+		RSA_free(boxRSA);
+		EVP_cleanup();
+		return ret;
+	}
+
+// we use a temporary buffer, because both BIGNUM implementations want an unsigned
+// char pointer and the internal structures of "mp_int" and "BIGNUM" are different
+// ... so we'll convert BIGNUM to mpi (4 byte length + variable size data) and write
+// the result to our buffer
+	current = numbers;
+	while (*current != NULL) {
+		BN_bn2mpi(**current, (unsigned char *) mp);
+		buf_putstring(buf, mp->data, mp->len);
+		current++;
+	}
+	free(mp);
+
+// shutdown OpenSSL routines
+	TRACE2(("freeing OpenSSL RSA structure"))
+	RSA_free(boxRSA);
+	TRACE2(("calling EVP_cleanup"))
+	EVP_cleanup();
+
+	ret = DROPBEAR_SUCCESS;
+	TRACE(("using device key file from %s", filename))
+	return ret;
+}
+
 /* returns success or failure, and the keytype in *type. If we want
  * to restrict the type, type can contain a type to return */
 int readhostkey(const char * filename, sign_key * hostkey, 
@@ -43,7 +161,11 @@
 
 	buf = buf_new(MAX_PRIVKEY_SIZE);
 
+#ifdef DROPBEAR_YOURFRITZ
+	if (buf_readdevicekey(buf, filename) == DROPBEAR_FAILURE) {
+#else
 	if (buf_readfile(buf, filename) == DROPBEAR_FAILURE) {
+#endif
 		goto out;
 	}
 	buf_setpos(buf, 0);
--- svr-runopts.c
+++ svr-runopts.c
@@ -41,6 +41,7 @@
 
 	fprintf(stderr, "Dropbear server v%s https://matt.ucc.asn.au/dropbear/dropbear.html\n"
 					"Usage: %s [options]\n"
+#ifndef DROPBEAR_YOURFRITZ
 					"-b bannerfile	Display the contents of bannerfile"
 					" before user login\n"
 					"		(default: none)\n"
@@ -58,6 +59,7 @@
 #ifdef DROPBEAR_DELAY_HOSTKEY
 					"-R		Create hostkeys as required\n" 
 #endif
+#endif
 #ifdef DROPBEAR_SFTPSERVER
 					"-S sftpserver	Set path to sftp server\n"
 					"		(default: %s)\n"
@@ -71,8 +73,10 @@
 #ifdef DO_MOTD
 					"-m		Don't display the motd on login\n"
 #endif
+#ifndef DROPBEAR_YOURFRITZ
 					"-w		Disallow root logins\n"
 					"-0		Allow only root logins\n"
+#endif
 #if defined(ENABLE_SVR_PASSWORD_AUTH) || defined(ENABLE_SVR_PAM_AUTH)
 					"-s		Disable password logins\n"
 					"-g		Disable password logins for root\n"
@@ -103,7 +107,21 @@
 #ifdef DEBUG_TRACE
 					"-v		verbose (compiled with DEBUG_TRACE)\n"
 #endif
+#ifdef DROPBEAR_YOURFRITZ
+					"\nThis is a special version created from the Freetz trunk and it's\n"
+					"stripped down to the really needed functions to be usable on a FRITZ!Box\n"
+					"device with the RSA key stored there. It supports only a limited set of\n"
+					"KEX and CIPHER algorithms and isn't backward compatible to elder SSH\n"
+					"clients (by intention). It allows only root user logins with public key\n"
+					"authentication, no other user(s) and/or methods will be accepted.\n"
+					"It's not optimized for size and the usually disabled TRACE output option\n"
+					"is explicitly enabled.\n"
+					"The FRITZ!Box key (/var/flash/websrv_ssl_key.pem) is the only supported\n"
+					"RSA key file for both server and client usage and it will be read only\n"
+					"from this location with automatic decryption.\n\n"
+#endif
 					,DROPBEAR_VERSION, progname,
+#ifndef DROPBEAR_YOURFRITZ
 #ifdef DROPBEAR_DSS
 					DSS_PRIV_FILENAME,
 #endif
@@ -113,6 +131,7 @@
 #ifdef DROPBEAR_ECDSA
 					ECDSA_PRIV_FILENAME,
 #endif
+#endif
 #ifdef DROPBEAR_SFTPSERVER
 					SFTPSERVER_PATH,
 #endif
@@ -180,6 +199,11 @@
 	opts.keepalive_secs = DEFAULT_KEEPALIVE;
 	opts.idle_timeout_secs = DEFAULT_IDLE_TIMEOUT;
 	
+#ifdef DROPBEAR_YOURFRITZ
+	svr_opts.rootonlylogin = 1;
+	svr_opts.noauthpass = 1;
+#endif
+
 #ifdef ENABLE_SVR_REMOTETCPFWD
 	opts.listen_fwd_all = 0;
 #endif
@@ -190,6 +214,7 @@
 
 		for (j = 1; (c = argv[i][j]) != '\0' && !next && !nextisport; j++) {
 			switch (c) {
+#ifndef DROPBEAR_YOURFRITZ
 				case 'b':
 					next = &svr_opts.bannerfile;
 					break;
@@ -200,6 +225,7 @@
 				case 'R':
 					svr_opts.delay_hostkey = 1;
 					break;
+#endif
 #ifdef DROPBEAR_SFTPSERVER
 				case 'S':
 					next = &svr_opts.sftppath;
@@ -246,12 +272,14 @@
 					svr_opts.domotd = 0;
 					break;
 #endif
+#ifndef DROPBEAR_YOURFRITZ
 				case 'w':
 					svr_opts.norootlogin = 1;
 					break;
 				case '0':
 					svr_opts.rootonlylogin = 1;
 					break;
+#endif
 				case 'W':
 					next = &recv_window_arg;
 					break;

