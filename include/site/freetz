# Common options for the mips target that configure can't find out
# because we are cross-compiling.

# Types and sizes
ac_cv_type_pid_t=yes
ac_cv_type_ptrdiff_t=yes
ac_cv_type_struct_sockaddr_storage=yes
ac_cv_sizeof_char=1
ac_cv_sizeof_short=2
ac_cv_sizeof_int=4
ac_cv_sizeof_long=4
ac_cv_sizeof_long_long=8
ac_cv_sizeof_void_p=4
ac_cv_sizeof_pid_t=4
ac_cv_sizeof_ptrdiff_t=4
ac_cv_sizeof_size_t=4
ac_cv_sizeof_ssize_t=4
ac_cv_sizeof_socklen_t=4
ac_cv_sizeof_fpos_t=24
ac_cv_sizeof_off_t=8
ac_cv_sizeof_stat_st_size=8

# Header files
ac_cv_header_time=yes
# C Library function
ac_cv_have_decl_malloc=yes
ac_cv_func_calloc_0_nonnull=yes
ac_cv_func_malloc_0_nonnull=yes
ac_cv_func_realloc_0_nonnull=yes
ac_cv_func_memcmp_working=yes
ac_cv_func_getpwuid_r=yes
ac_cv_func_posix_getpwuid_r=yes
ac_cv_func_getgrgid_r=yes
ac_cv_func_posix_getgrgid_r=yes
ac_cv_func_setpgrp_void=yes
ac_cv_func_mmap_fixed_mapped=yes
for name in bcopy bzero rename fchmod fchown index rindex strerror lstat _exit utimes vsnprintf getcwd strftime fork fork_works vfork vfork_works; do
	eval ac_cv_func_$name=yes
done

# dlfcn
ac_cv_header_dlfcn_h=yes
for name in dlopen dlclose dlsym dlerror; do
	# function resides in libc
	eval ac_cv_func_$name=no
	# function resides in libdl
	eval ac_cv_lib_dl_$name=yes
done

# disable all epoll functions as they are known to cause problems on some boxes (probably a kernel bug, affected versions 2.6.13.x/2.6.19.x)
ac_cv_header_sys_epoll_h=no
ac_cv_epoll=no
ac_cv_epoll_works=no
ac_cv_epoll_create=no
ac_cv_func_epoll_create=no
ac_cv_epoll_create1=no
ac_cv_func_epoll_create1=no
ac_cv_epoll_ctl=no
ac_cv_func_epoll_ctl=no
ac_cv_epoll_wait=no
ac_cv_func_epoll_wait=no

#
# the following syscalls are supported by 2.6.32 but not by 2.6.28 (mips arch)
# s. http://freetz.org/attachment/ticket/2519/2.6.28-vs-2.6.32-syscall-comparison.diff for details
#
# preadv             not used/supported by uClibc (as of 0.9.33.x)
# pwritev            not used/supported by uClibc (as of 0.9.33.x)
# rt_tgsigqueueinfo  referenced from libpthread/nptl/sysdeps/unix/sysv/linux/pthread_sigqueue.c
# perf_event_open    not used/supported by uClibc (as of 0.9.33.x)
# accept4            supported by uClibc since 0.9.32.x, which provides two implementations: _NR_accept4- and __NR_socketcall-based one
#                    freetz uses the __NR_socketcall-based one which works on both 2.6.28 and 2.6.32
#
# avoid using the corresponding libc-functions in packages compiled using the freetz-toolchain
# as long as it's not kernel specific (i.e. identical for both 2.6.28 and 2.6.32 based boxes)
#
for name in pthread_sigqueue; do
	eval ac_cv_func_$name=no
done

# Math Library functions (the values below could be generated/verified using make target-tester-math-functions)
# Some packages incorrectly expect these functions to be in libc. This causes the corresponding test to fail
# and the corresponding variable to be set to no. This in turn breaks the compilation of other packages (e.g. rrdtool)
# that do really require these functions.
# In case the compilation of some package stops with undefined reference to one of the functions below
# add libm to its dependency list and -lm to its link options.
ac_cv_func_isnan=yes
ac_cv_func_isinf=yes
ac_cv_func_finite=yes

# Other Libraries
ac_cv_file__usr_X11R6_lib64=no
ac_cv_file__usr_X11R6_lib=no

# Linux system
ac_cv_linux_vers=2.6.13.1
ac_cv_CAN_USE_SYSCTL=no

# Other

# silence "using cross tools not prefixed with host triplet"-warning
ac_tool_warned=yes

# Fool configure scripts calling config.rpath script and messing up config.cache with host linker options.
# Search for "checking for shared library run path origin" in configure script to understand what is meant.
acl_cv_rpath=done

# Some configure scripts do not provide a default value for acl_cv_libext as they assume it will be set by config.rpath.
# The latter is however never executed in freetz environment because of acl_cv_rpath set to 'done'.
acl_cv_libext=a
